{"version":3,"sources":["providers/cluster.tsx","../../src/amman.ts","components/ProgramLogsCardBody.tsx","utils/program-err.ts","utils/program-logs.ts","../../../src/relay/consts.ts","../../src/utils.ts","utils/index.tsx","utils/sentry.ts","../../../src/diagnostics/address-labels.ts","../../../src/relay/index.ts","../../../src/transactions/index.ts","components/common/TableCardBody.tsx","components/common/Downloadable.tsx","pages/inspector/SimulatorCard.tsx","utils/url.ts","serumMarketRegistry.ts","utils/tx.ts","../../src/api.ts","../../../src/relay/client.ts","../../../src/asserts/index.ts","../../../src/diagnostics/index.ts","../../../src/diagnostics/token-balances.ts","../../../src/diagnostics/token-registry.ts","../../../src/transactions/transaction-handler.ts","components/common/Overlay.tsx","components/ClusterModal.tsx","utils/date.ts","components/MessageBanner.tsx","img/logos-solana/dark-explorer-logo.svg","components/ClusterStatusButton.tsx","components/Navbar.tsx","providers/mints/token-registry.tsx","amman/TransactionsMonitor.ts","amman/log.ts","amman/amman-client.ts","amman/CustomAddressLabelsMonitor.ts","amman/providers.tsx","amman/components.tsx","components/SearchBar.tsx","providers/cache.tsx","providers/accounts/history.tsx","validators/pubkey.ts","validators/accounts/token.ts","providers/accounts/tokens.tsx","validators/index.ts","validators/bignum.ts","validators/accounts/stake.ts","validators/accounts/vote.ts","validators/accounts/nonce.ts","validators/accounts/sysvar.ts","validators/accounts/config.ts","providers/accounts/flagged-accounts.tsx","validators/accounts/upgradeable-program.ts","providers/block.tsx","providers/accounts/rewards.tsx","providers/accounts/utils/getEditionInfo.ts","providers/accounts/index.tsx","components/common/Copyable.tsx","components/common/Address.tsx","components/common/Epoch.tsx","components/account/StakeAccountSection.tsx","components/account/UnknownAccountCard.tsx","utils/coingecko.tsx","components/common/LoadingCard.tsx","providers/accounts/utils/isMetaplexNFT.ts","components/account/TokenAccountSection.tsx","components/common/ErrorCard.tsx","components/common/Identicon.tsx","components/account/OwnedTokensCard.tsx","components/common/Signature.tsx","components/common/Slot.tsx","providers/transactions/parsed.tsx","components/instruction/token-swap/types.ts","components/instruction/token-lending/types.ts","components/instruction/serum/types.ts","components/instruction/bonfida-bot/types.ts","providers/transactions/raw.tsx","providers/transactions/index.tsx","components/common/InfoTooltip.tsx","components/common/BalanceDelta.tsx","components/transaction/TokenBalancesCard.tsx","components/common/HexData.tsx","components/instruction/RawDetails.tsx","components/instruction/RawParsedDetails.tsx","components/instruction/InstructionCard.tsx","components/instruction/bpf-loader/types.ts","components/instruction/UnknownDetailsCard.tsx","components/instruction/bpf-loader/BpfLoaderDetailsCard.tsx","components/instruction/MemoDetailsCard.tsx","components/instruction/serum/NewOrderDetailsCard.tsx","components/instruction/serum/MatchOrdersDetailsCard.tsx","components/instruction/serum/InitializeMarketDetailsCard.tsx","components/instruction/serum/ConsumeEventsDetails.tsx","components/instruction/serum/CancelOrderDetails.tsx","components/instruction/serum/CancelOrderByClientIdDetails.tsx","components/instruction/serum/SettleFundsDetailsCard.tsx","components/instruction/serum/DisableMarketDetails.tsx","components/instruction/serum/SweepFeesDetails.tsx","components/instruction/serum/NewOrderV3DetailsCard.tsx","components/instruction/serum/CancelOrderV2Details.tsx","components/instruction/serum/CancelOrderByClientIdV2Details.tsx","components/instruction/serum/CloseOpenOrdersDetails.tsx","components/instruction/serum/InitOpenOrdersDetails.tsx","components/instruction/serum/PruneDetails.tsx","components/instruction/serum/ConsumeEventsPermissionedDetails.tsx","components/instruction/SerumDetailsCard.tsx","components/instruction/stake/InitializeDetailsCard.tsx","components/instruction/stake/DelegateDetailsCard.tsx","components/instruction/stake/AuthorizeDetailsCard.tsx","components/instruction/stake/SplitDetailsCard.tsx","components/instruction/stake/WithdrawDetailsCard.tsx","components/instruction/stake/DeactivateDetailsCard.tsx","components/instruction/stake/types.ts","components/instruction/stake/MergeDetailsCard.tsx","components/instruction/stake/StakeDetailsCard.tsx","components/instruction/system/TransferDetailsCard.tsx","components/instruction/system/AllocateDetailsCard.tsx","components/instruction/system/AllocateWithSeedDetailsCard.tsx","components/instruction/system/AssignDetailsCard.tsx","components/instruction/system/AssignWithSeedDetailsCard.tsx","components/instruction/system/CreateDetailsCard.tsx","components/instruction/system/CreateWithSeedDetailsCard.tsx","components/instruction/system/NonceInitializeDetailsCard.tsx","components/instruction/system/NonceAdvanceDetailsCard.tsx","components/instruction/system/NonceWithdrawDetailsCard.tsx","components/instruction/system/NonceAuthorizeDetailsCard.tsx","components/instruction/system/TransferWithSeedDetailsCard.tsx","components/instruction/system/types.ts","components/instruction/system/SystemDetailsCard.tsx","components/instruction/token/types.ts","components/instruction/token/TokenDetailsCard.tsx","components/instruction/TokenLendingDetailsCard.tsx","components/instruction/TokenSwapDetailsCard.tsx","components/instruction/wormhole/types.ts","components/instruction/WormholeDetailsCard.tsx","components/instruction/bonfida-bot/CancelOrderDetails.tsx","components/instruction/bonfida-bot/CollectFeesDetails.tsx","components/instruction/bonfida-bot/CreateBotDetails.tsx","components/instruction/bonfida-bot/DepositDetails.tsx","components/instruction/bonfida-bot/InitializeBotDetails.tsx","components/instruction/bonfida-bot/RedeemDetails.tsx","components/instruction/bonfida-bot/SettleFundsDetails.tsx","components/instruction/bonfida-bot/CreateOrderDetails.tsx","components/instruction/BonfidaBotDetails.tsx","components/instruction/bpf-upgradeable-loader/types.ts","components/instruction/bpf-upgradeable-loader/BpfUpgradeableLoaderDetailsCard.tsx","components/instruction/vote/types.ts","components/instruction/vote/VoteDetailsCard.tsx","components/instruction/AssociatedTokenDetailsCard.tsx","components/instruction/mango/types.ts","components/instruction/mango/AddOracleDetailsCard.tsx","components/instruction/mango/AddPerpMarketDetailsCard.tsx","components/instruction/mango/AddSpotMarketDetailsCard.tsx","components/instruction/mango/CancelPerpOrderDetailsCard.tsx","components/instruction/mango/CancelSpotOrderDetailsCard.tsx","components/instruction/mango/ChangePerpMarketParamsDetailsCard.tsx","components/instruction/mango/ConsumeEventsDetailsCard.tsx","components/instruction/mango/GenericMngoAccountDetailsCard.tsx","components/instruction/mango/GenericPerpMngoDetailsCard.tsx","components/instruction/mango/GenericSpotMngoDetailsCard.tsx","components/instruction/mango/PlacePerpOrderDetailsCard.tsx","components/instruction/mango/PlaceSpotOrderDetailsCard.tsx","components/instruction/MangoDetails.tsx","components/transaction/InstructionsSection.tsx","components/transaction/ProgramLogSection.tsx","pages/TransactionDetailsPage.tsx","utils/instruction.ts","components/account/TokenHistoryCard.tsx","providers/mints/largest.tsx","components/account/TokenLargestAccountsCard.tsx","components/common/Account.tsx","components/account/VoteAccountSection.tsx","components/account/NonceAccountSection.tsx","components/account/VotesCard.tsx","components/account/SysvarAccountSection.tsx","components/account/SlotHashesCard.tsx","components/account/StakeHistoryCard.tsx","components/account/BlockhashesCard.tsx","components/account/ConfigAccountSection.tsx","components/common/VerifiedBadge.tsx","utils/program-verification.tsx","components/account/UpgradeableLoaderAccountSection.tsx","components/account/HistoryCardComponents.tsx","components/account/history/TransactionHistoryCard.tsx","components/account/history/common.tsx","components/account/history/TokenTransfersCard.tsx","components/account/history/TokenInstructionsCard.tsx","components/account/RewardsCard.tsx","components/account/MetaplexMetadataCard.tsx","components/common/NFTArt.tsx","img/logos-solana/dark-solana-logo.svg","components/account/MetaplexNFTHeader.tsx","utils/name-service.tsx","components/account/DomainsCard.tsx","pages/AccountDetailsPage.tsx","pages/inspector/SignaturesCard.tsx","pages/inspector/AddressWithContext.tsx","pages/inspector/AccountsCard.tsx","pages/inspector/RawInputCard.tsx","pages/inspector/InstructionsSection.tsx","pages/inspector/InspectorPage.tsx","providers/stats/solanaDashboardInfo.tsx","providers/stats/solanaPerformanceInfo.tsx","providers/stats/solanaClusterStats.tsx","components/TpsCard.tsx","providers/supply.tsx","providers/accounts/vote-accounts.tsx","components/common/TimestampToggle.tsx","pages/ClusterStatsPage.tsx","providers/richList.tsx","components/TopAccountsCard.tsx","components/SupplyCard.tsx","pages/SupplyPage.tsx","components/block/BlockHistoryCard.tsx","components/block/BlockRewardsCard.tsx","components/block/BlockProgramsCard.tsx","components/block/BlockAccountsCard.tsx","components/block/BlockOverviewCard.tsx","pages/BlockDetailsPage.tsx","providers/epoch.tsx","pages/EpochDetailsPage.tsx","App.tsx","providers/stats/index.tsx","providers/mints/index.tsx","amman/consts.ts","amman/queries.ts","index.tsx"],"names":["ClusterStatus","Cluster","CLUSTERS","MainnetBeta","Testnet","Devnet","Custom","clusterSlug","cluster","clusterName","clusterApiUrl","TESTNET_URL","DEVNET_URL","clusterUrl","customUrl","replace","DEFAULT_CLUSTER","clusterReducer","state","action","status","Connected","Failure","Connecting","ModalContext","React","createContext","undefined","StateContext","DispatchContext","ClusterProvider","children","useReducer","dispatch","useState","showModal","setShowModal","query","useQuery","get","parseQuery","enableCustomUrl","localStorageIsAvailable","localStorage","getItem","history","useHistory","location","useLocation","useEffect","has","delete","push","search","toString","updateCluster","Provider","value","a","URL","connection","Connection","Promise","all","getFirstAvailableBlock","getEpochSchedule","getEpochInfo","getGenesisHash","firstAvailableBlock","epochSchedule","epochInfo","genesisHash","clusterInfo","reportError","useUpdateCustomUrl","useContext","Error","useCluster","context","url","name","useClusterModal","ProgramLogsCardBody","message","logs","instructions","map","ix","index","programId","programAccount","accountKeys","programIdIndex","pubkey","programName","programLabel","toBase58","programLogs","badgeColor","failed","className","log","key","prefix","style","text","instructionErrorMessage","Map","getInstructionError","error","out","prettyProgramLogs","prettyError","depth","prettyLogs","prefixBuilder","Array","fill","join","innerError","getTransactionInstructionError","forEach","startsWith","length","matches","matchAll","programAddress","includes","instructionLog","slice","indexOf","failedIx","assertUnreachable","x","normalizeTokenAmount","raw","decimals","parseInt","Math","pow","lamportsToSol","lamports","abs","signMultiplier","isNeg","lamportsString","padStart","splitIndex","solString","parseFloat","lamportsToSolString","maximumFractionDigits","sol","Intl","NumberFormat","format","SolBalance","HUMANIZER","HumanizeDuration","HumanizeDurationLanguage","slotsToHumanString","slots","slotTime","humanize","wrap","input","result","substr","test","setItem","removeItem","e","camelToTitleCase","str","charAt","toUpperCase","abbreviatedNumber","fixed","toFixed","setOptions","language","spacer","delimiter","round","units","largest","addLanguage","y","mo","w","d","h","m","s","ms","decimal","pubkeyToString","getLast","arr","err","tags","console","knownLabels","TableCardBody","Downloadable","data","filename","handleClick","blob","Blob","Buffer","from","fileDownloadUrl","createObjectURL","tempLink","document","createElement","href","setAttribute","click","onClick","DEFAULT_SIGNATURE","bs58","encode","alloc","SimulatorCard","simulating","setSimulating","setLogs","setError","simulate","useCallback","tx","Transaction","populate","header","numRequiredSignatures","simulateTransaction","resp","simulationLogs","simulationError","useSimulator","URLSearchParams","clusterPath","pathname","params","newParams","urlParams","set","pickClusterParams","MARKET_REGISTRY","PROGRAM_NAMES","SerumMarketRegistry","address","ALL_CLUSTERS","LIVE_CLUSTERS","MAINNET_ONLY","PROGRAM_DEPLOYMENTS","ADDRESS_MAP","CONFIG","STAKE","SYSTEM","VOTE","SECP256K1","ED25519","ASSOCIATED_TOKEN","FEATURE_PROPOSAL","LENDING","MEMO","MEMO_2","NAME","STAKE_POOL","SWAP","TOKEN","TOKEN_METADATA","TOKEN_VAULT","ACUMEN","BONFIDA_POOL","BREAK_SOLANA","MANGO_GOVERNANCE","MANGO_ICO","MANGO_1","MANGO_2","MANGO_3","MARINADE","MERCURIAL","METAPLEX","NFT_AUCTION","NFT_CANDY_MACHINE","ORCA_SWAP_1","ORCA_SWAP_2","ORCA_AQUAFARM","PORT","PYTH","QUARRY_MERGE_MINE","QUARRY_MINE","QUARRY_MINT_WRAPPER","QUARRY_REDEEMER","QUARRY_REGISTRY","RAYDIUM_AMM","RAYDIUM_IDO","RAYDIUM_LP_1","RAYDIUM_LP_2","RAYDIUM_STAKING","SABER_ROUTER","SABER_SWAP","SERUM_1","SERUM_2","SERUM_3","SERUM_SWAP","SOLEND","SOLIDO","STEP_SWAP","SWITCHBOARD","WORMHOLE","PROGRAM_NAME_BY_ID","AddressMap111111111111111111111111111111111","Config1111111111111111111111111111111111111","StakeProgram","SystemProgram","VOTE_PROGRAM_ID","Secp256k1Program","Ed25519Program","LOADER_IDS","MoveLdr111111111111111111111111111111111111","NativeLoader1111111111111111111111111111111","BPF_LOADER_DEPRECATED_PROGRAM_ID","BPF_LOADER_PROGRAM_ID","SPECIAL_IDS","Sysvar1111111111111111111111111111111111111","SYSVAR_IDS","SYSVAR_CLOCK_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","addressLabel","tokenRegistry","tokenInfo","symbol","tokenLabel","displayAddress","customAddressLabels","intoTransactionInstruction","instruction","keys","accounts","account","accountKey","find","equals","isSigner","signer","isWritable","writable","TransactionInstruction","decode","this","ConnectedAmmanClient","_instance","t","msgRx","Overlay","show","ClusterModal","setShow","onClose","showDeveloperSettings","stopPropagation","ClusterToggle","type","defaultChecked","id","onChange","target","checked","htmlFor","CustomClusterInput","activeSuffix","active","updateCustomUrl","editing","setEditing","btnClass","onUrlInput","useDebounceCallback","inputTextClass","to","defaultValue","onFocus","onBlur","onInput","currentTarget","net","slug","displayTimestamp","unixTimestamp","shortTimeZoneName","expireDate","Date","dateString","DateTimeFormat","year","month","day","timeString","hour","minute","second","hourCycle","timeZoneName","displayTimestampUtc","timeZone","displayTimestampWithoutDate","announcements","MessageBanner","announcement","timeframe","start","end","estimate","now","getTime","ClusterStatusBanner","Button","ClusterStatusButton","statusName","btnClasses","variant","role","Navbar","collapse","setCollapse","logo","src","width","alt","exact","TokenRegistryContext","TokenRegistryProvider","setTokenRegistry","TokenListProvider","resolve","Strategy","Solana","then","tokens","tokenList","filterByClusterSlug","getList","reduce","item","useTokenRegistry","TransactionsMonitor","initialSignatures","onTransactionsChanged","maxTransactions","latestTransactions","transactionCount","onLog","ctx","txsBefore","signature","block","slot","_purgeOldSignatures","update","onLogs","addSortedSliceOfSignatures","currentSignatures","sorted","sort","len","max","currentTransactions","reverse","shift","DEFAULT_MAX_TRANSACTIONS","logDebug","debug","UPDATE_ADDRESS_LABELS","AmmanClient","socket","io","connected","connect","on","MSG_UPDATE_ADDRESS_LABELS","labels","emit","MSG_GET_KNOWN_ADDRESS_LABELS","assert","hookAddressLabels","EventEmitter","CustomAddressLabelsMonitor","ammanClient","handleAddressLablesChanged","_labels","onUpdateLabels","Object","entries","requestKnownAddressLabels","TransactionsMonitorContext","TransactionsMonitorProvider","props","transactionInfos","setTransactionInfos","useMemo","instance","signatures","CustomAddressLabelsContext","useCustomAddressLabels","CustomAddressLabelsProvider","addressLabels","setAddressLabels","TransactionsMonitorView","useTransactionsMonitor","label","maxWidth","SearchBar","setSearch","selectRef","useRef","ref","current","options","buildOptions","epoch","noOptionsMessage","placeholder","inputValue","blurInputOnSelect","onMenuClose","blur","meta","styles","pointerEvents","onInputChange","components","DropdownIndicator","classNamePrefix","SEARCHABLE_LOADERS","rawSearch","currentEpoch","trim","programOptions","matchedPrograms","filter","toLowerCase","buildProgramOptions","loaderOptions","matchedLoaders","buildLoaderOptions","sysvarOptions","matchedSysvars","buildSysvarOptions","specialOptions","matchedSpecialIds","buildSpecialOptions","tokenOptions","matchedTokens","details","searchLower","buildTokenOptions","isNaN","Number","decoded","FetchStatus","ActionType","defaultReconciler","entry","defaultReducer","reducer","useCustomReducer","reconciler","customReducer","Clear","Update","combineFetched","fetched","before","findIndex","f","concat","reconcile","transactionMap","foundOldest","HistoryProvider","Cache","fetchParsedTransactions","transactionSignatures","splice","getParsedConfirmedTransactions","parsed","fetchAccountHistory","fetchTransactions","additionalSignatures","Fetching","getConfirmedSignaturesForAddress2","limit","Fetched","FetchFailed","useAccountHistory","useFetchAccountHistory","refresh","existingMap","signatureInfo","getUnfetchedSignatures","oldest","PublicKeyFromString","coerce","PublicKey","string","TokenAccountType","enums","AccountState","TokenAmount","number","uiAmountString","amount","TokenAccountInfo","mint","owner","tokenAmount","delegate","optional","isNative","boolean","rentExemptReserve","delegatedAmount","closeAuthority","MintAccountInfo","mintAuthority","nullable","supply","isInitialized","freezeAuthority","MultisigAccountInfo","numRequiredSigners","numValidSigners","signers","array","TokenAccount","info","any","TokensProvider","TOKEN_PROGRAM_ID","getParsedTokenAccountsByOwner","accountInfo","parsedInfo","create","useAccountOwnedTokens","useFetchAccountOwnedTokens","fetchAccountTokens","ParsedInfo","BigNumFromString","BN","StakeAccountType","StakeMeta","authorized","staker","withdrawer","lockup","custodian","StakeAccountInfo","stake","delegation","voter","activationEpoch","deactivationEpoch","warmupCooldownRate","creditsObserved","StakeAccount","VoteAccountType","AuthorizedVoter","authorizedVoter","PriorVoter","authorizedPubkey","epochOfLastAuthorizedSwitch","targetEpoch","EpochCredits","credits","previousCredits","Vote","confirmationCount","VoteAccountInfo","authorizedVoters","authorizedWithdrawer","commission","epochCredits","lastTimestamp","timestamp","nodePubkey","priorVoters","rootSlot","votes","VoteAccount","NonceAccountType","NonceAccountInfo","authority","blockhash","feeCalculator","lamportsPerSignature","NonceAccount","ClockAccountInfo","leaderScheduleEpoch","SysvarClockAccount","literal","EpochScheduleInfo","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","SysvarEpochScheduleAccount","FeesInfo","SysvarFeesAccount","RecentBlockhashesEntry","RecentBlockhashesInfo","SysvarRecentBlockhashesAccount","RentInfo","lamportsPerByteYear","exemptionThreshold","burnPercent","SysvarRentAccount","RewardsInfo","validatorPointValue","SysvarRewardsAccount","SlotHashEntry","hash","SlotHashesInfo","SysvarSlotHashesAccount","SlotHistoryInfo","nextSlot","bits","SysvarSlotHistoryAccount","StakeHistoryEntryItem","effective","activating","deactivating","StakeHistoryEntry","stakeHistory","StakeHistoryInfo","SysvarStakeHistoryAccount","SysvarAccount","union","StakeConfigInfo","slashPenalty","ConfigKey","ValidatorInfoConfigData","record","ValidatorInfoConfigInfo","configData","ValidatorInfoAccount","StakeConfigInfoAccount","ConfigAccount","FlaggedContext","FlaggedAccountsProvider","flaggedAccounts","setFlaggedAccounts","fetch","res","body","split","ProgramAccountInfo","programData","ProgramAccount","ProgramDataAccountInfo","tuple","ProgramDataAccount","ProgramBufferAccountInfo","ProgramBufferAccount","ProgramUninitializedAccountInfo","ProgramUninitializedAccount","UpgradeableLoaderAccount","BlockProvider","getBlock","getBlocks","child","useFetchBlock","fetchBlock","REWARDS_AVAILABLE_EPOCH","rewards","combined","highestFetchedEpoch","lowestFetchedEpoch","RewardsProvider","fetchRewards","fromEpoch","highestEpoch","lowestAvailableEpoch","getInflationReward","requests","i","results","programs","metadata","Metadata","MasterEdition","MetadataKey","getEditionInfo","getEdition","edition","MasterEditionV1","MasterEditionV2","masterEdition","load","parent","AccountsProvider","getParsedAccountInfo","space","program","getStakeActivation","activation","getPDA","editionInfo","getMetaDataJSON","metadataJSON","nftData","json","executable","fetchStatus","reject","uri","processJson","extended","properties","files","image","_","JSON","stringify","catch","ex","useAccountInfo","useMintAccountInfo","useFetchAccountInfo","fetchAccountInfo","Copyable","replaceText","setState","navigator","clipboard","writeText","setTimeout","CopyIcon","title","textColor","PrependCopyIcon","ReplaceWithMessage","Address","alignRight","link","truncate","truncateUnknown","truncateChars","useMetadata","displayLabel","metaplexData","useTokenMetadata","content","setData","pda","Epoch","toLocaleString","MAX_EPOCH","sub","StakeAccountSection","stakeAccount","stakeAccountType","hideDelegation","isFullyInactivated","LockupCard","OverviewCard","DelegationCard","AuthoritiesCard","prettyTimestamp","TYPE_NAMES","uninitialized","initialized","delegated","rewardsPool","displayStatus","activationState","voterPubkey","eq","toNumber","inactive","hasLockup","delegatedStake","inactiveStake","UnknownAccountCard","CoingeckoStatus","CoinGeckoClient","CoinGecko","useCoinGecko","coinId","coinInfo","setCoinInfo","interval","getCoinInfo","Loading","coins","price","market_data","current_price","usd","volume_24","total_volume","market_cap","market_cap_rank","price_change_percentage_24h","last_updated","Success","setInterval","clearInterval","LoadingCard","isMetaplexNFT","mintInfo","getEthAddress","extractEth","match","TokenAccountSection","tokenAccount","NonFungibleTokenMintAccountCard","FungibleTokenMintAccountCard","TokenAccountCard","MultisigAccountCard","tokenPriceInfo","mintAddress","fetchInfo","bridgeContractAddress","extensions","bridgeContract","assetContractAddress","assetContract","coingeckoId","tokenPriceDecimals","minimumFractionDigits","website","rel","maxSupply","updateAuthority","external_url","sellerFeeBasisPoints","unit","balance","BigNumber","toFormat","ErrorCard","retry","retryText","subtext","buttonText","Identicon","innerHTML","appendChild","Jazzicon","OwnedTokensCard","ownedTokens","showDropdown","setDropdown","display","useQueryDisplay","toggle","HoldingsDetailTable","HoldingsSummaryTable","detailsList","showLogos","some","logoURI","tokenDetails","mappedTokens","token","totalByMint","plus","DisplayDropdown","displayOption","buildLocation","Signature","signatureLabel","signatureDisplay","Slot","DetailsProvider","getParsedConfirmedTransaction","transaction","useFetchTransactionDetails","fetchDetails","useTransactionDetails","PROGRAM_IDS","INSTRUCTION_LOOKUP","isTokenSwapInstruction","parseTokenSwapInstructionTitle","code","isTokenLendingInstruction","parseTokenLendingInstructionTitle","SERUM_PROGRAM_IDS","Side","OrderType","SelfTradeBehavior","getOptionalKey","InitializeMarketInstruction","baseLotSize","quoteLotSize","feeRateBps","quoteDustThreshold","vaultSignerNonce","decodeInitializeMarket","decodeInstruction","initializeMarket","market","requestQueue","eventQueue","bids","asks","baseVault","quoteVault","baseMint","quoteMint","openOrdersMarketAuthority","pruneAuthority","crankAuthority","NewOrderInstruction","side","limitPrice","maxQuantity","orderType","clientId","decodeNewOrder","newOrder","openOrders","payer","openOrdersOwner","feeDiscountPubkey","MatchOrdersInstruction","decodeMatchOrders","matchOrders","ConsumeEventsInstruction","decodeConsumeEvents","consumeEvents","k","CancelOrderInstruction","orderId","openOrdersSlot","decodeCancelOrder","cancelOrder","decodeSettleFunds","baseWallet","quoteWallet","vaultSigner","referrerQuoteWallet","CancelOrderByClientIdInstruction","decodeCancelOrderByClientId","cancelOrderByClientId","decodeDisableMarket","disableAuthority","decodeSweepFees","feeSweepingAuthority","quoteFeeReceiver","NewOrderV3Instruction","maxBaseQuantity","maxQuoteQuantity","selfTradeBehavior","decodeNewOrderV3","newOrderV3","CancelOrderV2Instruction","decodeCancelOrderV2","cancelOrderV2","CancelOrderByClientIdV2Instruction","decodeCancelOrderByClientIdV2","cancelOrderByClientIdV2","decodeCloseOpenOrders","rentReceiver","decodeInitOpenOrders","PruneInstruction","decodePrune","prune","ConsumeEventsPermissionedInstruction","decodeConsumeEventsPermissioned","consumeEventsPermissioned","isSerumInstruction","MARKETS","SERUM_CODE_LOOKUP","parseSerumInstructionTitle","readUInt32LE","parseSerumInstructionCode","PublicKeyToString","InitializeBotDecode","poolSeed","maxNumberOfAsset","numberOfMarkets","decodeInitializeBot","Instruction","Init","systemProgramAccount","rentSysvarAccount","splTokenProgramAccount","poolAccount","mintAccount","payerAccount","CreateBotDecode","feeCollectionPeriod","feeRatio","depositAmounts","markets","decodeCreateBot","Create","splTokenProgramId","clockSysvarKey","mintKey","poolKey","targetPoolTokenKey","serumProgramId","signalProviderKey","DepositDecode","poolTokenAmount","decodeDeposit","Deposit","sigProviderFeeReceiverKey","bonfidaFeeReceiverKey","bonfidaBuyAndBurnKey","CreateDecode","ratioOfPoolAssetsToTrade","coinLotSize","pcLotSize","targetMint","decodeCreateOrder","CreateOrder","payerPoolAssetKey","openOrdersKey","serumRequestQueue","serumEventQueue","serumMarketBids","serumMarketAsks","coinVaultKey","pcVaultKey","dexProgramKey","rentProgramId","srmReferrerKey","CancelOrderDecode","CancelOrder","SettleFundsDecode","pcIndex","SettleFunds","poolMintKey","coinPoolAssetKey","pcPoolAssetKey","vaultSignerKey","RedeemDecode","decodeRedeem","Redeem","sourcePoolTokenOwnerKey","sourcePoolTokenKey","CollectFeesDecode","decodeCollectFees","CollectFees","signalProviderPoolTokenKey","bonfidaFeePoolTokenKey","bonfidaBnBPTKey","isBonfidaBotInstruction","BONFIDABOT_PROGRAM_ID","parseBonfidaBotInstructionTitle","RawDetailsProvider","useRawTransactionDetails","getTransaction","response","useFetchRawTransaction","fetchRawTransaction","TransactionsProvider","getSignatureStatus","searchTransactionHistory","confirmations","blockTime","getBlockTime","confirmationStatus","useTransactionStatus","useFetchTransactionStatus","fetchTransactionStatus","Popover","bottom","right","InfoTooltip","justify","onMouseOver","onMouseOut","BalanceDelta","sols","delta","isSol","gt","lt","TokenBalancesCard","preTokenBalances","postTokenBalances","rows","preBalanceMap","accountIndex","uiTokenAmount","preBalance","uiAmount","minus","b","generateTokenBalanceRows","accountRows","HexData","chunks","hexString","divs","spans","color","ROW_SIZE","Content","RawDetails","keyIndex","RawParsedDetails","InstructionCard","defaultRaw","innerCards","childIndex","ixError","isArray","errorIndex","isInteger","ixResult","resultClass","showRaw","setShowRaw","SignatureContext","rawDetails","fetchRaw","disabled","r","colSpan","WriteInfo","bytes","offset","FinalizeInfo","UnknownDetailsCard","BpfLoaderDetailsCard","BpfLoaderWriteDetailsCard","BpfLoaderFinalizeDetailsCard","MemoDetailsCard","NewOrderDetailsCard","MatchOrdersDetailsCard","InitializeMarketDetailsCard","ConsumeEventsDetailsCard","CancelOrderDetailsCard","CancelOrderByClientIdDetailsCard","SettleFundsDetailsCard","DisableMarketDetailsCard","SweepFeesDetailsCard","NewOrderV3DetailsCard","CancelOrderV2DetailsCard","CancelOrderByClientIdV2DetailsCard","CloseOpenOrdersDetailsCard","InitOpenOrdersDetailsCard","PruneDetailsCard","ConsumeEventsPermissionedDetailsCard","SerumDetailsCard","parseSerumInstructionKey","InitializeDetailsCard","DelegateDetailsCard","voteAccount","stakeAuthority","AuthorizeDetailsCard","newAuthority","authorityType","SplitDetailsCard","newSplitAccount","WithdrawDetailsCard","withdrawAuthority","destination","DeactivateDetailsCard","InitializeInfo","DelegateInfo","AuthorizeInfo","SplitInfo","WithdrawInfo","DeactivateInfo","MergeInfo","source","stakeHistorySysvar","clockSysvar","MergeDetailsCard","StakeDetailsCard","TransferDetailsCard","AllocateDetailsCard","AllocateWithSeedDetailsCard","base","seed","AssignDetailsCard","AssignWithSeedDetailsCard","CreateDetailsCard","newAccount","CreateWithSeedDetailsCard","NonceInitializeDetailsCard","nonceAccount","nonceAuthority","NonceAdvanceDetailsCard","NonceWithdrawDetailsCard","NonceAuthorizeDetailsCard","newAuthorized","TransferWithSeedDetailsCard","sourceBase","sourceSeed","sourceOwner","CreateAccountInfo","AssignInfo","TransferInfo","CreateAccountWithSeedInfo","AdvanceNonceInfo","WithdrawNonceInfo","InitializeNonceInfo","AuthorizeNonceInfo","AllocateInfo","AllocateWithSeedInfo","AssignWithSeedInfo","TransferWithSeedInfo","SystemDetailsCard","TokenAmountUi","InitializeMint","rentSysvar","InitializeAccount","InitializeMultisig","multisig","Transfer","multisigAuthority","Approve","multisigOwner","Revoke","AuthorityType","SetAuthority","MintTo","multisigMintAuthority","Burn","CloseAccount","FreezeAccount","multisigFreezeAuthority","ThawAccount","TransferChecked","ApproveChecked","MintToChecked","BurnChecked","TokenInstructionType","IX_STRUCTS","initializeMint","initializeAccount","initializeMultisig","transfer","approve","revoke","setAuthority","mintTo","burn","closeAccount","freezeAccount","thawAccount","transfer2","approve2","mintTo2","burn2","transferChecked","approveChecked","mintToChecked","burnChecked","IX_TITLES","TokenDetailsCard","rawType","created","TokenInstruction","tokenAddress","infoMintAddress","useTokenAccountInfo","attributes","tokenSymbol","every","v","publicKey","tag","labelSuffix","TokenLendingDetailsCard","TokenSwapDetailsCard","WormholeDetailsCard","parsWormholeInstructionTitle","CollectFeesDetailsCard","CreateBotDetailsCard","DepositDetailsCard","InitializeBotDetailsCard","RedeemDetailsCard","CreateOrderDetailsCard","BonfidaBotDetailsCard","InitializeBufferInfo","UpgradeInfo","programDataAccount","bufferAccount","spillAccount","SetAuthorityInfo","DeployWithMaxDataLenInfo","systemProgram","maxDataLen","BpfUpgradeableLoaderDetailsCard","renderDetails","struct","node","VoteInfo","slotHashesSysvar","voteAuthority","vote","UpdateValidatorInfo","newValidatorIdentity","UpdateCommissionInfo","VoteSwitchInfo","VoteDetailsCard","AssociatedTokenDetailsCard","wallet","mangoGroups","Config","ids","groups","group","accountInfoCache","getAccountInfo","accountInfoPromise","findGroupConfig","filtered","mangoProgramId","isMangoInstruction","parseMangoInstructionTitle","decodedInstruction","MangoInstructionLayout","decodePlaceSpotOrder","PlaceSpotOrder","decodeCancelSpotOrder","CancelSpotOrder","decodePlacePerpOrder","PlacePerpOrder","quantity","clientOrderId","reduceOnly","decodeCancelPerpOrder","CancelPerpOrder","invalidIdOk","decodeChangePerpMarketParams","maintLeverageOption","ChangePerpMarketParams","maintLeverage","initLeverageOption","initLeverage","liquidationFeeOption","liquidationFee","makerFeeOption","makerFee","takerFeeOption","takerFee","rateOption","rate","maxDepthBpsOption","maxDepthBps","targetPeriodLengthOption","targetPeriodLength","mngoPerPeriodOption","mngoPerPeriod","decodeAddSpotMarket","marketIndex","AddSpotMarket","optimalUtil","optimalRate","maxRate","decodeAddPerpMarket","AddPerpMarket","getSpotMarketFromInstruction","spotMarket","groupConfig","spotMarketConfigs","spotMarkets","mangoSpotMarket","getSpotMarketFromSpotMarketConfig","mangoSpotMarketConfig","Market","getPerpMarketFromInstruction","perpMarket","perpMarketConfigs","perpMarkets","mangoPerpMarket","getPerpMarketFromPerpMarketConfig","mangoPerpMarketConfig","acc","PerpMarketLayout","PerpMarket","baseDecimals","quoteDecimals","spotMarketFromIndex","spotMarketConfig","AddOracleDetailsCard","AddPerpMarketDetailsCard","moment","duration","AddSpotMarketDetailsCard","CancelPerpOrderDetailsCard","mangoAccount","perpMarketAccountMeta","CancelSpotOrderDetailsCard","spotMarketAccountMeta","ChangePerpMarketParamsDetailsCard","setTargetPeriodLength","liquidityMiningInfo","getTargetPeriodLength","GenericMngoAccountDetailsCard","mangoAccountKeyLocation","GenericPerpMngoDetailsCard","perpMarketKeyLocation","GenericSpotMngoDetailsCard","accountKeyLocation","spotMarketkeyLocation","PlacePerpOrderDetailsCard","orderLotDetails","setOrderLotDetails","baseLotsToNumber","priceLotsToNumber","size","getOrderLotDetails","PlaceSpotOrderDetailsCard","baseSizeLotsToNumber","MangoDetailsCard","InstructionsSection","innerInstructions","INNER_INSTRUCTIONS_START_SLOT","instructionDetails","renderInstructionCard","transactionIx","ProgramLogSection","logMessages","AutoRefresh","TransactionDetailsPage","zeroConfirmationRetries","setZeroConfirmationRetries","autoRefresh","Inactive","BailedOut","Active","retries","StatusCard","DetailsSection","clusterStatus","intervalHandle","fee","recentBlockhash","isNonce","SystemInstruction","decodeInstructionType","statusClass","statusText","renderResult","AccountsCard","pre","preBalances","post","postBalances","InstructionContainer","parsedTransaction","inner","getTokenProgramInstructionName","getTokenInstructionName","transactionInstruction","TokenHistoryCard","TokenHistoryTable","accountHistories","useAccountHistories","transactionDetailsCache","useTransactionDetailsCache","filteredTokens","fetchHistories","allFoundOldest","allFetchedSome","oldestSlot","earliest","fetching","sigSet","Set","mintAndTxs","flatMap","add","TokenTransactionRow","FilterDropdown","filterOptions","nameLookup","formatTokenName","filterOption","memo","tokenInstructionNames","instructionType","InstructionDetails","expanded","setExpanded","instructionTypes","preventDefault","LargestAccountsProvider","getTokenLargestAccounts","createParsedAccountInfo","useFetchTokenLargestAccounts","fetchLargestAccounts","parsedData","TokenLargestAccountsCard","largestAccounts","useTokenLargestTokens","refreshLargest","unitLabel","balanceFixedPoint","prev","decimalIndex","supplyTotal","renderAccountRow","percent","uiAmountPercent","times","dividedBy","AccountHeader","AccountAddressRow","AccountBalanceRow","VoteAccountSection","NonceAccountSection","VotesCard","SysvarAccountSection","sysvarAccount","SysvarAccountClockCard","SysvarAccountRentCard","SysvarAccountRewardsCard","SysvarAccountEpochScheduleCard","SysvarAccountFeesCard","SysvarAccountRecentBlockhashesCard","SysvarAccountSlotHashes","SysvarAccountSlotHistory","SysvarAccountStakeHistory","val","validatorPointValueFormatted","maximumSignificantDigits","SlotHashesCard","slotHashes","StakeHistoryCard","BlockhashesCard","blockhashes","MAX_SLASH_PENALTY","ConfigAccountSection","configAccount","StakeConfigCard","ValidatorInfoCard","warmupCooldownFormatted","slashPenaltyFormatted","keybaseUsername","VerifiedBadge","verifiableBuild","deploySlot","verified_slot","CheckingBadge","useVerifiableBuilds","loading","setLoading","defaultAnchorBuild","setVerifiableBuild","getAnchorVerifiableBuild","finally","useAnchorVerifiableBuild","verifiableBuilds","latestBuildsResp","latestBuilds","aborted","verified","UpgradeableLoaderAccountSection","UpgradeableProgramSection","UpgradeableProgramDataSection","UpgradeableProgramBufferSection","programBuffer","LastVerifiedBuildLabel","HistoryCardHeader","HistoryCardFooter","loadMore","getTransactionRows","transactions","transactionRows","slotTransactions","slotTransaction","TransactionHistoryCard","hasTimestamps","element","date","fromNow","extractMintDetails","mintMap","TokenTransfersCard","mintDetails","detailedHistoryMap","transfers","getTransfer","sourceKey","destinationKey","amountString","TokenInstructionsCard","isRelevantInstruction","instructionName","RewardsCard","useRewards","useFetchRewards","rewardsList","reward","effectiveSlot","postBalance","rewardsFound","MetaplexMetadataCard","theme","padding","ArtFetchStatus","LoadingPlaceholder","viewBox","height","backgroundColor","cx","cy","ErrorPlaceHolder","ErrorLogo","ViewOriginalArtContentLink","CachedImageContent","isLoading","setIsLoading","showError","setShowError","timeout","cachedBlob","useCachedImage","maxHeight","onLoad","onError","VideoArtContent","animationURL","playerApi","setPlayerApi","playerRef","currentTime","likelyVideo","streamRef","loop","controls","borderRadius","videoDimensions","videoWidth","videoHeight","autoplay","muted","playsInline","autoPlay","controlsList","poster","HTMLContent","animationUrl","htmlURL","allow","sandbox","frameBorder","ArtContent","category","animation_url","animationUrlExt","alignItems","justifyContent","cachedImages","setCachedBlob","ReadyToFetch","setFetchStatus","cache","blobURI","FetchSucceeded","NFTHeader","isMutable","getEditionPill","getSaleTypePill","primarySaleHappened","getCreatorDropdownItems","creators","CreatorHeader","getVerifiedIcon","isVerified","CreatorEntry","creator","share","listOfCreators","hasPrimarySaleHappened","PROGRAM_ID","getDomainKey","nameClass","nameParent","getHashedName","hashedDomainName","getNameAccountKey","nameKey","findOwnedNameAccountsForUser","userAccount","filters","memcmp","getFilteredProgramAccounts","NAME_PROGRAM_ID","performReverseLookup","nameAccounts","findProgramAddress","toBuffer","centralState","reverseLookupAccounts","NameRegistryState","retrieveBatch","names","nameLength","class","DomainsCard","setResult","domains","localeCompare","useUserDomains","domain","RenderDomainRow","domainInfo","TABS_LOOKUP","path","TOKEN_TABS_HIDDEN","AccountDetailsPage","tab","fetchAccount","DetailsSections","isToken","useFlaggedAccounts","tabs","programTypeKey","getTabs","moreTab","InfoSection","MoreSection","TransactionSignatures","rawMessage","signatureRows","toBytes","rawSignature","nacl","detached","verify","verifySignature","SignatureRow","programValidator","AddressWithContext","validator","AccountInfo","errorMessage","ownerAddress","ownerLabel","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","validMessage","readOnly","AccountRow","MAX_TRANSACTION_SIGNATURES","floor","RawInput","setTransactionData","rawTransactionInput","setRows","base64","buffer","min","Uint8Array","atob","c","charCodeAt","signaturesLen","base58","Message","deserializeTransaction","serialize","isAccountWritable","decodeParam","param","decodeURIComponent","decodeUrlParams","messageParam","signaturesParam","refreshUrl","parse","validSignatures","decodeSignatures","TransactionInspectorPage","setTransaction","paramString","setParamString","shouldRefreshUrl","encodeURIComponent","btoa","String","fromCharCode","apply","newParam","reset","PermalinkView","LoadedView","onClear","fetchTransaction","DashboardInfoActionType","PerformanceInfoActionType","DEFAULT_FEES","feeLamports","feePayerValidator","PACKET_DATA_SIZE","dashboardInfoReducer","SetLastBlockTime","lastBlockTime","SetPerfSamples","samples","sample","numSlots","samplePeriodSecs","samplesInHour","avgSlotTime_1h","sum","cur","absoluteSlot","ClusterStatsStatus","Ready","avgSlotTime_1min","SetEpochInfo","SetError","Reset","performanceInfoReducer","short","numTransactions","avgTps","medium","downsampleByFactor","long","perfHistory","historyMaxTps","SetTransactionCount","series","factor","num","downsampledIndex","mean","differential","n","initialPerformanceInfo","initialDashboardInfo","blockHeight","slotIndex","slotsInEpoch","StatsProviderContext","DashboardContext","PerformanceContext","SolanaClusterStatsProvider","setActive","dashboardInfo","dispatchDashboardInfo","performanceInfo","dispatchPerformanceInfo","resetData","getConnection","lastSlot","getPerformanceSamples","getRecentPerformanceSamples","getTransactionCount","performanceInterval","transactionCountInterval","epochInfoInterval","blockTimeInterval","setTimedOut","useStatsProvider","usePerformanceInfo","TpsCard","TpsCardBody","StatsNotReady","TpsBarChart","Status","SERIES","SERIES_INFO","CUSTOM_TOOLTIP","tooltipModel","tooltipEl","getElementById","opacity","dataPoints","tooltipContent","querySelector","innerHtml","position","_chart","canvas","getBoundingClientRect","left","window","pageXOffset","caretX","top","pageYOffset","caretY","setSeries","averageTps","AnimatedTransactionCount","seriesData","chartOptions","tooltips","intersect","enabled","custom","legend","scales","xAxes","ticks","gridLines","yAxes","stepSize","fontSize","fontColor","beginAtZero","suggestedMax","animation","hover","animationDuration","responsiveAnimationDuration","CHART_OPTIONS","seriesLength","chartData","datasets","hoverBackgroundColor","borderWidth","classNames","txCountRef","countUp","period","lastUpdate","txCount","elapsedPeriods","countUpEnd","PERF_UPDATE_SEC","delay","useEasing","preserveValue","separator","SupplyProvider","Idle","Disconnected","getSupply","excludeNonCirculatingAccountsList","useSupply","useFetchSupply","setVoteAccounts","getVoteAccounts","useVoteAccounts","voteAccounts","fetchVoteAccounts","Tooltip","TimestampToggle","isTimestampTypeUtc","toggleTimestampType","showTooltip","toggleTooltip","cursor","ClusterStatsPage","StakingComponent","StatsCardBody","fetchSupply","fetchData","delinquentStake","delinquent","activatedStake","activeStake","delinquentStakePercentage","solanaInfo","circulatingPercentage","circulating","total","displayLamports","useDashboardInfo","hourlySlotTime","averageSlotTime","epochProgress","epochTimeRemaining","timedOut","clearTimeout","RichListProvider","getLargestAccounts","nonCirculating","TopAccountsCard","supplyCount","richList","useRichList","fetchRichList","useFetchRichList","useQueryFilter","filterTitle","SupplyCard","renderHeader","SupplyPage","BlockHistoryCard","numDisplayed","setNumDisplayed","invokedPrograms","programIndexes","indexMap","programIndex","count","invocations","programTransactionCount","filteredTransactions","ALL_TRANSACTIONS","totalTransactionCount","displayed","currentFilterOption","placeholderRegistry","BlockRewardsCard","rewardsDisplayed","setRewardsDisplayed","percentChange","rewardType","BlockProgramsCard","totalTransactions","txSuccesses","txFrequency","ixFrequency","totalInstructions","programUsed","trackProgram","frequency","innerIx","successful","programEntries","txFreq","ixFreq","successes","BlockAccountsCard","accountStats","statsMap","txSet","stats","reads","writes","accountEntries","aCount","bCount","BlockOverviewCard","confirmedBlock","useBlock","committedTxs","getEpoch","parentSlot","previousBlockhash","TABS","BlockDetailsPage","slotNumber","output","EpochProvider","firstSlot","getFirstSlotInEpoch","getLastSlotInEpoch","firstBlocks","lastBlocks","pop","firstBlock","lastBlock","firstTimestamp","useFetchEpoch","fetchEpoch","EpochDetailsPage","EpochOverviewCard","epochState","useEpoch","ADDRESS_ALIASES","TX_ALIASES","App","render","StatsProvider","MintsProvider","LOCALHOST","voteRx","BlockAgent","firstBlockId","blockIds","getBlockIds","blockSignatures","getBlockSignatures","allSigs","blockHash","previousBlockHash","createBlockAgent","getLatestTransactionSignatures","latestTransactionSignatures","verifyLocalCluster","getClusterNodes","clusterNodes","initAmmanClient","AMMAN_RELAY_PORT","setInstance","ReactDOM","currentTransactionSignatures","main"],"mappings":"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","file":"static/js/main.77132325.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  clusterApiUrl,\n  Connection,\n  EpochInfo,\n  EpochSchedule,\n} from \"@solana/web3.js\";\nimport { useQuery } from \"../utils/url\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { reportError } from \"utils/sentry\";\nimport { localStorageIsAvailable } from \"utils\";\n\nexport enum ClusterStatus {\n  Connected,\n  Connecting,\n  Failure,\n}\n\nexport enum Cluster {\n  MainnetBeta,\n  Testnet,\n  Devnet,\n  Custom,\n}\n\nexport const CLUSTERS = [\n  Cluster.MainnetBeta,\n  Cluster.Testnet,\n  Cluster.Devnet,\n  Cluster.Custom,\n];\n\nexport function clusterSlug(cluster: Cluster): string {\n  switch (cluster) {\n    case Cluster.MainnetBeta:\n      return \"mainnet-beta\";\n    case Cluster.Testnet:\n      return \"testnet\";\n    case Cluster.Devnet:\n      return \"devnet\";\n    case Cluster.Custom:\n      return \"custom\";\n  }\n}\n\nexport function clusterName(cluster: Cluster): string {\n  switch (cluster) {\n    case Cluster.MainnetBeta:\n      return \"Mainnet Beta\";\n    case Cluster.Testnet:\n      return \"Testnet\";\n    case Cluster.Devnet:\n      return \"Devnet\";\n    case Cluster.Custom:\n      return \"Custom\";\n  }\n}\n\nexport const MAINNET_BETA_URL = clusterApiUrl(\"mainnet-beta\");\nexport const TESTNET_URL = clusterApiUrl(\"testnet\");\nexport const DEVNET_URL = clusterApiUrl(\"devnet\");\n\nexport function clusterUrl(cluster: Cluster, customUrl: string): string {\n  switch (cluster) {\n    case Cluster.Devnet:\n      return DEVNET_URL.replace(\"api\", \"explorer-api\");\n    case Cluster.MainnetBeta:\n      return \"http://localhost:8899\"; // MAINNET_BETA_URL.replace(\"api\", \"explorer-api\");\n    case Cluster.Testnet:\n      return TESTNET_URL.replace(\"api\", \"explorer-api\");\n    case Cluster.Custom:\n      return customUrl;\n  }\n}\n\nexport const DEFAULT_CLUSTER = Cluster.MainnetBeta;\nconst DEFAULT_CUSTOM_URL = \"http://localhost:8899\";\n\ntype Action = State;\ninterface State {\n  cluster: Cluster;\n  customUrl: string;\n  clusterInfo?: ClusterInfo;\n  status: ClusterStatus;\n}\n\ninterface ClusterInfo {\n  firstAvailableBlock: number;\n  epochSchedule: EpochSchedule;\n  epochInfo: EpochInfo;\n  genesisHash: string;\n}\n\ntype Dispatch = (action: Action) => void;\n\nfunction clusterReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ClusterStatus.Connected:\n    case ClusterStatus.Failure: {\n      if (\n        state.cluster !== action.cluster ||\n        state.customUrl !== action.customUrl\n      )\n        return state;\n      return action;\n    }\n    case ClusterStatus.Connecting: {\n      return action;\n    }\n  }\n}\n\nfunction parseQuery(query: URLSearchParams): Cluster {\n  const clusterParam = query.get(\"cluster\");\n  switch (clusterParam) {\n    case \"custom\":\n      return Cluster.Custom;\n    case \"devnet\":\n      return Cluster.Devnet;\n    case \"testnet\":\n      return Cluster.Testnet;\n    case \"mainnet-beta\":\n    default:\n      return Cluster.MainnetBeta;\n  }\n}\n\ntype SetShowModal = React.Dispatch<React.SetStateAction<boolean>>;\nconst ModalContext = React.createContext<[boolean, SetShowModal] | undefined>(\n  undefined\n);\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ClusterProviderProps = { children: React.ReactNode };\nexport function ClusterProvider({ children }: ClusterProviderProps) {\n  const [state, dispatch] = React.useReducer(clusterReducer, {\n    cluster: DEFAULT_CLUSTER,\n    customUrl: DEFAULT_CUSTOM_URL,\n    status: ClusterStatus.Connecting,\n  });\n  const [showModal, setShowModal] = React.useState(false);\n  const query = useQuery();\n  const cluster = parseQuery(query);\n  const enableCustomUrl =\n    localStorageIsAvailable() &&\n    localStorage.getItem(\"enableCustomUrl\") !== null;\n  const customUrl =\n    (enableCustomUrl && query.get(\"customUrl\")) || state.customUrl;\n  const history = useHistory();\n  const location = useLocation();\n\n  // Remove customUrl param if dev setting is disabled\n  React.useEffect(() => {\n    if (!enableCustomUrl && query.has(\"customUrl\")) {\n      query.delete(\"customUrl\");\n      history.push({ ...location, search: query.toString() });\n    }\n  }, [enableCustomUrl]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Reconnect to cluster when params change\n  React.useEffect(() => {\n    updateCluster(dispatch, cluster, customUrl);\n  }, [cluster, customUrl]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <ModalContext.Provider value={[showModal, setShowModal]}>\n          {children}\n        </ModalContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function updateCluster(\n  dispatch: Dispatch,\n  cluster: Cluster,\n  customUrl: string\n) {\n  dispatch({\n    status: ClusterStatus.Connecting,\n    cluster,\n    customUrl,\n  });\n\n  try {\n    // validate url\n    new URL(customUrl);\n\n    const connection = new Connection(clusterUrl(cluster, customUrl));\n    const [firstAvailableBlock, epochSchedule, epochInfo, genesisHash] =\n      await Promise.all([\n        connection.getFirstAvailableBlock(),\n        connection.getEpochSchedule(),\n        connection.getEpochInfo(),\n        connection.getGenesisHash(),\n      ]);\n\n    dispatch({\n      status: ClusterStatus.Connected,\n      cluster,\n      customUrl,\n      clusterInfo: {\n        firstAvailableBlock,\n        genesisHash,\n        epochSchedule,\n        epochInfo,\n      },\n    });\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { clusterUrl: clusterUrl(cluster, customUrl) });\n    }\n    dispatch({\n      status: ClusterStatus.Failure,\n      cluster,\n      customUrl,\n    });\n  }\n}\n\nexport function useUpdateCustomUrl() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useUpdateCustomUrl must be used within a ClusterProvider`);\n  }\n\n  return (customUrl: string) => {\n    updateCluster(dispatch, Cluster.Custom, customUrl);\n  };\n}\n\nexport function useCluster() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useCluster must be used within a ClusterProvider`);\n  }\n  return {\n    ...context,\n    url: clusterUrl(context.cluster, context.customUrl),\n    name: clusterName(context.cluster),\n  };\n}\n\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ClusterProvider`);\n  }\n  return context;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LOCALHOST = exports.tmpLedgerDir = exports.airdrop = void 0;\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"airdrop\", { enumerable: true, get: function () { return utils_1.airdrop; } });\nObject.defineProperty(exports, \"tmpLedgerDir\", { enumerable: true, get: function () { return utils_1.tmpLedgerDir; } });\nObject.defineProperty(exports, \"LOCALHOST\", { enumerable: true, get: function () { return utils_1.LOCALHOST; } });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./asserts\"), exports);\n__exportStar(require(\"./diagnostics\"), exports);\n__exportStar(require(\"./relay/consts\"), exports);\n__exportStar(require(\"./transactions\"), exports);\n//# sourceMappingURL=amman.js.map","import React from \"react\";\nimport { Message, ParsedMessage } from \"@solana/web3.js\";\nimport { Cluster } from \"providers/cluster\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { programLabel } from \"utils/tx\";\nimport { InstructionLogs } from \"utils/program-logs\";\n\nexport function ProgramLogsCardBody({\n  message,\n  logs,\n  cluster,\n}: {\n  message: Message | ParsedMessage;\n  logs: InstructionLogs[];\n  cluster: Cluster;\n}) {\n  return (\n    <TableCardBody>\n      {message.instructions.map((ix, index) => {\n        let programId;\n        if (\"programIdIndex\" in ix) {\n          const programAccount = message.accountKeys[ix.programIdIndex];\n          if (\"pubkey\" in programAccount) {\n            programId = programAccount.pubkey;\n          } else {\n            programId = programAccount;\n          }\n        } else {\n          programId = ix.programId;\n        }\n\n        const programName =\n          programLabel(programId.toBase58(), cluster) || \"Unknown Program\";\n        const programLogs: InstructionLogs | undefined = logs[index];\n\n        let badgeColor = \"white\";\n        if (programLogs) {\n          badgeColor = programLogs.failed ? \"warning\" : \"success\";\n        }\n\n        return (\n          <tr key={index}>\n            <td>\n              <div className=\"d-flex align-items-center\">\n                <span className={`badge bg-${badgeColor}-soft me-2`}>\n                  #{index + 1}\n                </span>\n                {programName} Instruction\n              </div>\n              {programLogs && (\n                <div className=\"d-flex align-items-start flex-column font-monospace p-2 font-size-sm\">\n                  {programLogs.logs.map((log, key) => {\n                    return (\n                      <span key={key}>\n                        <span className=\"text-muted\">{log.prefix}</span>\n                        <span className={`text-${log.style}`}>{log.text}</span>\n                      </span>\n                    );\n                  })}\n                </div>\n              )}\n            </td>\n          </tr>\n        );\n      })}\n    </TableCardBody>\n  );\n}\n","import { TransactionError } from \"@solana/web3.js\";\n\nconst instructionErrorMessage: Map<string, string> = new Map([\n  [\"GenericError\", \"generic instruction error\"],\n  [\"InvalidArgument\", \"invalid program argument\"],\n  [\"InvalidInstructionData\", \"invalid instruction data\"],\n  [\"InvalidAccountData\", \"invalid account data for instruction\"],\n  [\"AccountDataTooSmall\", \"account data too small for instruction\"],\n  [\"InsufficientFunds\", \"insufficient funds for instruction\"],\n  [\"IncorrectProgramId\", \"incorrect program id for instruction\"],\n  [\"MissingRequiredSignature\", \"missing required signature for instruction\"],\n  [\n    \"AccountAlreadyInitialized\",\n    \"instruction requires an uninitialized account\",\n  ],\n  [\"UninitializedAccount\", \"instruction requires an initialized account\"],\n  [\n    \"UnbalancedInstruction\",\n    \"sum of account balances before and after instruction do not match\",\n  ],\n  [\"ModifiedProgramId\", \"instruction modified the program id of an account\"],\n  [\n    \"ExternalAccountLamportSpend\",\n    \"instruction spent from the balance of an account it does not own\",\n  ],\n  [\n    \"ExternalAccountDataModified\",\n    \"instruction modified data of an account it does not own\",\n  ],\n  [\n    \"ReadonlyLamportChange\",\n    \"instruction changed the balance of a read-only account\",\n  ],\n  [\"ReadonlyDataModified\", \"instruction modified data of a read-only account\"],\n  [\"DuplicateAccountIndex\", \"instruction contains duplicate accounts\"],\n  [\"ExecutableModified\", \"instruction changed executable bit of an account\"],\n  [\"RentEpochModified\", \"instruction modified rent epoch of an account\"],\n  [\"NotEnoughAccountKeys\", \"insufficient account keys for instruction\"],\n  [\"AccountDataSizeChanged\", \"non-system instruction changed account size\"],\n  [\"AccountNotExecutable\", \"instruction expected an executable account\"],\n  [\n    \"AccountBorrowFailed\",\n    \"instruction tries to borrow reference for an account which is already borrowed\",\n  ],\n  [\n    \"AccountBorrowOutstanding\",\n    \"instruction left account with an outstanding borrowed reference\",\n  ],\n  [\n    \"DuplicateAccountOutOfSync\",\n    \"instruction modifications of multiply-passed account differ\",\n  ],\n  [\"Custom\", \"custom program error: {0}\"],\n  [\"InvalidError\", \"program returned invalid error code\"],\n  [\"ExecutableDataModified\", \"instruction changed executable accounts data\"],\n  [\n    \"ExecutableLamportChange\",\n    \"instruction changed the balance of a executable account\",\n  ],\n  [\"ExecutableAccountNotRentExempt\", \"executable accounts must be rent exempt\"],\n  [\"UnsupportedProgramId\", \"Unsupported program id\"],\n  [\"CallDepth\", \"Cross-program invocation call depth too deep\"],\n  [\"MissingAccount\", \"An account required by the instruction is missing\"],\n  [\n    \"ReentrancyNotAllowed\",\n    \"Cross-program invocation reentrancy not allowed for this instruction\",\n  ],\n  [\n    \"MaxSeedLengthExceeded\",\n    \"Length of the seed is too long for address generation\",\n  ],\n  [\"InvalidSeeds\", \"Provided seeds do not result in a valid address\"],\n  [\"InvalidRealloc\", \"Failed to reallocate account data\"],\n  [\"ComputationalBudgetExceeded\", \"Computational budget exceeded\"],\n  [\n    \"PrivilegeEscalation\",\n    \"Cross-program invocation with unauthorized signer or writable account\",\n  ],\n  [\n    \"ProgramEnvironmentSetupFailure\",\n    \"Failed to create program execution environment\",\n  ],\n  [\"ProgramFailedToComplete\", \"Program failed to complete\"],\n  [\"ProgramFailedToCompile\", \"Program failed to compile\"],\n  [\"Immutable\", \"Account is immutable\"],\n  [\"IncorrectAuthority\", \"Incorrect authority provided\"],\n  [\"BorshIoError\", \"Failed to serialize or deserialize account data: {0}\"],\n  [\n    \"AccountNotRentExempt\",\n    \"An account does not have enough lamports to be rent-exempt\",\n  ],\n  [\"InvalidAccountOwner\", \"Invalid account owner\"],\n  [\"ArithmeticOverflow\", \"Program arithmetic overflowed\"],\n  [\"UnsupportedSysvar\", \"Unsupported sysvar\"],\n  [\"IllegalOwner\", \"Provided owner is not allowed\"],\n]);\n\nexport type ProgramError = {\n  index: number;\n  message: string;\n};\n\nexport function getTransactionInstructionError(\n  error?: TransactionError | null\n): ProgramError | undefined {\n  if (!error) {\n    return;\n  }\n\n  if (typeof error === \"object\" && \"InstructionError\" in error) {\n    const innerError = error[\"InstructionError\"];\n    const index = innerError[0] as number;\n    const instructionError = innerError[1];\n\n    return {\n      index,\n      message: getInstructionError(instructionError),\n    };\n  }\n}\n\nfunction getInstructionError(error: any): string {\n  let out;\n  let value;\n\n  if (typeof error === \"string\") {\n    const message = instructionErrorMessage.get(error);\n    if (message) {\n      return message;\n    }\n  } else if (\"Custom\" in error) {\n    out = instructionErrorMessage.get(\"Custom\");\n    value = error[\"Custom\"];\n  } else if (\"BorshIoError\" in error) {\n    out = instructionErrorMessage.get(\"BorshIoError\");\n    value = error[\"BorshIoError\"];\n  }\n\n  if (out && value) {\n    return out.replace(\"{0}\", value);\n  }\n\n  return \"Unknown instruction error\";\n}\n","import { TransactionError } from \"@solana/web3.js\";\nimport { Cluster } from \"providers/cluster\";\nimport { programLabel } from \"utils/tx\";\nimport { getTransactionInstructionError } from \"utils/program-err\";\n\nexport type LogMessage = {\n  text: string;\n  prefix: string;\n  style: \"muted\" | \"info\" | \"success\" | \"warning\";\n};\n\nexport type InstructionLogs = {\n  logs: LogMessage[];\n  failed: boolean;\n};\n\nexport function prettyProgramLogs(\n  logs: string[],\n  error: TransactionError | null,\n  cluster: Cluster\n): InstructionLogs[] {\n  let depth = 0;\n  let prettyLogs: InstructionLogs[] = [];\n  const prefixBuilder = (depth: number) => {\n    const prefix = new Array(depth - 1).fill(\"\\u00A0\\u00A0\").join(\"\");\n    return prefix + \"> \";\n  };\n\n  let prettyError;\n  if (error) {\n    prettyError = getTransactionInstructionError(error);\n  }\n\n  logs.forEach((log) => {\n    if (log.startsWith(\"Program log:\")) {\n      prettyLogs[prettyLogs.length - 1].logs.push({\n        prefix: prefixBuilder(depth),\n        text: log,\n        style: \"muted\",\n      });\n    } else {\n      const regex = /Program (\\w*) invoke \\[(\\d)\\]/g;\n      const matches = [...log.matchAll(regex)];\n\n      if (matches.length > 0) {\n        const programAddress = matches[0][1];\n        const programName =\n          programLabel(programAddress, cluster) ||\n          `Unknown (${programAddress}) Program`;\n\n        if (depth === 0) {\n          prettyLogs.push({\n            logs: [],\n            failed: false,\n          });\n        } else {\n          prettyLogs[prettyLogs.length - 1].logs.push({\n            prefix: prefixBuilder(depth),\n            style: \"info\",\n            text: `Invoking ${programName}`,\n          });\n        }\n\n        depth++;\n      } else if (log.includes(\"success\")) {\n        prettyLogs[prettyLogs.length - 1].logs.push({\n          prefix: prefixBuilder(depth),\n          style: \"success\",\n          text: `Program returned success`,\n        });\n        depth--;\n      } else if (log.includes(\"failed\")) {\n        const instructionLog = prettyLogs[prettyLogs.length - 1];\n        if (!instructionLog.failed) {\n          instructionLog.failed = true;\n          instructionLog.logs.push({\n            prefix: prefixBuilder(depth),\n            style: \"warning\",\n            text: `Program returned error: ${log.slice(log.indexOf(\": \") + 2)}`,\n          });\n        }\n        depth--;\n      } else {\n        if (depth === 0) {\n          prettyLogs.push({\n            logs: [],\n            failed: false,\n          });\n          depth++;\n        }\n        // system transactions don't start with \"Program log:\"\n        prettyLogs[prettyLogs.length - 1].logs.push({\n          prefix: prefixBuilder(depth),\n          text: log,\n          style: \"muted\",\n        });\n      }\n    }\n  });\n\n  // If the instruction's simulation returned an error without any logs then add an empty log entry for Runtime error\n  // For example BpfUpgradableLoader fails without returning any logs for Upgrade instruction with buffer that doesn't exist\n  if (prettyError && prettyLogs.length === 0) {\n    prettyLogs.push({\n      logs: [],\n      failed: true,\n    });\n  }\n\n  if (prettyError && prettyError.index === prettyLogs.length - 1) {\n    const failedIx = prettyLogs[prettyError.index];\n    failedIx.failed = true;\n    failedIx.logs.push({\n      prefix: prefixBuilder(1),\n      text: `Runtime error: ${prettyError.message}`,\n      style: \"warning\",\n    });\n  }\n\n  return prettyLogs;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MSG_GET_KNOWN_ADDRESS_LABELS = exports.MSG_UPDATE_ADDRESS_LABELS = exports.AMMAN_RELAY_PORT = void 0;\nexports.AMMAN_RELAY_PORT = 50474;\nexports.MSG_UPDATE_ADDRESS_LABELS = 'update:address-labels';\nexports.MSG_GET_KNOWN_ADDRESS_LABELS = 'get:known-address-labels';\n//# sourceMappingURL=consts.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.airdrop = exports.createHash = exports.sleep = exports.tmpLedgerDir = exports.logTrace = exports.logDebug = exports.logInfo = exports.logError = exports.LOCALHOST = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst os_1 = require(\"os\");\nconst path_1 = __importDefault(require(\"path\"));\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\n/**\n * URL at which a locally running solana test validator listens on by default\n * @category utils\n */\nexports.LOCALHOST = 'http://127.0.0.1:8899/';\nexports.logError = (0, debug_1.default)('amman:error');\nexports.logInfo = (0, debug_1.default)('amman:info');\nexports.logDebug = (0, debug_1.default)('amman:debug');\nexports.logTrace = (0, debug_1.default)('amman:trace');\n/**\n * Gets the path to a temporary directory in which to store the test\n * validator ledger.\n *\n * @param testLabel label used to name that directory\n * @category utils\n */\nfunction tmpLedgerDir(testLabel = 'amman-ledger') {\n    return path_1.default.join((0, os_1.tmpdir)(), testLabel);\n}\nexports.tmpLedgerDir = tmpLedgerDir;\n/**\n * @private\n */\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nexports.sleep = sleep;\n/**\n * @private\n */\nfunction createHash(s) {\n    return crypto_1.default.createHash('sha256').update(s).digest('hex');\n}\nexports.createHash = createHash;\n/**\n * Drops the specified amount of tokens to the provided public key.\n *\n * @param connection to solana JSON RPC node\n * @param publicKey to drop sols to\n * @param sol amount of sols to drop\n *\n * @category utils\n */\nasync function airdrop(connection, publicKey, sol = 1) {\n    const sig = await connection.requestAirdrop(publicKey, sol * web3_js_1.LAMPORTS_PER_SOL);\n    const signatureResult = await connection.confirmTransaction(sig);\n    return { signature: sig, signatureResult };\n}\nexports.airdrop = airdrop;\n//# sourceMappingURL=utils.js.map","import BN from \"bn.js\";\nimport {\n  HumanizeDuration,\n  HumanizeDurationLanguage,\n} from \"humanize-duration-ts\";\nimport { PublicKey } from \"@solana/web3.js\";\n\n// Switch to web3 constant when web3 updates superstruct\nexport const LAMPORTS_PER_SOL = 1000000000;\n\nexport const NUM_TICKS_PER_SECOND = 160;\nexport const DEFAULT_TICKS_PER_SLOT = 64;\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nexport function assertUnreachable(x: never): never {\n  throw new Error(\"Unreachable!\");\n}\n\nexport function normalizeTokenAmount(\n  raw: string | number,\n  decimals: number\n): number {\n  let rawTokens: number;\n  if (typeof raw === \"string\") rawTokens = parseInt(raw);\n  else rawTokens = raw;\n  return rawTokens / Math.pow(10, decimals);\n}\n\nexport function lamportsToSol(lamports: number | BN): number {\n  if (typeof lamports === \"number\") {\n    return Math.abs(lamports) / LAMPORTS_PER_SOL;\n  }\n\n  let signMultiplier = 1;\n  if (lamports.isNeg()) {\n    signMultiplier = -1;\n  }\n\n  const absLamports = lamports.abs();\n  const lamportsString = absLamports.toString(10).padStart(10, \"0\");\n  const splitIndex = lamportsString.length - 9;\n  const solString =\n    lamportsString.slice(0, splitIndex) +\n    \".\" +\n    lamportsString.slice(splitIndex);\n  return signMultiplier * parseFloat(solString);\n}\n\nexport function lamportsToSolString(\n  lamports: number | BN,\n  maximumFractionDigits: number = 9\n): string {\n  const sol = lamportsToSol(lamports);\n  return new Intl.NumberFormat(\"en-US\", { maximumFractionDigits }).format(sol);\n}\n\nexport function SolBalance({\n  lamports,\n  maximumFractionDigits = 9,\n}: {\n  lamports: number | BN;\n  maximumFractionDigits?: number;\n}) {\n  return (\n    <span>\n      ◎\n      <span className=\"font-monospace\">\n        {lamportsToSolString(lamports, maximumFractionDigits)}\n      </span>\n    </span>\n  );\n}\n\nconst HUMANIZER = new HumanizeDuration(new HumanizeDurationLanguage());\nHUMANIZER.setOptions({\n  language: \"short\",\n  spacer: \"\",\n  delimiter: \" \",\n  round: true,\n  units: [\"d\", \"h\", \"m\", \"s\"],\n  largest: 3,\n});\nHUMANIZER.addLanguage(\"short\", {\n  y: () => \"y\",\n  mo: () => \"mo\",\n  w: () => \"w\",\n  d: () => \"d\",\n  h: () => \"h\",\n  m: () => \"m\",\n  s: () => \"s\",\n  ms: () => \"ms\",\n  decimal: \".\",\n});\n\nexport function slotsToHumanString(\n  slots: number,\n  slotTime = MS_PER_SLOT\n): string {\n  return HUMANIZER.humanize(slots * slotTime);\n}\n\nexport function wrap(input: string, length: number): string {\n  var result = [];\n  while (input.length) {\n    result.push(input.substr(0, length));\n    input = input.substr(length);\n  }\n  return result.join(\"\\n\");\n}\n\nexport function localStorageIsAvailable() {\n  const test = \"test\";\n  try {\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function camelToTitleCase(str: string): string {\n  const result = str.replace(/([A-Z])/g, \" $1\");\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport function abbreviatedNumber(value: number, fixed = 1) {\n  if (value < 1e3) return value;\n  if (value >= 1e3 && value < 1e6) return +(value / 1e3).toFixed(fixed) + \"K\";\n  if (value >= 1e6 && value < 1e9) return +(value / 1e6).toFixed(fixed) + \"M\";\n  if (value >= 1e9 && value < 1e12) return +(value / 1e9).toFixed(fixed) + \"B\";\n  if (value >= 1e12) return +(value / 1e12).toFixed(fixed) + \"T\";\n}\n\nexport const pubkeyToString = (key: PublicKey | string = \"\") => {\n  return typeof key === \"string\" ? key : key?.toBase58() || \"\";\n};\n\nexport const getLast = (arr: string[]) => {\n  if (arr.length <= 0) {\n    return undefined;\n  }\n\n  return arr[arr.length - 1];\n};\n","type Tags =\n  | {\n      [key: string]: string;\n    }\n  | undefined;\n\nexport function reportError(err: unknown, tags: Tags) {\n  if (err instanceof Error) {\n    console.error(err, err.message, tags);\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddressLabels = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst relay_1 = require(\"../relay\");\nconst assert_1 = require(\"assert\");\nfunction isKeyLike(val) {\n    if (val == null)\n        return false;\n    return (typeof val === 'string' ||\n        typeof val.toBase58 === 'function' ||\n        val.publicKey != null);\n}\nfunction publicKeyString(key) {\n    if (typeof key === 'string') {\n        return key;\n    }\n    if (typeof key.toBase58 === 'function') {\n        return key.toBase58();\n    }\n    if (typeof key.publicKey != null) {\n        return key.publicKey.toBase58();\n    }\n    return key.toString();\n}\n/**\n * Manages address labels in order to improve logging and provide them to tools\n * like the solana explorer.\n *\n * @category diagnostics\n */\nclass AddressLabels {\n    /**\n     * Creates an instance of {@link AddressLabels}.\n     *\n     * @param knownLabels labels known ahead of time, i.e. program ids.\n     * @param logLabel if provided to added labels are logged using this function\n     */\n    constructor(knownLabels, logLabel = (_) => { }, ammanClient = relay_1.ConnectedAmmanClient.getInstance()) {\n        this.knownLabels = knownLabels;\n        this.logLabel = logLabel;\n        this.ammanClient = ammanClient;\n        /**\n         * Adds the provided label for the provided key.\n         */\n        this.addLabel = (label, key) => {\n            const keyString = publicKeyString(key);\n            this.logLabel(`🔑 ${label}: ${keyString}`);\n            this.knownLabels[keyString] = label;\n            this.ammanClient.addAddressLabels({ [keyString]: label });\n        };\n        /**\n         * Adds labels for all {@link KeyLike}s it finds on the provided object\n         */\n        this.addLabels = (obj) => {\n            for (const [label, key] of Object.entries(obj)) {\n                if (typeof label === 'string' && isKeyLike(key)) {\n                    this.addLabel(label, key);\n                }\n            }\n        };\n        /**\n         * Generates a keypair and returns its public key and the keypair itself as a Tuple.\n         *\n         * @param label if provided the key will be added to existing labels\n         * @return [publicKey, keypair ]\n         * @private\n         */\n        this.genKeypair = (label) => {\n            const kp = web3_js_1.Keypair.generate();\n            if (label != null) {\n                this.addLabel(label, kp);\n            }\n            return [kp.publicKey, kp];\n        };\n        /**\n         * Returns a function that allows comparing the provided key with another and\n         * can be used for assertion tools like {@link spok | https://github.com/thlorenz/spok }.\n         */\n        this.isKeyOf = (key) => {\n            const keyString = publicKeyString(key);\n            const label = this.knownLabels[keyString];\n            const fn = (otherKey) => {\n                const otherKeyString = publicKeyString(otherKey);\n                return keyString === otherKeyString;\n            };\n            if (label != null) {\n                fn.$spec = `isKeyOf('${label}')`;\n            }\n            return fn;\n        };\n        if (typeof ammanClient === 'string') {\n            console.error('ADDRESS_LABLES_PATH is deprecated, you do not need to pass it anymore');\n            ammanClient = relay_1.ConnectedAmmanClient.getInstance();\n        }\n        this.ammanClient.addAddressLabels(knownLabels);\n    }\n    /**\n     * Resolves the {@link PublicKey}s for the given signers/keypairs.\n     *\n     * @return resolvedKeys which are labels for known public keys or the public key\n     */\n    resolveKeypairs(pairs) {\n        if (Array.isArray(pairs)) {\n            return pairs.map((x) => {\n                var _a;\n                const keyString = x.publicKey.toBase58();\n                return { label: (_a = this.knownLabels[keyString]) !== null && _a !== void 0 ? _a : '', key: keyString };\n            });\n        }\n        else {\n            return this._findAndResolveKeypairs(pairs);\n        }\n    }\n    /**\n     * Resolves a known label for the provided key or address\n     * @returns label for the address or `undefined` if not found\n     */\n    resolve(keyOrAddress) {\n        const address = publicKeyString(keyOrAddress);\n        return this.knownLabels[address];\n    }\n    /**\n     * Resolves the {@link PublicKey}s for the signers/keypairs it finds on the provided object.\n     *\n     * @return resolvedKeys which are labels for known public keys or the public key\n     */\n    _findAndResolveKeypairs(obj) {\n        const pairs = Object.entries(obj).filter(([key, val]) => typeof key === 'string' && isKeyLike(val));\n        return pairs.map(([key, val]) => {\n            var _a;\n            const keyString = publicKeyString(val);\n            return { label: (_a = this.knownLabels[keyString]) !== null && _a !== void 0 ? _a : key, key: keyString };\n        });\n    }\n    static setInstance(knownLabels, logLabel, ammanClient) {\n        if (AddressLabels._instance != null) {\n            console.error('Can only set AddressLabels instance once');\n            return AddressLabels._instance;\n        }\n        AddressLabels._instance = new AddressLabels(knownLabels, logLabel, ammanClient);\n        return AddressLabels._instance;\n    }\n    static get instance() {\n        (0, assert_1.strict)(AddressLabels._instance != null, 'need to AddressLabels.setInstance first');\n        return AddressLabels._instance;\n    }\n}\nexports.AddressLabels = AddressLabels;\n//# sourceMappingURL=address-labels.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./client\"), exports);\n__exportStar(require(\"./consts\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultSendOptions = void 0;\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./transaction-handler\"), exports);\n/**\n * Default options for sending a transaction\n * @category transactions\n */\nexports.defaultSendOptions = {\n    skipPreflight: false,\n    preflightCommitment: 'confirmed',\n};\n//# sourceMappingURL=index.js.map","import React from \"react\";\n\nexport function TableCardBody({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <tbody className=\"list\">{children}</tbody>\n      </table>\n    </div>\n  );\n}\n","import { ReactNode } from \"react\";\n\nexport function Downloadable({\n  data,\n  filename,\n  children,\n}: {\n  data: string;\n  filename: string;\n  children: ReactNode;\n}) {\n  const handleClick = async () => {\n    const blob = new Blob([Buffer.from(data, \"base64\")]);\n    const fileDownloadUrl = URL.createObjectURL(blob);\n    const tempLink = document.createElement(\"a\");\n    tempLink.href = fileDownloadUrl;\n    tempLink.setAttribute(\"download\", filename);\n    tempLink.click();\n  };\n\n  return (\n    <>\n      <span className=\"fe fe-download c-pointer me-2\" onClick={handleClick} />\n      {children}\n    </>\n  );\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport { Connection, Message, Transaction } from \"@solana/web3.js\";\nimport { useCluster } from \"providers/cluster\";\nimport { InstructionLogs, prettyProgramLogs } from \"utils/program-logs\";\nimport { ProgramLogsCardBody } from \"components/ProgramLogsCardBody\";\n\nconst DEFAULT_SIGNATURE = bs58.encode(Buffer.alloc(64).fill(0));\n\nexport function SimulatorCard({ message }: { message: Message }) {\n  const { cluster } = useCluster();\n  const {\n    simulate,\n    simulating,\n    simulationLogs: logs,\n    simulationError,\n  } = useSimulator(message);\n  if (simulating) {\n    return (\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title\">Transaction Simulation</h3>\n        </div>\n        <div className=\"card-body text-center\">\n          <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n          Simulating\n        </div>\n      </div>\n    );\n  } else if (!logs) {\n    return (\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title\">Transaction Simulation</h3>\n          <button className=\"btn btn-sm d-flex btn-white\" onClick={simulate}>\n            Simulate\n          </button>\n        </div>\n        {simulationError ? (\n          <div className=\"card-body\">\n            Failed to run simulation:\n            <span className=\"text-warning ms-2\">{simulationError}</span>\n          </div>\n        ) : (\n          <div className=\"card-body text-muted\">\n            <ul>\n              <li>\n                Simulation is free and will run this transaction against the\n                latest confirmed ledger state.\n              </li>\n              <li>\n                No state changes will be persisted and all signature checks will\n                be disabled.\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Transaction Simulation</h3>\n        <button className=\"btn btn-sm d-flex btn-white\" onClick={simulate}>\n          Retry\n        </button>\n      </div>\n      <ProgramLogsCardBody message={message} logs={logs} cluster={cluster} />\n    </div>\n  );\n}\n\nfunction useSimulator(message: Message) {\n  const { cluster, url } = useCluster();\n  const [simulating, setSimulating] = React.useState(false);\n  const [logs, setLogs] = React.useState<Array<InstructionLogs> | null>(null);\n  const [error, setError] = React.useState<string>();\n\n  React.useEffect(() => {\n    setLogs(null);\n    setSimulating(false);\n    setError(undefined);\n  }, [url]);\n\n  const onClick = React.useCallback(() => {\n    if (simulating) return;\n    setError(undefined);\n    setSimulating(true);\n\n    const connection = new Connection(url, \"confirmed\");\n    (async () => {\n      try {\n        const tx = Transaction.populate(\n          message,\n          new Array(message.header.numRequiredSignatures).fill(\n            DEFAULT_SIGNATURE\n          )\n        );\n\n        // Simulate without signers to skip signer verification\n        const resp = await connection.simulateTransaction(tx);\n        if (resp.value.logs === null) {\n          throw new Error(\"Expected to receive logs from simulation\");\n        }\n\n        // Prettify logs\n        setLogs(prettyProgramLogs(resp.value.logs, resp.value.err, cluster));\n      } catch (err) {\n        console.error(err);\n        setLogs(null);\n        if (err instanceof Error) {\n          setError(err.message);\n        }\n      } finally {\n        setSimulating(false);\n      }\n    })();\n  }, [cluster, url, message, simulating]);\n  return {\n    simulate: onClick,\n    simulating,\n    simulationLogs: logs,\n    simulationError: error,\n  };\n}\n","import { useLocation } from \"react-router-dom\";\nimport { Location } from \"history\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const clusterPath = (pathname: string, params?: URLSearchParams) => {\n  return (location: Location) => ({\n    ...pickClusterParams(location, params),\n    pathname,\n  });\n};\n\nexport function pickClusterParams(\n  location: Location,\n  newParams?: URLSearchParams\n): Location {\n  const urlParams = new URLSearchParams(location.search);\n  const cluster = urlParams.get(\"cluster\");\n  const customUrl = urlParams.get(\"customUrl\");\n\n  // Pick the params we care about\n  newParams = newParams || new URLSearchParams();\n  if (cluster) newParams.set(\"cluster\", cluster);\n  if (customUrl) newParams.set(\"customUrl\", customUrl);\n\n  return {\n    ...location,\n    search: newParams.toString(),\n  };\n}\n","import { Cluster } from \"providers/cluster\";\n\nconst MARKET_REGISTRY: { [key: string]: string } = {\n  \"7kgkDyW7dmyMeP8KFXzbcUZz1R2WHsovDZ7n3ihZuNDS\": \"Serum: MSRM / USDC\",\n  \"6WpkeqE5oU1MUNPWvMDHhru1G5gjxMgAtib5wXuBSvgm\": \"Serum: MSRM / USDC - Request Queue\",\n  \"DwpUjRHQuotE1LG2R68wZM3nwkv2fChHibcm7NzL8WGq\": \"Serum: MSRM / USDC - Event Queue\",\n  \"7zyPwxjHMJsTdPe7Rd992oe1cVhrZcbkcH9qURzKV8wV\": \"Serum: MSRM / USDC - Order Book (Bids)\",\n  \"4nHe9oNh7JJoJZ1HrktVghB19Cis4N848so7UCWXhF2t\": \"Serum: MSRM / USDC - Order Book (Asks)\",\n  \"8gbnu8XUNmigCSKP43UXbtYYTUHJPRbctyB7Kj1QbTyZ\": \"Serum: MSRM / USDC - Base Asset Vault\",\n  \"8MboeurJ28fQj3n18jBrM7oQSu3coyFbQUpxWnabF3gc\": \"Serum: MSRM / USDC - Quote Currency Vault\",\n  \"GFyDCG3EBVrAWiHKLf7zF2DLqMp89dLHUtsYKwFUe4AC\": \"Serum: MSRM / USDC - Vault Owner\",\n\n  \"H4snTKK9adiU15gP22ErfZYtro3aqR9BTMXiH3AwiUTQ\": \"Serum: MSRM / USDT\",\n  \"3mrit8EKnsy9M8L7EQ24GjNeuwXssVGqDRLZXDarb9Wk\": \"Serum: MSRM / USDT - Request Queue\",\n  \"98qQ1Dintci8xSUAHEJqQukSKnE9g1LQY2jxNwwgcQQu\": \"Serum: MSRM / USDT - Event Queue\",\n  \"83Snk2SJTX8KKMPmi5UX9JYKxy2QWrn2jFC9zH6NmP7L\": \"Serum: MSRM / USDT - Order Book (Bids)\",\n  \"CKjPS8ntVbN7YjGk4Goq24ScaA1qjNFFqQpVuzNkFRo4\": \"Serum: MSRM / USDT - Order Book (Asks)\",\n  \"mKeCpjYQWzptDQn5J5XfSzyoNmsnH9W3RryzUWFe3G7\": \"Serum: MSRM / USDT - Base Asset Vault\",\n  \"9o8XKrbbbA8eXMe72Tsopkk8y7aFF2HQPDMoxdyX4S9b\": \"Serum: MSRM / USDT - Quote Currency Vault\",\n  \"12rqwuEgBYiGhBrDJStCiqEtzQpTTiZbh7teNVLuYcFA\": \"Serum: MSRM / USDT - Vault Owner\",\n\n  \"CAgAeMD7quTdnr6RPa7JySQpjf3irAmefYNdTb6anemq\": \"Serum: BTC / USDC\",\n  \"5PMuDUdk7VFLSYXDo6wHsEfyfWAf1rG4rkdmrmnK4ZME\": \"Serum: BTC / USDC - Request Queue\",\n  \"DrGCgNJAwpihVrRCzd69Ys6k5ggu1qC2FQFjCESnj3Do\": \"Serum: BTC / USDC - Event Queue\",\n  \"6oVGgm4D2fgvv3jcTy3DzUHCbu14J6pe7RYqxHA5FGB1\": \"Serum: BTC / USDC - Order Book (Bids)\",\n  \"AXjn1qHYrAad5nVznXm7Txyp8WmdzJEEi5NM2axSLtnL\": \"Serum: BTC / USDC - Order Book (Asks)\",\n  \"CAiSJtSZfA5usmP9ikPz69nzJLMejbjo7CrGQLwSXR8h\": \"Serum: BTC / USDC - Base Asset Vault\",\n  \"HcEnLVJxG126a68FX6pzw252pL9jUrxkucsbth8hzh9U\": \"Serum: BTC / USDC - Quote Currency Vault\",\n  \"3bYr6BzwMqrrH1N3BGjYeEPRrRxde25zj3Garud4qom3\": \"Serum: BTC / USDC - Vault Owner\",\n\n  \"8AcVjMG2LTbpkjNoyq8RwysokqZunkjy3d5JDzxC6BJa\": \"Serum: BTC / USDT\",\n  \"5r8FfnbNYcQbS1m4CYmoHYGjBtu6bxfo6UJHNRfzPiYH\": \"Serum: BTC / USDT\",\n  \"DoYVFapBvZksM6DqqsWgLrqYQL5JknhnjFcEPb2jCr6D\": \"Serum: BTC / USDT - Request Queue\",\n  \"6iveBLh1CWrE1T4p7AE1tX3DPSpnbPLxCPZ2RxTfeTvT\": \"Serum: BTC / USDT - Event Queue\",\n  \"5N2uRKMNDv22rgV8Cm8VtyTByvKGfdFBTtUToqga3bxR\": \"Serum: BTC / USDT - Order Book (Bids)\",\n  \"7g8U7LqXbMcRyLnU3KhDNJKrq4VTDbvcVTL3Qt1onKJD\": \"Serum: BTC / USDT - Order Book (Asks)\",\n  \"5piQPUuxpGR1HVDA7vMJneH3bcogmXJo7crgNmwaP49D\": \"Serum: BTC / USDT - Base Asset Vault\",\n  \"5Gb6ngdANPa3upkaGbcR9ib55PcsktDhiQcsVr3XCZhj\": \"Serum: BTC / USDT - Quote Currency Vault\",\n  \"4rJea7ape61LD6CredX9Xd5mWpKQiJrcWwencsUe1s5r\": \"Serum: BTC / USDT - Vault Owner\",\n\n  \"ASKiV944nKg1W9vsf7hf3fTsjawK6DwLwrnB2LH9n61c\": \"Serum: ETH / USDC\",\n  \"BWqhtYi9sQgN8wfsJNBkKA5fMmbmctFwjUL1xZSHEEdm\": \"Serum: ETH / USDC - Request Queue\",\n  \"PzjG3J5Lzm2P9BaeHHogxacp1BDMtawvrz88fWuadT4\": \"Serum: ETH / USDC - Event Queue\",\n  \"9HqtE85iR2DFMDduCAZe9DG9ygckE7WgmVmbdvKVj3x1\": \"Serum: ETH / USDC - Order Book (Bids)\",\n  \"tSZM7972KpDL1WV2r9fTwGhaoPWhJ8nMnEzuvhW9b6Y\": \"Serum: ETH / USDC - Order Book (Asks)\",\n  \"HSzt9nNG6MuD1iojc76Ke3eeZ9tN4nnd2NduR3ZccE48\": \"Serum: ETH / USDC - Base Asset Vault\",\n  \"Hmxx3y5EiaaYrC65uoxmsP97TTDs7ffHAi44oiKxTypU\": \"Serum: ETH / USDC - Quote Currency Vault\",\n  \"4PfXQMYgQPZe7Z6SuAFKmRiM2jNMi9XbN2vbMS2BhwSm\": \"Serum: ETH / USDC - Vault Owner\",\n\n  \"HfCZdJ1wfsWKfYP2qyWdXTT5PWAGWFctzFjLH48U1Hsd\": \"Serum: ETH / USDT\",\n  \"71CtEComq2XdhGNbXBuYPmosAjMCPSedcgbNi5jDaGbR\": \"Serum: ETH / USDT\",\n  \"78dUr2kcuvDnsxTb8caFaGeD8GBmreReSLevDEJjVJmf\": \"Serum: ETH / USDT - Request Queue\",\n  \"2GQd5e5z5BvsPyqSVVUs5Qgk8uSPf43MWnKAMfEQRPH7\": \"Serum: ETH / USDT - Event Queue\",\n  \"888UP9HWwY1vaCMpNpP4nzQXgn7hpqomaFwQcV95FkYB\": \"Serum: ETH / USDT - Order Book (Bids)\",\n  \"RCDCybQ7ivCzZPLWQWXNmQo1b6kyAbrkYZStnpJC3Dd\": \"Serum: ETH / USDT - Order Book (Asks)\",\n  \"E67Asz53dn73aw7Eju1UdL72qVGTK4Svv3Bk7BYdmwTa\": \"Serum: ETH / USDT - Base Asset Vault\",\n  \"J9EEc8dgJyygNWwN8xzsMh342hS58JRyuX4mBqKNUyQn\": \"Serum: ETH / USDT - Quote Currency Vault\",\n  \"9UY946SraowE1R97at4qc8NXfJdr75mBLTbjesN4JKb8\": \"Serum: ETH / USDT - Vault Owner\",\n\n  \"68J6nkWToik6oM9rTatKSR5ibVSykAtzftBUEAvpRsys\": \"Serum: SRM / USDC\",\n  \"GPwEA9RMXAk2ovJZke6xczWt9HM9NzAAC5GD8JeTNRfL\": \"Serum: SRM / USDC - Request Queue\",\n  \"2N1a9yuTRePYzjszUHr2qyjhrKdH3UqUosEbW9sRm5Sq\": \"Serum: SRM / USDC - Event Queue\",\n  \"GKiV6ogZunNyk5nhcRZLTmDbXztDynyB674apQgGo5ve\": \"Serum: SRM / USDC - Order Book (Bids)\",\n  \"CASsL5nemAKjD6qCPKXWmfWK1WHQXARVoBUynmTnfgS2\": \"Serum: SRM / USDC - Order Book (Asks)\",\n  \"7pzWoBvBdQkF8SLA2PjYNX2aPddPCSnqQ8LTefvQAaq2\": \"Serum: SRM / USDC - Base Asset Vault\",\n  \"Gge5vGgh15dWeJPJSQyErqiTVffUNkctteAoT4tHjRFB\": \"Serum: SRM / USDC - Quote Currency Vault\",\n  \"AZVmspyVcUv78HX9PtMFr5guSswotsV6Afsr7Vaifz2P\": \"Serum: SRM / USDC - Vault Owner\",\n\n  \"HARFLhSq8nECZk4DVFKvzqXMNMA9a3hjvridGMFizeLa\": \"Serum: SRM / USDT\",\n  \"3p86S1RzNo7sCVBD3awQ9M88C9bHdgCeDirU2bDv7P3n\": \"Serum: SRM / USDT - Request Queue\",\n  \"yaJV7SqjmDyQXkpEtyxF4R1k3UdVJtdKse7RHB3hKLE\": \"Serum: SRM / USDT - Event Queue\",\n  \"4KoZ6w5hbUGUgBJyAvUZAtHx2MCDyoGrFXZyAXrpu3ep\": \"Serum: SRM / USDT - Order Book (Bids)\",\n  \"CS3k6C8gWUupTBeEeh8AyK8fHN16Yj9zXaqLPh3Q4Ti8\": \"Serum: SRM / USDT - Order Book (Asks)\",\n  \"8u5NUxd5ShNe5LNv42MXqJ7uuWgAigGe9b5DueLttTh7\": \"Serum: SRM / USDT - Base Asset Vault\",\n  \"FvTgrXUUD2KiLBybdPa3zG5tJJuCD3qyrJsennNRc58W\": \"Serum: SRM / USDT - Quote Currency Vault\",\n  \"7SjKY8GoSVTNZa26gNyMtgdUMEKYcxNPtbGVFTmiFbhS\": \"Serum: SRM / USDT - Vault Owner\",\n\n  \"FZqrBXz7ADGsmDf1TM9YgysPUfvtG8rJiNUrqDpHc9Au\": \"Serum: FTC / USDC\",\n  \"2spxPVwPaMWruDHiFfwbchwWG6Lx2soxaCGhjK6DFL1a\": \"Serum: FTC / USDC - Request Queue\",\n  \"9YbacjStsjbAL2P2tjn3TEALBABBh2jsroq911bEbmva\": \"Serum: FTC / USDC - Event Queue\",\n  \"8Vwf6LVGyB5XcxRUPC1S4U2U3GkoEf9x6yTLhwGE611y\": \"Serum: FTC / USDC - Order Book (Bids)\",\n  \"GjasUQFVeXcaGcZk5qFRfdWpbbEMcAbv2EVSFxpu6EDR\": \"Serum: FTC / USDC - Order Book (Asks)\",\n  \"6HmxKKjmmRZZqUYTH63whUWWF7vdNQfiKx2BtUrtFB3A\": \"Serum: FTC / USDC - Base Asset Vault\",\n  \"2mULsMxTia5uAiFi8huEQ3zeCe8UBXRdnVaQYybnsJ6L\": \"Serum: FTC / USDC - Quote Currency Vault\",\n  \"G4FCN83ZSRh4baXDY8eNLhk8reWxKZke3dnDBPmev1Bk\": \"Serum: FTC / USDC - Vault Owner\",\n\n  \"DHDdghmkBhEpReno3tbzBPtsxCt6P3KrMzZvxavTktJt\": \"Serum: FTT / USDT\",\n  \"6cXxUcn7yAkgEWAHqXDav7zeEkbGRAC3cR8VpgzD8kxy\": \"Serum: FTT / USDT - Request Queue\",\n  \"GmE8DSdDkEJJfzABt7DRYB2DUrPKSLgjzBMsgHjpKmZX\": \"Serum: FTT / USDT - Event Queue\",\n  \"DiBDJzU91rSGqrTjnVtQgnsJ3dGYQ2TYwspwxsMLzZV4\": \"Serum: FTT / USDT - Order Book (Bids)\",\n  \"B2qVWSfy4HFK9tGATeYWFbMZ6fi54DEiMCh5bDGmy9n4\": \"Serum: FTT / USDT - Order Book (Asks)\",\n  \"6xKUQy2Ao4KVvyPns88AwPXchemb9EY4YB3r8gczg6gu\": \"Serum: FTT / USDT - Base Asset Vault\",\n  \"DEixXfs1PJ4q8VcNYJas2JFDdgFnKMS5mEj9WKP9Kn1J\": \"Serum: FTT / USDT - Quote Currency Vault\",\n  \"F3Wh4ZAEkR8xrdXwzrADLotvJmYjUiQNwWVvm91mAAa8\": \"Serum: FTT / USDT - Vault Owner\",\n\n  \"FJg9FUtbN3fg3YFbMCFiZKjGh5Bn4gtzxZmtxFzmz9kT\": \"Serum: YFI / USDC\",\n  \"13mTW8D1yoyXMVyCKtmVBtH1sSnHBUWCjfjNJp6CEtDf\": \"Serum: YFI / USDC - Request Queue\",\n  \"EzZkAWQ97k5D1Augf1bopK7zf9CwJZ9V6eCua6yNGnNj\": \"Serum: YFI / USDC - Event Queue\",\n  \"5ULcF7rHaMFqmGWBYxcsFGSpo2SfWYzJ4TcMAYWrMG3S\": \"Serum: YFI / USDC - Order Book (Bids)\",\n  \"78XjqnsSY9CWibWCiAumfx8oSL7yCjoWA1DuuvN4TfUr\": \"Serum: YFI / USDC - Order Book (Asks)\",\n  \"7j3UcJ77HqA7MTpBNYniBtkDs2F5EgxaLv4oRhK1t63Z\": \"Serum: YFI / USDC - Base Asset Vault\",\n  \"AbMjvkKRRa5SSwR1MHrSL5inxuybDDMfL3F5RJuMyaHL\": \"Serum: YFI / USDC - Quote Currency Vault\",\n  \"AnuZK381G6gSbfMsWykkD33WwS4BENfL2rqciQhfbN9L\": \"Serum: YFI / USDC - Vault Owner\",\n\n  \"5zu5bTZZvqESAAgFsr12CUMxdQvMrvU9CgvC1GW8vJdf\": \"Serum: YFI / USDT\",\n  \"HRhgyAnVKX5waJWyC9Yd8jiBnEtwxzjKwk2feSVKrWs3\": \"Serum: YFI / USDT - Request Queue\",\n  \"DZ9rDKDzimKwTCspqePzH5768rqxkjEkDdhHT46ZqSiJ\": \"Serum: YFI / USDT - Event Queue\",\n  \"M6cbtnTtDKeehBpie5edWNLX9C3CNFzZA7HBhjevXiJ\": \"Serum: YFI / USDT - Order Book (Bids)\",\n  \"C7XehQ7R7R8CrxJkJFhoRtsV4SJyKhYoawqadxxYYs3F\": \"Serum: YFI / USDT - Order Book (Asks)\",\n  \"9gFKq8bvkCYwqoLQj6ZXckggS2BEb7Jj6mnUMPxagDVj\": \"Serum: YFI / USDT - Base Asset Vault\",\n  \"8GF7m51UzcvRWwcRcXRpttetB7PwfHdwn9fqE9PCLk6F\": \"Serum: YFI / USDT - Quote Currency Vault\",\n  \"Ci5BrxgxTB2nfmsBz5REpDaChJTZk7FhFTBb8jFbfJp5\": \"Serum: YFI / USDT - Vault Owner\",\n\n  \"7GZ59DMgJ7D6dfoJTpszPayTRyua9jwcaGJXaRMMF1my\": \"Serum: LINK / USDC\",\n  \"8wTo4Tn3QfzYwyjoofutKU4CE8i98Zj8AJrSa2BL4vso\": \"Serum: LINK / USDC - Request Queue\",\n  \"4BTeKadBCoTaCrxwSYj36FNiutZFvRMi8bvuPqZA9pKW\": \"Serum: LINK / USDC - Event Queue\",\n  \"GoaFC6qRq7MNy1suxvPSNYeoioN32kad17qbdqqWEnTe\": \"Serum: LINK / USDC - Order Book (Bids)\",\n  \"9cLbP6pEwEXDttbgTrPqYzxyXnHFygj29DT1EdtrQFfS\": \"Serum: LINK / USDC - Order Book (Asks)\",\n  \"2vXebfXSBhQ1aEV5Nnv4j3eo1RJVuJP7CoWmHNdvPvhk\": \"Serum: LINK / USDC - Base Asset Vault\",\n  \"BnzYkmNRVZ6Q71mvzLwYqkU5B4S2hUdqm1GyU2DfQJEC\": \"Serum: LINK / USDC - Quote Currency Vault\",\n  \"Fpg7XoRAfvrxaVSHmuUS8HRfGzBjRmMoWvRDHoW6G3zV\": \"Serum: LINK / USDC - Vault Owner\",\n\n  \"F5xschQBMpu1gD2q1babYEAVJHR1buj1YazLiXyQNqSW\": \"Serum: LINK / USDT\",\n  \"Ga48n8R13mW4jFnUXmejVa4tPpR8nAo3mYKG95qZEUZV\": \"Serum: LINK / USDT - Request Queue\",\n  \"H7ZHuTaMHswJWbJxsCgtV4ar28Kjty2hB1DbZVT3icjB\": \"Serum: LINK / USDT - Event Queue\",\n  \"HAx1rwxYapD4CPm9G3H2hq1bufykJg6LksZjU39HwHov\": \"Serum: LINK / USDT - Order Book (Bids)\",\n  \"7sjAfkzD9xCU68dmvCtt5mEFBaFzqF8GrYjKdUDhLnst\": \"Serum: LINK / USDT - Order Book (Asks)\",\n  \"5vNPSbGTMUzKPQtDdDBGUCeCip9uD8igj4Erfdzz7YdU\": \"Serum: LINK / USDT - Base Asset Vault\",\n  \"76jYTFWR1qjaxNeNvLmHuLeitBEdpQ9P7QPBa4pMp5ve\": \"Serum: LINK / USDT - Quote Currency Vault\",\n  \"BeZc9vWGyNJ5g6gG8JoRSkvY5oJgyjV7ErLajfVDJ3FA\": \"Serum: LINK / USDT - Vault Owner\",\n\n  \"4eM8iy2k7VXec5VxRk8xFRhHw5Cn67m5FjNzCEegWibm\": \"Serum: XRP / USDC\",\n  \"56RPf4XMR1wLhPKnxgr1cko9gpDWwE7i8w5owWLW4qNT\": \"Serum: XRP / USDC - Request Queue\",\n  \"49oPGPoTexM5CLzrbrMNiNbrrRjhBfLvEPTZRzsPYL3g\": \"Serum: XRP / USDC - Event Queue\",\n  \"66oziZDCXpsCJkYHcxucmEp6bCPaRJUPeeAjSwnudkhb\": \"Serum: XRP / USDC - Order Book (Bids)\",\n  \"9cy917jmyRQqQCocgtnPv5gjiUMx4x4npUPF2CP9bHxP\": \"Serum: XRP / USDC - Order Book (Asks)\",\n  \"9Sfk6Hk9V8FR3kxYNhNt1STKAtWuXifQGKxUJ9g3Np4b\": \"Serum: XRP / USDC - Base Asset Vault\",\n  \"8gDM85fdTxEWYVbBPDQFh1d5gVRTDQ4vhpCai3UTEdS7\": \"Serum: XRP / USDC - Quote Currency Vault\",\n  \"5LaKtnftuks8DB8aJGuHrMnY95KJcUhSpJ77pRi5mvGP\": \"Serum: XRP / USDC - Vault Owner\",\n\n  \"H5BtazuKhHtZCZjFTZSRd4W3QZRaRgq6JcQCBLbjkj1o\": \"Serum: XRP / USDT\",\n  \"6tYvWamhBADnQ3rv7BvAUMyKgcJ2CgtNGSw79REXnsc6\": \"Serum: XRP / USDT - Request Queue\",\n  \"eKr9MEvo1Nv1CMYTjUE3cw1qk3infy5VdtaCZEFkZzn\": \"Serum: XRP / USDT - Event Queue\",\n  \"HrmGTNSsAoe7cUdtZPqzZmnTfnS9WvNwwqiAYXi8ZwAW\": \"Serum: XRP / USDT - Order Book (Bids)\",\n  \"BVejg9wNCCai4n2EgTpkiPev3gvS15f1AoKTmK9b2pNs\": \"Serum: XRP / USDT - Order Book (Asks)\",\n  \"2SmRPibwnar9Gd9byx5nK6D8ikAcEUQn7ZC6yqjTBkDg\": \"Serum: XRP / USDT - Base Asset Vault\",\n  \"3jjzgJWeFk3J57JvSJ6P22GdyQFkBTbTLsWB6eSNf6WJ\": \"Serum: XRP / USDT - Quote Currency Vault\",\n  \"GJKaUk5NCHL4LTpP1Yn57qzTdCtjd3mSCyvXdktF4uPx\": \"Serum: XRP / USDT - Vault Owner\",\n\n  \"BGjv1z7GLAHQH9F9Xd6a3idz5JUo1tka8rsLizPvPq5Z\": \"Serum: SRM / USDC\",\n  \"E6EQQpB7nQwbzggSCUUPhjE8C9TGSw5dguQuQPMgr5Dt\": \"Serum: SRM / USDC - Request Queue\",\n  \"8yG8L7hcUtnboi4RcGQ1SBz9njeXzPvJUrmYrysFr1rT\": \"Serum: SRM / USDC - Event Queue\",\n  \"FjPSrcboahL3jGe4GVZDPURQWE8dL3TWVFHNznK6qaXi\": \"Serum: SRM / USDC - Order Book (Bids)\",\n  \"Bh5JCiV2uMsNLDiy5oKJ23YmCPwnmeGQ34kGHUF5dhgu\": \"Serum: SRM / USDC - Order Book (Asks)\",\n  \"8q42g61uTZ9bH9RFdWJyceBTcsRJyaeehzUtSyYzMbj2\": \"Serum: SRM / USDC - Base Asset Vault\",\n  \"2Rn3quSFg8cKTcHwadmEXoR2dcjqhsF3s3AJXZUDKMJb\": \"Serum: SRM / USDC - Quote Currency Vault\",\n  \"BeiNALSUcT23SqwnGKxJ6XUG1jeFcCozKd3SBKVgDRBN\": \"Serum: SRM / USDC - Vault Owner\",\n\n  \"9kJ8YCHZSiqXgfFyT9LoNVFEv8og3C5oN1pPCwmYRgCz\": \"Serum: SRM / USDT\",\n  \"9DsKwjwP1wkg2UaYXESQtbbTYJ6Q888gfuoa1yAuzMAp\": \"Serum: SRM / USDT - Request Queue\",\n  \"BKhdZHfXaVQ1TjG8mNvifJiMxazjRpWcznjCbtxt3YNv\": \"Serum: SRM / USDT - Event Queue\",\n  \"4iy4REdaS3AEWC4fGZmxP121qKTZ659EeKYyP5uB66qj\": \"Serum: SRM / USDT - Order Book (Bids)\",\n  \"2BmuY8oAZVUSn9F2r8JGcLcJN8VHc5QFecub7XBx234W\": \"Serum: SRM / USDT - Order Book (Asks)\",\n  \"HZ1aXc9KVfGGS9mD2mzxHh5jeJSvQrx1dz4zGWBaGmkE\": \"Serum: SRM / USDT - Base Asset Vault\",\n  \"FEyMWn3KnWVEMeJr8q7nQxfQu3jq15MchkhLq94kEoVh\": \"Serum: SRM / USDT - Quote Currency Vault\",\n  \"9sBxruSjQ97z8k42RXAr2grx9S7Fsk2yisbvZE9cNfjG\": \"Serum: SRM / USDT - Vault Owner\",\n};\n\nfunction get(address: string, cluster: Cluster): string | undefined {\n  if (cluster === Cluster.MainnetBeta) return MARKET_REGISTRY[address];\n}\n\nexport const SerumMarketRegistry = {\n  get,\n};\n","import bs58 from \"bs58\";\nimport {\n  SystemProgram,\n  StakeProgram,\n  VOTE_PROGRAM_ID,\n  BPF_LOADER_PROGRAM_ID,\n  BPF_LOADER_DEPRECATED_PROGRAM_ID,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  ParsedTransaction,\n  TransactionInstruction,\n  Transaction,\n  PartiallyDecodedInstruction,\n  ParsedInstruction,\n  Secp256k1Program,\n  Ed25519Program,\n} from \"@solana/web3.js\";\nimport { Cluster } from \"providers/cluster\";\nimport { SerumMarketRegistry } from \"serumMarketRegistry\";\nimport { TokenInfoMap } from \"@solana/spl-token-registry\";\n\nexport type ProgramName =\n  typeof PROGRAM_NAME_BY_ID[keyof typeof PROGRAM_NAME_BY_ID];\n\nexport enum PROGRAM_NAMES {\n  // native built-ins\n  ADDRESS_MAP = \"Address Map Program\",\n  CONFIG = \"Config Program\",\n  STAKE = \"Stake Program\",\n  SYSTEM = \"System Program\",\n  VOTE = \"Vote Program\",\n\n  // native precompiles\n  SECP256K1 = \"Secp256k1 SigVerify Precompile\",\n  ED25519 = \"Ed25519 SigVerify Precompile\",\n\n  // spl\n  ASSOCIATED_TOKEN = \"Associated Token Program\",\n  FEATURE_PROPOSAL = \"Feature Proposal Program\",\n  LENDING = \"Lending Program\",\n  MEMO = \"Memo Program\",\n  MEMO_2 = \"Memo Program v2\",\n  NAME = \"Name Service Program\",\n  STAKE_POOL = \"Stake Pool Program\",\n  SWAP = \"Swap Program\",\n  TOKEN = \"Token Program\",\n  TOKEN_METADATA = \"Token Metadata Program\",\n  TOKEN_VAULT = \"Token Vault Program\",\n\n  // other\n  ACUMEN = \"Acumen Program\",\n  BONFIDA_POOL = \"Bonfida Pool Program\",\n  BREAK_SOLANA = \"Break Solana Program\",\n  MANGO_GOVERNANCE = \"Mango Governance Program\",\n  MANGO_ICO = \"Mango ICO Program\",\n  MANGO_1 = \"Mango Program v1\",\n  MANGO_2 = \"Mango Program v2\",\n  MANGO_3 = \"Mango Program v3\",\n  MARINADE = \"Marinade Staking Program\",\n  MERCURIAL = \"Mercurial Stable Swap Program\",\n  METAPLEX = \"Metaplex Program\",\n  NFT_AUCTION = \"NFT Auction Program\",\n  NFT_CANDY_MACHINE = \"NFT Candy Machine Program\",\n  ORCA_SWAP_1 = \"Orca Swap Program v1\",\n  ORCA_SWAP_2 = \"Orca Swap Program v2\",\n  ORCA_AQUAFARM = \"Orca Aquafarm Program\",\n  PORT = \"Port Finance Program\",\n  PYTH = \"Pyth Oracle Program\",\n  QUARRY_MERGE_MINE = \"Quarry Merge Mine\",\n  QUARRY_MINE = \"Quarry Mine\",\n  QUARRY_MINT_WRAPPER = \"Quarry Mint Wrapper\",\n  QUARRY_REDEEMER = \"Quarry Redeemer\",\n  QUARRY_REGISTRY = \"Quarry Registry\",\n  RAYDIUM_AMM = \"Raydium AMM Program\",\n  RAYDIUM_IDO = \"Raydium IDO Program\",\n  RAYDIUM_LP_1 = \"Raydium Liquidity Pool Program v1\",\n  RAYDIUM_LP_2 = \"Raydium Liquidity Pool Program v2\",\n  RAYDIUM_STAKING = \"Raydium Staking Program\",\n  SABER_ROUTER = \"Saber Router Program\",\n  SABER_SWAP = \"Saber Stable Swap Program\",\n  SERUM_1 = \"Serum Dex Program v1\",\n  SERUM_2 = \"Serum Dex Program v2\",\n  SERUM_3 = \"Serum Dex Program v3\",\n  SERUM_SWAP = \"Serum Swap Program\",\n  SOLEND = \"Solend Program\",\n  SOLIDO = \"Lido for Solana Program\",\n  STEP_SWAP = \"Step Finance Swap Program\",\n  SWITCHBOARD = \"Switchboard Oracle Program\",\n  WORMHOLE = \"Wormhole\",\n}\n\nconst ALL_CLUSTERS = [\n  Cluster.Custom,\n  Cluster.Devnet,\n  Cluster.Testnet,\n  Cluster.MainnetBeta,\n];\n\nconst LIVE_CLUSTERS = [Cluster.Devnet, Cluster.Testnet, Cluster.MainnetBeta];\nconst MAINNET_ONLY = [Cluster.MainnetBeta];\n\nexport const PROGRAM_DEPLOYMENTS = {\n  // native built-ins\n  [PROGRAM_NAMES.ADDRESS_MAP]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.CONFIG]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.STAKE]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.SYSTEM]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.VOTE]: ALL_CLUSTERS,\n\n  // native precompiles\n  [PROGRAM_NAMES.SECP256K1]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.ED25519]: ALL_CLUSTERS,\n\n  // spl\n  [PROGRAM_NAMES.ASSOCIATED_TOKEN]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.FEATURE_PROPOSAL]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.LENDING]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.MEMO]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.MEMO_2]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.NAME]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.STAKE_POOL]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.SWAP]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.TOKEN]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.TOKEN_METADATA]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.TOKEN_VAULT]: LIVE_CLUSTERS,\n\n  // other\n  [PROGRAM_NAMES.ACUMEN]: MAINNET_ONLY,\n  [PROGRAM_NAMES.BONFIDA_POOL]: MAINNET_ONLY,\n  [PROGRAM_NAMES.BREAK_SOLANA]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.MANGO_GOVERNANCE]: MAINNET_ONLY,\n  [PROGRAM_NAMES.MANGO_ICO]: MAINNET_ONLY,\n  [PROGRAM_NAMES.MANGO_1]: MAINNET_ONLY,\n  [PROGRAM_NAMES.MANGO_2]: MAINNET_ONLY,\n  [PROGRAM_NAMES.MANGO_3]: MAINNET_ONLY,\n  [PROGRAM_NAMES.MARINADE]: MAINNET_ONLY,\n  [PROGRAM_NAMES.MERCURIAL]: [Cluster.Devnet, Cluster.MainnetBeta] as Cluster[],\n  [PROGRAM_NAMES.METAPLEX]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.NFT_AUCTION]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.NFT_CANDY_MACHINE]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.ORCA_SWAP_1]: MAINNET_ONLY,\n  [PROGRAM_NAMES.ORCA_SWAP_2]: MAINNET_ONLY,\n  [PROGRAM_NAMES.ORCA_AQUAFARM]: MAINNET_ONLY,\n  [PROGRAM_NAMES.PORT]: MAINNET_ONLY,\n  [PROGRAM_NAMES.PYTH]: MAINNET_ONLY,\n  [PROGRAM_NAMES.QUARRY_MERGE_MINE]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.QUARRY_MINE]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.QUARRY_MINT_WRAPPER]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.QUARRY_REDEEMER]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.QUARRY_REGISTRY]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.RAYDIUM_AMM]: MAINNET_ONLY,\n  [PROGRAM_NAMES.RAYDIUM_IDO]: MAINNET_ONLY,\n  [PROGRAM_NAMES.RAYDIUM_LP_1]: MAINNET_ONLY,\n  [PROGRAM_NAMES.RAYDIUM_LP_2]: MAINNET_ONLY,\n  [PROGRAM_NAMES.RAYDIUM_STAKING]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SABER_ROUTER]: [\n    Cluster.Devnet,\n    Cluster.MainnetBeta,\n  ] as Cluster[],\n  [PROGRAM_NAMES.SABER_SWAP]: [\n    Cluster.Devnet,\n    Cluster.MainnetBeta,\n  ] as Cluster[],\n  [PROGRAM_NAMES.SERUM_1]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SERUM_2]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SERUM_3]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SERUM_SWAP]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SOLEND]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SOLIDO]: MAINNET_ONLY,\n  [PROGRAM_NAMES.STEP_SWAP]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SWITCHBOARD]: MAINNET_ONLY,\n  [PROGRAM_NAMES.WORMHOLE]: MAINNET_ONLY,\n} as const;\n\nexport const PROGRAM_NAME_BY_ID = {\n  // native built-ins\n  AddressMap111111111111111111111111111111111: PROGRAM_NAMES.ADDRESS_MAP,\n  Config1111111111111111111111111111111111111: PROGRAM_NAMES.CONFIG,\n  [StakeProgram.programId.toBase58()]: PROGRAM_NAMES.STAKE,\n  [SystemProgram.programId.toBase58()]: PROGRAM_NAMES.SYSTEM,\n  [VOTE_PROGRAM_ID.toBase58()]: PROGRAM_NAMES.VOTE,\n\n  // native precompiles\n  [Secp256k1Program.programId.toBase58()]: PROGRAM_NAMES.SECP256K1,\n  [Ed25519Program.programId.toBase58()]: PROGRAM_NAMES.ED25519,\n\n  // spl\n  ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL: PROGRAM_NAMES.ASSOCIATED_TOKEN,\n  Feat1YXHhH6t1juaWF74WLcfv4XoNocjXA6sPWHNgAse: PROGRAM_NAMES.FEATURE_PROPOSAL,\n  LendZqTs7gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi: PROGRAM_NAMES.LENDING,\n  Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo: PROGRAM_NAMES.MEMO,\n  MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr: PROGRAM_NAMES.MEMO_2,\n  namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX: PROGRAM_NAMES.NAME,\n  SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy: PROGRAM_NAMES.STAKE_POOL,\n  SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8: PROGRAM_NAMES.SWAP,\n  TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA: PROGRAM_NAMES.TOKEN,\n  metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s: PROGRAM_NAMES.TOKEN_METADATA,\n  vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn: PROGRAM_NAMES.TOKEN_VAULT,\n\n  // other\n  C64kTdg1Hzv5KoQmZrQRcm2Qz7PkxtFBgw7EpFhvYn8W: PROGRAM_NAMES.ACUMEN,\n  WvmTNLpGMVbwJVYztYL4Hnsy82cJhQorxjnnXcRm3b6: PROGRAM_NAMES.BONFIDA_POOL,\n  BrEAK7zGZ6dM71zUDACDqJnekihmwF15noTddWTsknjC: PROGRAM_NAMES.BREAK_SOLANA,\n  GqTPL6qRf5aUuqscLh8Rg2HTxPUXfhhAXDptTLhp1t2J: PROGRAM_NAMES.MANGO_GOVERNANCE,\n  \"7sPptkymzvayoSbLXzBsXEF8TSf3typNnAWkrKrDizNb\": PROGRAM_NAMES.MANGO_ICO,\n  JD3bq9hGdy38PuWQ4h2YJpELmHVGPPfFSuFkpzAd9zfu: PROGRAM_NAMES.MANGO_1,\n  \"5fNfvyp5czQVX77yoACa3JJVEhdRaWjPuazuWgjhTqEH\": PROGRAM_NAMES.MANGO_2,\n  mv3ekLzLbnVPNxjSKvqBpU3ZeZXPQdEC3bp5MDEBG68: PROGRAM_NAMES.MANGO_3,\n  MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD: PROGRAM_NAMES.MARINADE,\n  MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky: PROGRAM_NAMES.MERCURIAL,\n  p1exdMJcjVao65QdewkaZRUnU6VPSXhus9n2GzWfh98: PROGRAM_NAMES.METAPLEX,\n  auctxRXPeJoc4817jDhf4HbjnhEcr1cCXenosMhK5R8: PROGRAM_NAMES.NFT_AUCTION,\n  cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ: PROGRAM_NAMES.NFT_CANDY_MACHINE,\n  DjVE6JNiYqPL2QXyCUUh8rNjHrbz9hXHNYt99MQ59qw1: PROGRAM_NAMES.ORCA_SWAP_1,\n  \"9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP\": PROGRAM_NAMES.ORCA_SWAP_2,\n  \"82yxjeMsvaURa4MbZZ7WZZHfobirZYkH1zF8fmeGtyaQ\": PROGRAM_NAMES.ORCA_AQUAFARM,\n  Port7uDYB3wk6GJAw4KT1WpTeMtSu9bTcChBHkX2LfR: PROGRAM_NAMES.PORT,\n  FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH: PROGRAM_NAMES.PYTH,\n  QMMD16kjauP5knBwxNUJRZ1Z5o3deBuFrqVjBVmmqto: PROGRAM_NAMES.QUARRY_MERGE_MINE,\n  QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB: PROGRAM_NAMES.QUARRY_MINE,\n  QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV:\n    PROGRAM_NAMES.QUARRY_MINT_WRAPPER,\n  QRDxhMw1P2NEfiw5mYXG79bwfgHTdasY2xNP76XSea9: PROGRAM_NAMES.QUARRY_REDEEMER,\n  QREGBnEj9Sa5uR91AV8u3FxThgP5ZCvdZUW2bHAkfNc: PROGRAM_NAMES.QUARRY_REGISTRY,\n  \"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\": PROGRAM_NAMES.RAYDIUM_AMM,\n  \"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\": PROGRAM_NAMES.RAYDIUM_IDO,\n  RVKd61ztZW9GUwhRbbLoYVRE5Xf1B2tVscKqwZqXgEr: PROGRAM_NAMES.RAYDIUM_LP_1,\n  \"27haf8L6oxUeXrHrgEgsexjSY5hbVUWEmvv9Nyxg8vQv\": PROGRAM_NAMES.RAYDIUM_LP_2,\n  EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q: PROGRAM_NAMES.RAYDIUM_STAKING,\n  Crt7UoUR6QgrFrN7j8rmSQpUTNWNSitSwWvsWGf1qZ5t: PROGRAM_NAMES.SABER_ROUTER,\n  SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ: PROGRAM_NAMES.SABER_SWAP,\n  BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg: PROGRAM_NAMES.SERUM_1,\n  EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o: PROGRAM_NAMES.SERUM_2,\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\": PROGRAM_NAMES.SERUM_3,\n  \"22Y43yTVxuUkoRKdm9thyRhQ3SdgQS7c7kB6UNCiaczD\": PROGRAM_NAMES.SERUM_SWAP,\n  So1endDq2YkqhipRh3WViPa8hdiSpxWy6z3Z6tMCpAo: PROGRAM_NAMES.SOLEND,\n  CrX7kMhLC3cSsXJdT7JDgqrRVWGnUpX3gfEfxxU2NVLi: PROGRAM_NAMES.SOLIDO,\n  SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1: PROGRAM_NAMES.STEP_SWAP,\n  DtmE9D2CSB4L5D6A15mraeEjrGMm6auWVzgaD8hK2tZM: PROGRAM_NAMES.SWITCHBOARD,\n  WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC: PROGRAM_NAMES.WORMHOLE,\n} as const;\n\nexport type LoaderName = typeof LOADER_IDS[keyof typeof LOADER_IDS];\nexport const LOADER_IDS = {\n  MoveLdr111111111111111111111111111111111111: \"Move Loader\",\n  NativeLoader1111111111111111111111111111111: \"Native Loader\",\n  [BPF_LOADER_DEPRECATED_PROGRAM_ID.toBase58()]: \"BPF Loader\",\n  [BPF_LOADER_PROGRAM_ID.toBase58()]: \"BPF Loader 2\",\n  BPFLoaderUpgradeab1e11111111111111111111111: \"BPF Upgradeable Loader\",\n} as const;\n\nexport const SPECIAL_IDS: { [key: string]: string } = {\n  \"1nc1nerator11111111111111111111111111111111\": \"Incinerator\",\n  Sysvar1111111111111111111111111111111111111: \"SYSVAR\",\n};\n\nexport const SYSVAR_IDS = {\n  [SYSVAR_CLOCK_PUBKEY.toBase58()]: \"Sysvar: Clock\",\n  SysvarEpochSchedu1e111111111111111111111111: \"Sysvar: Epoch Schedule\",\n  SysvarFees111111111111111111111111111111111: \"Sysvar: Fees\",\n  SysvarRecentB1ockHashes11111111111111111111: \"Sysvar: Recent Blockhashes\",\n  [SYSVAR_RENT_PUBKEY.toBase58()]: \"Sysvar: Rent\",\n  [SYSVAR_REWARDS_PUBKEY.toBase58()]: \"Sysvar: Rewards\",\n  SysvarS1otHashes111111111111111111111111111: \"Sysvar: Slot Hashes\",\n  SysvarS1otHistory11111111111111111111111111: \"Sysvar: Slot History\",\n  [SYSVAR_STAKE_HISTORY_PUBKEY.toBase58()]: \"Sysvar: Stake History\",\n  Sysvar1nstructions1111111111111111111111111: \"Sysvar: Instructions\",\n};\n\nexport function programLabel(\n  address: string,\n  cluster: Cluster\n): string | undefined {\n  const programName = PROGRAM_NAME_BY_ID[address];\n  if (programName && PROGRAM_DEPLOYMENTS[programName].includes(cluster)) {\n    return programName;\n  }\n\n  return LOADER_IDS[address];\n}\n\nexport function tokenLabel(\n  address: string,\n  tokenRegistry?: TokenInfoMap\n): string | undefined {\n  if (!tokenRegistry) return;\n  const tokenInfo = tokenRegistry.get(address);\n  if (!tokenInfo) return;\n  if (tokenInfo.name === tokenInfo.symbol) {\n    return tokenInfo.name;\n  }\n  return `${tokenInfo.symbol} - ${tokenInfo.name}`;\n}\n\nexport function addressLabel(\n  address: string,\n  cluster: Cluster,\n  tokenRegistry?: TokenInfoMap\n): string | undefined {\n  return (\n    programLabel(address, cluster) ||\n    SYSVAR_IDS[address] ||\n    SPECIAL_IDS[address] ||\n    tokenLabel(address, tokenRegistry) ||\n    SerumMarketRegistry.get(address, cluster)\n  );\n}\n\nexport function displayAddress(\n  address: string,\n  cluster: Cluster,\n  tokenRegistry: TokenInfoMap,\n  customAddressLabels: Map<string, string> = new Map()\n): string {\n  return (\n    customAddressLabels.get(address) ||\n    addressLabel(address, cluster, tokenRegistry) ||\n    address\n  );\n}\n\nexport function intoTransactionInstruction(\n  tx: ParsedTransaction,\n  instruction: ParsedInstruction | PartiallyDecodedInstruction\n): TransactionInstruction | undefined {\n  const message = tx.message;\n  if (\"parsed\" in instruction) return;\n\n  const keys = [];\n  for (const account of instruction.accounts) {\n    const accountKey = message.accountKeys.find(({ pubkey }) =>\n      pubkey.equals(account)\n    );\n    if (!accountKey) return;\n    keys.push({\n      pubkey: accountKey.pubkey,\n      isSigner: accountKey.signer,\n      isWritable: accountKey.writable,\n    });\n  }\n\n  return new TransactionInstruction({\n    data: bs58.decode(instruction.data),\n    keys: keys,\n    programId: instruction.programId,\n  });\n}\n\nexport function intoParsedTransaction(tx: Transaction): ParsedTransaction {\n  const message = tx.compileMessage();\n  return {\n    signatures: tx.signatures.map((value) =>\n      bs58.encode(value.signature as any)\n    ),\n    message: {\n      accountKeys: message.accountKeys.map((key, index) => ({\n        pubkey: key,\n        signer: tx.signatures.some(({ publicKey }) => publicKey.equals(key)),\n        writable: message.isAccountWritable(index),\n      })),\n      instructions: message.instructions.map((ix) => ({\n        programId: message.accountKeys[ix.programIdIndex],\n        accounts: ix.accounts.map((index) => message.accountKeys[index]),\n        data: ix.data,\n      })),\n      recentBlockhash: message.recentBlockhash,\n    },\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Amman = void 0;\nconst address_labels_1 = require(\"./diagnostics/address-labels\");\nconst relay_1 = require(\"./relay\");\n/**\n * Creates an Amman instance which is used to interact with address labels and\n * other amman features.\n * By default it connects the socket client to the running amman validator.\n * This allows it to update the amman-explorer with recent transactions and addresses.\n *\n * NOTE: that Amman should only be instantiated once during the life time of\n * your program, tests, etc.\n *\n * ## Example\n *\n * ```js\n * export const amman = Amman.instance({\n *   knownLabels: { [PROGRAM_ADDRESS]: 'My Program' },\n *   logLabel: console.log,\n * })\n * ```\n */\nclass Amman {\n    constructor(addresses) {\n        this.addresses = addresses;\n        /**\n         * Generates a keypair and returns its public key and the keypair itself as a Tuple.\n         *\n         * @param label if provided the key will be added to existing labels\n         * @return [publicKey, keypair ]\n         */\n        this.genKeypair = (label) => {\n            return this.addresses.genKeypair(label);\n        };\n    }\n    /**\n     * Creates an instance of {@link Amman}.\n     *\n     * @param args\n     * @param args.knownLabels label keys that do not change, i.e. `{ [PROGRM_ID]:  'My Program' }`\n     * @param args.logLabel used to log labels that are added to {@link Amman.addresses}\n     * @param args.connectClient used to determine if to connect an amman client\n     * if no {@link args.ammanClient} is provided; defaults to connect unless running in a CI environment\n     * @param args.ammanClient allows to override the client used to connect to the amman validator\n     */\n    static instance(args = {}) {\n        const { connectClient = process.env.CI == null } = args;\n        const { knownLabels = {}, logLabel = (_) => { }, ammanClient = connectClient\n            ? relay_1.ConnectedAmmanClient.getInstance()\n            : new relay_1.DisconnectedAmmanClient(), } = args;\n        if (Amman._instance != null) {\n            console.error('Can only create Amman instance once');\n            return Amman._instance;\n        }\n        const addAddressLabels = address_labels_1.AddressLabels.setInstance(knownLabels !== null && knownLabels !== void 0 ? knownLabels : {}, logLabel, ammanClient);\n        Amman._instance = new Amman(addAddressLabels);\n        return Amman._instance;\n    }\n}\nexports.Amman = Amman;\n//# sourceMappingURL=api.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DisconnectedAmmanClient = exports.ConnectedAmmanClient = void 0;\nconst socket_io_client_1 = __importDefault(require(\"socket.io-client\"));\nconst utils_1 = require(\"../utils\");\nconst consts_1 = require(\"./consts\");\n/** @private */\nclass ConnectedAmmanClient {\n    constructor(url = `http://localhost:${consts_1.AMMAN_RELAY_PORT}`) {\n        this.url = url;\n        this.socket = (0, socket_io_client_1.default)(url, { autoUnref: true });\n    }\n    connect() {\n        if (this.socket.connected)\n            return this;\n        this.socket.connect();\n        (0, utils_1.logDebug)('AmmanClient connected');\n        return this;\n    }\n    addAddressLabels(labels) {\n        if (utils_1.logTrace.enabled) {\n            const labelCount = Object.keys(labels).length;\n            (0, utils_1.logTrace)(`Adding ${labelCount} address labels`);\n        }\n        this.socket.emit(consts_1.MSG_UPDATE_ADDRESS_LABELS, labels);\n    }\n    static getInstance(url) {\n        if (ConnectedAmmanClient._instance != null)\n            return ConnectedAmmanClient._instance;\n        ConnectedAmmanClient._instance = new ConnectedAmmanClient(url).connect();\n        return ConnectedAmmanClient._instance;\n    }\n}\nexports.ConnectedAmmanClient = ConnectedAmmanClient;\n/** @private */\nclass DisconnectedAmmanClient {\n    addAddressLabels(_labels) { }\n}\nexports.DisconnectedAmmanClient = DisconnectedAmmanClient;\n//# sourceMappingURL=client.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertError = exports.assertTransactionSummary = exports.assertConfirmedTransaction = void 0;\n/**\n * Asserts details about a confirmed transaction\n *\n * @param t\n * @param tx the confirmed transaction to verify\n * @param args specify what details should be verified\n * @category asserts\n */\nfunction assertConfirmedTransaction(t, tx, args = {}) {\n    var _a, _b;\n    t.equal((_a = tx.meta) === null || _a === void 0 ? void 0 : _a.err, null, 'confirmed transaction has no error');\n    if (args.fee != null) {\n        t.equal((_b = tx.meta) === null || _b === void 0 ? void 0 : _b.fee, args.fee, 'confirmed transaction fee matches');\n    }\n}\nexports.assertConfirmedTransaction = assertConfirmedTransaction;\n/**\n * Asserts details about a {@link TransactionSummary}.\n *\n * @param t\n * @param summary transaction summary to verify\n * @param args specify what details should be verified\n * @category asserts\n */\nfunction assertTransactionSummary(t, summary, args = {}) {\n    t.equal(summary.err, null, 'transaction summary has no error');\n    if (args.fee != null) {\n        t.equal(summary.fee, args.fee, 'transaction summary fee matches');\n    }\n    if (args.msgRx != null) {\n        for (const msgRx of args.msgRx) {\n            const hasMatch = summary.logMessages.some((x) => msgRx.test(x));\n            if (!hasMatch) {\n                console.error('Failed to find %s inside', msgRx.toString());\n                console.error(summary.logMessages.join('\\n  '));\n            }\n            t.ok(hasMatch, `match '${msgRx.toString()}' in transaction summary log messages`);\n        }\n    }\n}\nexports.assertTransactionSummary = assertTransactionSummary;\n/**\n * Asserts details about the provided error.\n *\n * @param t\n * @param err error to verify\n * @param msgRxs list of {@link RegExp} which will be matched on the error _message_ or `err.logs`.\n * @category asserts\n */\nfunction assertError(t, err, msgRxs) {\n    var _a;\n    t.ok(err != null, 'error encountered');\n    const errorMessages = err\n        .toString()\n        .split('\\n')\n        .concat((_a = err.logs) !== null && _a !== void 0 ? _a : []);\n    for (const msgRx of msgRxs) {\n        const hasMatch = errorMessages.some((x) => msgRx.test(x));\n        if (!hasMatch) {\n            console.error('Failed to find %s inside', msgRx.toString());\n            console.error(errorMessages.join('\\n  '));\n        }\n        t.ok(hasMatch, `match '${msgRx.toString()}' in error message`);\n    }\n}\nexports.assertError = assertError;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./token-balances\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenBalances = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst text_table_1 = __importDefault(require(\"text-table\"));\nconst token_registry_1 = require(\"./token-registry\");\n/**\n * Interface to query token balances of a particular transaction.\n *\n * @category diagnostics\n */\nclass TokenBalances {\n    constructor(connection, signature, addressLabels) {\n        this.connection = connection;\n        this.signature = signature;\n        this.addressLabels = addressLabels;\n    }\n    /**\n     * Provides an interfact to query token balances for the transaction with the\n     * provided {@link signature}.\n     *\n     * If {@link addressLabels} are provided then they are used to resolve\n     * account and mint addresses to more meaningful labels.\n     */\n    static forTransaction(connection, signature, addressLabels) {\n        return new TokenBalances(connection, signature, addressLabels);\n    }\n    /**\n     * Gets token balance for the provided account and mint.\n     */\n    async balance(account, mint) {\n        const tokenBalances = await this.byAccountMap(true);\n        const forAccount = tokenBalances.get(account.toBase58());\n        if (forAccount == null)\n            return null;\n        return forAccount[mint.toBase58()];\n    }\n    /**\n     * Gets all token balances for the transaction mapped by account and then grouped\n     * by mint.\n     */\n    async byAccountMap(rawAddresses = false) {\n        var _a, _b, _c, _d, _e, _f;\n        const parsed = await this.connection.getParsedTransaction(this.signature);\n        const accounts = parsed === null || parsed === void 0 ? void 0 : parsed.transaction.message.accountKeys;\n        const preTokenBalances = (_a = parsed === null || parsed === void 0 ? void 0 : parsed.meta) === null || _a === void 0 ? void 0 : _a.preTokenBalances;\n        const postTokenBalances = (_b = parsed === null || parsed === void 0 ? void 0 : parsed.meta) === null || _b === void 0 ? void 0 : _b.postTokenBalances;\n        if ((preTokenBalances == null && postTokenBalances == null) ||\n            accounts == null) {\n            return new Map();\n        }\n        const byAccount = new Map();\n        for (let { mint: rawMint, uiTokenAmount, accountIndex, } of preTokenBalances !== null && preTokenBalances !== void 0 ? preTokenBalances : []) {\n            const account = this.resolveAccount(accounts, accountIndex, rawAddresses);\n            if (account == null)\n                continue;\n            const mint = rawAddresses\n                ? rawMint\n                : (_d = (_c = this.addressLabels) === null || _c === void 0 ? void 0 : _c.resolve(rawMint)) !== null && _d !== void 0 ? _d : rawMint;\n            byAccount.set(account, {\n                [mint]: { amountPre: new bn_js_1.default(uiTokenAmount.amount), rawMint },\n            });\n        }\n        for (let { mint: rawMint, uiTokenAmount, accountIndex, } of postTokenBalances !== null && postTokenBalances !== void 0 ? postTokenBalances : []) {\n            const account = this.resolveAccount(accounts, accountIndex, rawAddresses);\n            const mint = rawAddresses\n                ? rawMint\n                : (_f = (_e = this.addressLabels) === null || _e === void 0 ? void 0 : _e.resolve(rawMint)) !== null && _f !== void 0 ? _f : rawMint;\n            if (account == null)\n                continue;\n            if (!byAccount.has(account)) {\n                // The account has never been minted to before at all, thus has no pre balances\n                byAccount.set(account, {});\n            }\n            const current = byAccount.get(account);\n            let currentMint = current[mint];\n            if (currentMint == null) {\n                // The account has not been minted the mint to before and thus it has no\n                // pre balance. We denote this as `0` pre balance which is what the\n                // solana explorer does as well.\n                currentMint = current[mint] = { amountPre: new bn_js_1.default(0), rawMint };\n            }\n            currentMint.amountPost = new bn_js_1.default(uiTokenAmount.amount);\n        }\n        return byAccount;\n    }\n    /**\n     * Dumps all token balances to the console.\n     */\n    async dump(log = console.log) {\n        var _a, _b;\n        if (typeof (log === null || log === void 0 ? void 0 : log.enabled) !== 'undefined' && !(log === null || log === void 0 ? void 0 : log.enabled))\n            return this;\n        const tokenRegistry = await (0, token_registry_1.resolveTokenRegistry)();\n        const balances = await this.byAccountMap();\n        const rows = [\n            ['Address', 'Token', 'Change', 'Post Balance'],\n            ['-------', '-----', '------', '------------'],\n        ];\n        for (const [account, mints] of balances) {\n            for (const [mintAddress, { amountPre, amountPost, rawMint },] of Object.entries(mints)) {\n                const delta = new bn_js_1.default(amountPost).sub(new bn_js_1.default(amountPre));\n                const unit = (_b = (_a = tokenRegistry.get(rawMint)) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'tokens';\n                const row = [account, mintAddress, delta, `${amountPost} ${unit}`];\n                rows.push(row);\n            }\n        }\n        log((0, text_table_1.default)(rows));\n        return this;\n    }\n    resolveAccount(accounts, accountIndex, rawAddresses) {\n        var _a, _b;\n        const parsedAccount = accounts[accountIndex];\n        return rawAddresses\n            ? parsedAccount.pubkey.toBase58()\n            : (_b = (_a = this.addressLabels) === null || _a === void 0 ? void 0 : _a.resolve(parsedAccount.pubkey)) !== null && _b !== void 0 ? _b : parsedAccount.pubkey.toBase58();\n    }\n}\nexports.TokenBalances = TokenBalances;\n//# sourceMappingURL=token-balances.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveTokenRegistry = void 0;\nconst spl_token_registry_1 = require(\"@solana/spl-token-registry\");\nlet tokenRegistry = undefined;\n/**\n * Resolves the token registry using _static_ stragegy for speed over up-to-dateness.\n * @category diagnostics\n * @private\n */\nasync function resolveTokenRegistry() {\n    if (tokenRegistry == null) {\n        try {\n            await new spl_token_registry_1.TokenListProvider()\n                .resolve(spl_token_registry_1.Strategy.Static)\n                .then((tokens) => {\n                const tokenList = tokens.getList();\n                tokenRegistry = tokenList.reduce((map, item) => {\n                    map.set(item.address, item);\n                    return map;\n                }, new Map());\n            });\n        }\n        catch (err) {\n            return new Map();\n        }\n    }\n    return tokenRegistry;\n}\nexports.resolveTokenRegistry = resolveTokenRegistry;\n//# sourceMappingURL=token-registry.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PayerTransactionHandler = void 0;\nconst assert_1 = require(\"assert\");\nconst _1 = require(\".\");\nconst address_labels_1 = require(\"../diagnostics/address-labels\");\nfunction transactionSummary(tx) {\n    var _a, _b, _c, _d, _e;\n    const logMessages = (_b = (_a = tx.meta) === null || _a === void 0 ? void 0 : _a.logMessages) !== null && _b !== void 0 ? _b : [];\n    const fee = (_c = tx.meta) === null || _c === void 0 ? void 0 : _c.fee;\n    const slot = tx.slot;\n    const blockTime = (_d = tx.blockTime) !== null && _d !== void 0 ? _d : 0;\n    const err = (_e = tx.meta) === null || _e === void 0 ? void 0 : _e.err;\n    return { logMessages, fee, slot, blockTime, err };\n}\n/**\n * A {@link TransactionHandler} backed by a payer {@link Keypair}.\n * @category transactions\n */\nclass PayerTransactionHandler {\n    /**\n     * Creates a {@link PayerTransactionHandler}.\n     *\n     * @param connection to use to handle transactions\n     * @param payer to use to sign transactions\n     */\n    constructor(connection, payer) {\n        this.connection = connection;\n        this.payer = payer;\n    }\n    /**\n     * Public key of the payer\n     */\n    get publicKey() {\n        return this.payer.publicKey;\n    }\n    /**\n     * Sends and confirms the transaction {@link TransactionHandler['sendAndConfirmTransaction']}.\n     */\n    async sendAndConfirmTransaction(transaction, signers, optionsOrLabel, label) {\n        transaction.recentBlockhash = (await this.connection.getLatestBlockhash()).blockhash;\n        const optionsIsLabel = typeof optionsOrLabel === 'string';\n        const options = optionsIsLabel ? undefined : optionsOrLabel;\n        const addressLabel = optionsIsLabel ? optionsOrLabel : label;\n        const txSignature = await this.connection.sendTransaction(transaction, [this.payer, ...signers], options !== null && options !== void 0 ? options : _1.defaultSendOptions);\n        if (addressLabel != null) {\n            address_labels_1.AddressLabels.instance.addLabel(addressLabel, txSignature);\n        }\n        const txRpcResponse = await this.connection.confirmTransaction(txSignature);\n        const txConfirmed = await this.connection.getTransaction(txSignature);\n        (0, assert_1.strict)(txConfirmed != null, 'confirmed transaction should not be null');\n        const txSummary = transactionSummary(txConfirmed);\n        return { txSignature, txRpcResponse, txConfirmed, txSummary };\n    }\n}\nexports.PayerTransactionHandler = PayerTransactionHandler;\n//# sourceMappingURL=transaction-handler.js.map","import React from \"react\";\n\ntype OverlayProps = {\n  show: boolean;\n};\n\nexport function Overlay({ show }: OverlayProps) {\n  return (\n    <div\n      className={`modal-backdrop fade ${\n        show ? \"show\" : \"disable-pointer-events\"\n      }`}\n    ></div>\n  );\n}\n","import React, { ChangeEvent } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { useDebounceCallback } from \"@react-hook/debounce\";\nimport { Location } from \"history\";\nimport {\n  useCluster,\n  ClusterStatus,\n  clusterName,\n  clusterSlug,\n  CLUSTERS,\n  Cluster,\n  useClusterModal,\n  useUpdateCustomUrl,\n} from \"providers/cluster\";\nimport { assertUnreachable, localStorageIsAvailable } from \"../utils\";\nimport { Overlay } from \"./common/Overlay\";\nimport { useQuery } from \"utils/url\";\n\nexport function ClusterModal() {\n  const [show, setShow] = useClusterModal();\n  const onClose = () => setShow(false);\n  const showDeveloperSettings = localStorageIsAvailable();\n  const enableCustomUrl =\n    showDeveloperSettings && localStorage.getItem(\"enableCustomUrl\") !== null;\n  const onToggleCustomUrlFeature = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      localStorage.setItem(\"enableCustomUrl\", \"\");\n    } else {\n      localStorage.removeItem(\"enableCustomUrl\");\n    }\n  };\n\n  return (\n    <>\n      <div className={`offcanvas offcanvas-end${show ? \" show\" : \"\"}`}>\n        <div className=\"modal-body\" onClick={(e) => e.stopPropagation()}>\n          <span className=\"c-pointer\" onClick={onClose}>\n            &times;\n          </span>\n\n          <h2 className=\"text-center mb-4 mt-4\">Choose a Cluster</h2>\n          <ClusterToggle />\n\n          {showDeveloperSettings && (\n            <>\n              <hr />\n\n              <h2 className=\"text-center mb-4 mt-4\">Developer Settings</h2>\n              <div className=\"d-flex justify-content-between\">\n                <span className=\"me-3\">Enable custom url param</span>\n                <div className=\"form-check form-switch\">\n                  <input\n                    type=\"checkbox\"\n                    defaultChecked={enableCustomUrl}\n                    className=\"form-check-input\"\n                    id=\"cardToggle\"\n                    onChange={onToggleCustomUrlFeature}\n                  />\n                  <label\n                    className=\"form-check-label\"\n                    htmlFor=\"cardToggle\"\n                  ></label>\n                </div>\n              </div>\n              <p className=\"text-muted font-size-sm mt-3\">\n                Enable this setting to easily connect to a custom cluster via\n                the \"customUrl\" url param.\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div onClick={onClose}>\n        <Overlay show={show} />\n      </div>\n    </>\n  );\n}\n\ntype InputProps = { activeSuffix: string; active: boolean };\nfunction CustomClusterInput({ activeSuffix, active }: InputProps) {\n  const { customUrl } = useCluster();\n  const updateCustomUrl = useUpdateCustomUrl();\n  const [editing, setEditing] = React.useState(false);\n  const query = useQuery();\n  const history = useHistory();\n  const location = useLocation();\n\n  const btnClass = active\n    ? `border-${activeSuffix} text-${activeSuffix}`\n    : \"btn-white\";\n\n  const clusterLocation = (location: Location) => {\n    query.set(\"cluster\", \"custom\");\n    if (customUrl.length > 0) {\n      query.set(\"customUrl\", customUrl);\n    }\n    return {\n      ...location,\n      search: query.toString(),\n    };\n  };\n\n  const onUrlInput = useDebounceCallback((url: string) => {\n    updateCustomUrl(url);\n    if (url.length > 0) {\n      query.set(\"customUrl\", url);\n      history.push({ ...location, search: query.toString() });\n    }\n  }, 500);\n\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return (\n    <>\n      <Link className={`btn col-12 mb-3 ${btnClass}`} to={clusterLocation}>\n        Custom RPC URL\n      </Link>\n      {active && (\n        <input\n          type=\"url\"\n          defaultValue={customUrl}\n          className={`form-control ${inputTextClass}`}\n          onFocus={() => setEditing(true)}\n          onBlur={() => setEditing(false)}\n          onInput={(e) => onUrlInput(e.currentTarget.value)}\n        />\n      )}\n    </>\n  );\n}\n\nfunction ClusterToggle() {\n  const { status, cluster } = useCluster();\n\n  let activeSuffix = \"\";\n  switch (status) {\n    case ClusterStatus.Connected:\n      activeSuffix = \"primary\";\n      break;\n    case ClusterStatus.Connecting:\n      activeSuffix = \"warning\";\n      break;\n    case ClusterStatus.Failure:\n      activeSuffix = \"danger\";\n      break;\n    default:\n      assertUnreachable(status);\n  }\n\n  return (\n    <div className=\"btn-group-toggle d-flex flex-wrap mb-4\">\n      {CLUSTERS.map((net, index) => {\n        const active = net === cluster;\n        if (net === Cluster.Custom)\n          return (\n            <CustomClusterInput\n              key={index}\n              activeSuffix={activeSuffix}\n              active={active}\n            />\n          );\n\n        const btnClass = active\n          ? `border-${activeSuffix} text-${activeSuffix}`\n          : \"btn-white\";\n\n        const clusterLocation = (location: Location) => {\n          const params = new URLSearchParams(location.search);\n          const slug = clusterSlug(net);\n          if (slug !== \"mainnet-beta\") {\n            params.set(\"cluster\", slug);\n          } else {\n            params.delete(\"cluster\");\n          }\n          return {\n            ...location,\n            search: params.toString(),\n          };\n        };\n\n        return (\n          <Link\n            key={index}\n            className={`btn col-12 mb-3 ${btnClass}`}\n            to={clusterLocation}\n          >\n            {clusterName(net)}\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n","export function displayTimestamp(\n  unixTimestamp: number,\n  shortTimeZoneName = false\n): string {\n  const expireDate = new Date(unixTimestamp);\n  const dateString = new Intl.DateTimeFormat(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  }).format(expireDate);\n  const timeString = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hourCycle: \"h23\",\n    timeZoneName: shortTimeZoneName ? \"short\" : \"long\",\n  }).format(expireDate);\n  return `${dateString} at ${timeString}`;\n}\n\nexport function displayTimestampUtc(\n  unixTimestamp: number,\n  shortTimeZoneName = false\n): string {\n  const expireDate = new Date(unixTimestamp);\n  const dateString = new Intl.DateTimeFormat(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    timeZone: \"UTC\",\n  }).format(expireDate);\n  const timeString = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hourCycle: \"h23\",\n    timeZone: \"UTC\",\n    timeZoneName: shortTimeZoneName ? \"short\" : \"long\",\n  }).format(expireDate);\n  return `${dateString} at ${timeString}`;\n}\n\nexport function displayTimestampWithoutDate(\n  unixTimestamp: number,\n  shortTimeZoneName = true\n) {\n  const expireDate = new Date(unixTimestamp);\n  const timeString = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hourCycle: \"h23\",\n    timeZoneName: shortTimeZoneName ? \"short\" : \"long\",\n  }).format(expireDate);\n  return timeString;\n}\n","import React from \"react\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport { displayTimestamp } from \"utils/date\";\n\ntype Announcement = {\n  message: string;\n  estimate?: string;\n  start?: Date;\n  end?: Date;\n};\n\nconst announcements = new Map<Cluster, Announcement>();\n// announcements.set(Cluster.Devnet, {\n//   message: \"Devnet API node is restarting\",\n//   start: new Date(\"July 25, 2020 18:00:00 GMT+8:00\"),\n//   estimate: \"2 hours\",\n// });\n// announcements.set(Cluster.MainnetBeta, {\n//   message: \"Mainnet Beta upgrade in progress. Transactions disabled until epoch 62\",\n//   start: new Date(\"August 2, 2020 00:00:00 GMT+0:00\"),\n//   end: new Date(\"August 4, 2020 00:00:00 GMT+0:00\"),\n// });\n// announcements.set(Cluster.MainnetBeta, {\n//   message:\n//     \"Mainnet Beta upgrade in progress. Transactions disabled until epoch 62\",\n// });\n\nexport function MessageBanner() {\n  const cluster = useCluster().cluster;\n  const announcement = announcements.get(cluster);\n  if (!announcement) return null;\n  const { message, start, end, estimate } = announcement;\n\n  const now = new Date();\n  if (end && now > end) return null;\n  if (start && now < start) return null;\n\n  let timeframe;\n  if (estimate || start || end) {\n    timeframe = (\n      <div>\n        <hr className=\"text-gray-500 w-100 my-3 opacity-50\" />\n        {estimate && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">Estimated Duration: </span>\n            {estimate}\n          </h5>\n        )}\n        {start && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">Started at: </span>\n            {displayTimestamp(start.getTime())}\n          </h5>\n        )}\n        {end && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">End: </span>\n            {displayTimestamp(end.getTime())}\n          </h5>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-info\">\n      <div className=\"container\">\n        <div className=\"d-flex flex-column align-items-center justify-content-center text-center py-3\">\n          <h3 className=\"mb-0 line-height-md\">\n            <span className=\"fe fe-alert-circle me-2\"></span>\n            {message}\n          </h3>\n          {timeframe}\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/dark-explorer-logo.2d910a55.svg\";","import React from \"react\";\nimport {\n  useCluster,\n  ClusterStatus,\n  Cluster,\n  useClusterModal,\n} from \"providers/cluster\";\n\nexport function ClusterStatusBanner() {\n  const [, setShow] = useClusterModal();\n\n  return (\n    <div className=\"container d-md-none my-4\">\n      <div onClick={() => setShow(true)}>\n        <Button />\n      </div>\n    </div>\n  );\n}\n\nexport function ClusterStatusButton() {\n  const [, setShow] = useClusterModal();\n\n  return (\n    <div onClick={() => setShow(true)}>\n      <Button />\n    </div>\n  );\n}\n\nfunction Button() {\n  const { status, cluster, name, customUrl } = useCluster();\n  const statusName = cluster !== Cluster.Custom ? `${name}` : `${customUrl}`;\n\n  const btnClasses = (variant: string) => {\n    return `btn d-block btn-${variant}`;\n  };\n\n  const spinnerClasses = \"spinner-grow spinner-grow-sm me-2\";\n\n  switch (status) {\n    case ClusterStatus.Connected:\n      return (\n        <span className={btnClasses(\"primary\")}>\n          <span className=\"fe fe-check-circle me-2\"></span>\n          {statusName}\n        </span>\n      );\n\n    case ClusterStatus.Connecting:\n      return (\n        <span className={btnClasses(\"warning\")}>\n          <span\n            className={spinnerClasses}\n            role=\"status\"\n            aria-hidden=\"true\"\n          ></span>\n          {statusName}\n        </span>\n      );\n\n    case ClusterStatus.Failure:\n      return (\n        <span className={btnClasses(\"danger\")}>\n          <span className=\"fe fe-alert-circle me-2\"></span>\n          {statusName}\n        </span>\n      );\n  }\n}\n","import React from \"react\";\nimport Logo from \"img/logos-solana/dark-explorer-logo.svg\";\nimport { clusterPath } from \"utils/url\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { ClusterStatusButton } from \"components/ClusterStatusButton\";\n\nexport function Navbar() {\n  // TODO: use `collapsing` to animate collapsible navbar\n  const [collapse, setCollapse] = React.useState(false);\n  // TODO(thlorenz): Total hack to fix static resources like this not working on gh-pages\n  const logo =\n    process.env.NODE_ENV === \"production\" ? (\n      <img\n        src=\"./build/static/media/dark-explorer-logo.2d910a55.svg\"\n        width=\"250\"\n        alt=\"Solana Explorer\"\n      />\n    ) : (\n      <img src={Logo} width=\"250\" alt=\"Solana Explorer\" />\n    );\n\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-light\">\n      <div className=\"container\">\n        <Link to={clusterPath(\"/\")}>\n          <span>Amman</span>\n          {logo}\n        </Link>\n\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          onClick={() => setCollapse((value) => !value)}\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div\n          className={`collapse navbar-collapse ms-auto me-4 ${\n            collapse ? \"show\" : \"\"\n          }`}\n        >\n          <ul className=\"navbar-nav me-auto\">\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to={clusterPath(\"/\")} exact>\n                Cluster Stats\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to={clusterPath(\"/supply\")}>\n                Supply\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to={clusterPath(\"/tx/inspector\")}>\n                Inspector\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"d-none d-md-block\">\n          <ClusterStatusButton />\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React from \"react\";\nimport {\n  TokenListProvider,\n  TokenInfoMap,\n  TokenInfo,\n  TokenListContainer,\n  Strategy,\n} from \"@solana/spl-token-registry\";\nimport { Cluster, clusterSlug, useCluster } from \"providers/cluster\";\n\nconst TokenRegistryContext = React.createContext<TokenInfoMap>(new Map());\n\ntype ProviderProps = { children: React.ReactNode };\n\nexport function TokenRegistryProvider({ children }: ProviderProps) {\n  const [tokenRegistry, setTokenRegistry] = React.useState<TokenInfoMap>(\n    new Map()\n  );\n  const { cluster } = useCluster();\n\n  React.useEffect(() => {\n    new TokenListProvider()\n      .resolve(Strategy.Solana)\n      .then((tokens: TokenListContainer) => {\n        const tokenList =\n          cluster === Cluster.Custom\n            ? []\n            : tokens.filterByClusterSlug(clusterSlug(cluster)).getList();\n\n        setTokenRegistry(\n          tokenList.reduce((map: TokenInfoMap, item: TokenInfo) => {\n            map.set(item.address, item);\n            return map;\n          }, new Map())\n        );\n      });\n  }, [cluster]);\n\n  return (\n    <TokenRegistryContext.Provider value={tokenRegistry}>\n      {children}\n    </TokenRegistryContext.Provider>\n  );\n}\n\nexport function useTokenRegistry() {\n  const tokenRegistry = React.useContext(TokenRegistryContext);\n\n  if (!tokenRegistry) {\n    throw new Error(`useTokenRegistry must be used within a MintsProvider`);\n  }\n\n  return { tokenRegistry };\n}\n","import {\n  Connection,\n  Context,\n  Logs,\n  TransactionSignature,\n} from \"@solana/web3.js\";\n\nexport type TransactionInfo = {\n  signature: TransactionSignature;\n  block: number;\n  index: number;\n};\nexport type OnTransactionsChanged = (transactions: TransactionInfo[]) => void;\nexport class TransactionsMonitor {\n  readonly latestTransactions: TransactionInfo[] = [];\n  transactionCount: number = 0;\n  private constructor(\n    readonly connection: Connection,\n    initialSignatures: { block: number; signature: TransactionSignature }[],\n    private onTransactionsChanged: OnTransactionsChanged,\n    readonly maxTransactions: number\n  ) {\n    this.connection.onLogs(\"all\", this.onLog);\n    this.addSortedSliceOfSignatures(initialSignatures);\n    this.update();\n  }\n\n  private addSortedSliceOfSignatures(\n    currentSignatures: { block: number; signature: TransactionSignature }[]\n  ) {\n    const sorted = Array.from(currentSignatures).sort(\n      ({ block: blockA }, { block: blockB }) => (blockA < blockB ? -1 : 1)\n    );\n    const len = sorted.length;\n    for (const { block, signature } of sorted.slice(\n      Math.max(len - this.maxTransactions, 0),\n      len\n    )) {\n      this.latestTransactions.push({\n        signature,\n        block,\n        index: ++this.transactionCount,\n      });\n    }\n  }\n\n  private onLog = (logs: Logs, ctx: Context) => {\n    const txsBefore = Array.from(this.latestTransactions);\n    this.latestTransactions.push({\n      signature: logs.signature,\n      block: ctx.slot,\n      index: ++this.transactionCount,\n    });\n    this._purgeOldSignatures();\n    this.update(txsBefore);\n  };\n\n  private update(txsBefore: TransactionInfo[] = []) {\n    if (\n      txsBefore.map((x) => x.signature).join(\"\") !==\n      this.latestTransactions.map((x) => x.signature).join(\"\")\n    ) {\n      const currentTransactions = Array.from(this.latestTransactions).reverse();\n      this.onTransactionsChanged(currentTransactions);\n    }\n  }\n\n  private _purgeOldSignatures() {\n    // Assuming they are sorted by block ascending\n    while (this.latestTransactions.length > this.maxTransactions) {\n      this.latestTransactions.shift();\n    }\n  }\n\n  private static _instance?: TransactionsMonitor;\n  static instance(\n    url: string,\n    currentSignatures: { block: number; signature: TransactionSignature }[],\n    onTransactionsChanged: OnTransactionsChanged,\n    maxTransactions: number = TransactionsMonitor.DEFAULT_MAX_TRANSACTIONS\n  ): TransactionsMonitor {\n    if (TransactionsMonitor._instance != null) {\n      TransactionsMonitor._instance.onTransactionsChanged =\n        onTransactionsChanged;\n      return TransactionsMonitor._instance;\n    }\n    const connection = new Connection(url, \"singleGossip\");\n    TransactionsMonitor._instance = new TransactionsMonitor(\n      connection,\n      currentSignatures,\n      onTransactionsChanged,\n      maxTransactions\n    );\n    return TransactionsMonitor._instance;\n  }\n\n  static DEFAULT_MAX_TRANSACTIONS = 12;\n}\n","import debug from \"debug\";\n\nexport const logError = debug(\"amman:error\");\nexport const logInfo = debug(\"amman:info\");\nexport const logDebug = debug(\"amman:debug\");\nexport const logTrace = debug(\"amman:trace\");\n","import {\n  MSG_UPDATE_ADDRESS_LABELS,\n  MSG_GET_KNOWN_ADDRESS_LABELS,\n} from \"@metaplex-foundation/amman\";\nimport EventEmitter from \"events\";\nimport io, { Socket } from \"socket.io-client\";\nimport { logDebug } from \"./log\";\nimport { strict as assert } from \"assert\";\n\nexport const UPDATE_ADDRESS_LABELS = \"update:address-labels\";\nexport class AmmanClient extends EventEmitter {\n  readonly socket: Socket;\n  constructor(readonly url: string) {\n    super();\n    this.socket = io(url);\n  }\n  connect() {\n    if (this.socket.connected) return this;\n    this.socket.connect();\n    logDebug(\"AmmanClient connected\");\n    return this;\n  }\n\n  hookAddressLabels() {\n    this.socket.on(\n      MSG_UPDATE_ADDRESS_LABELS,\n      (labels: Record<string, string>) =>\n        this.emit(UPDATE_ADDRESS_LABELS, labels)\n    );\n    return this;\n  }\n\n  requestKnownAddressLabels() {\n    this.socket.emit(MSG_GET_KNOWN_ADDRESS_LABELS);\n  }\n\n  private static _instance: AmmanClient | undefined;\n  static setInstance(url: string) {\n    assert(\n      AmmanClient._instance == null,\n      \"should only set amman instance once\"\n    );\n    AmmanClient._instance = new AmmanClient(url).connect().hookAddressLabels();\n  }\n\n  static get instance() {\n    assert(\n      AmmanClient._instance != null,\n      \"need to setInstance of AmmanClient first\"\n    );\n    return AmmanClient._instance;\n  }\n}\n","import { AmmanClient, UPDATE_ADDRESS_LABELS } from \"./amman-client\";\n\nexport type HandleAddressLabelsChanged = (labels: Map<string, string>) => void;\n\nexport class CustomAddressLabelsMonitor {\n  private _labels: Map<string, string> = new Map();\n\n  private constructor(\n    readonly ammanClient: AmmanClient,\n    readonly handleAddressLablesChanged: HandleAddressLabelsChanged\n  ) {\n    this.ammanClient\n      .on(UPDATE_ADDRESS_LABELS, this.onUpdateLabels)\n      .requestKnownAddressLabels();\n  }\n\n  private onUpdateLabels = (labels: Record<string, string>) => {\n    this._labels = new Map([\n      ...Array.from(this._labels),\n      ...Object.entries(labels),\n    ]);\n    this.handleAddressLablesChanged(this._labels);\n  };\n\n  get(address: string) {\n    return this._labels.get(address);\n  }\n\n  private static _instance?: CustomAddressLabelsMonitor;\n  static instance(\n    ammanClient: AmmanClient,\n    handleAddressLablesChanged: HandleAddressLabelsChanged\n  ): CustomAddressLabelsMonitor {\n    return (\n      CustomAddressLabelsMonitor._instance ??\n      (CustomAddressLabelsMonitor._instance = new CustomAddressLabelsMonitor(\n        ammanClient,\n        handleAddressLablesChanged\n      ))\n    );\n  }\n}\n","import { TransactionInfo, TransactionsMonitor } from \"./TransactionsMonitor\";\nimport { strict as assert } from \"assert\";\n\nimport { useCluster } from \"../providers/cluster\";\nimport React from \"react\";\nimport { CustomAddressLabelsMonitor } from \"./CustomAddressLabelsMonitor\";\n\n// -----------------\n// TransactionsMonitor\n// -----------------\nconst TransactionsMonitorContext: React.Context<TransactionInfo[]> =\n  React.createContext([] as TransactionInfo[]);\n\nexport function useTransactionsMonitor() {\n  const context = React.useContext(TransactionsMonitorContext);\n  assert(\n    context != null,\n    \"useMonitorTransactions expected to be inside MonitorTransactionsProvider\"\n  );\n  return context as unknown as [\n    TransactionInfo[],\n    React.Dispatch<React.SetStateAction<TransactionInfo[]>>\n  ];\n}\n\nexport function TransactionsMonitorProvider(props: any) {\n  const { url } = useCluster();\n  const [transactionInfos, setTransactionInfos] = React.useState(\n    [] as TransactionInfo[]\n  );\n  const value = React.useMemo(\n    () => [transactionInfos, setTransactionInfos],\n    [transactionInfos]\n  );\n  TransactionsMonitor.instance(url, props.signatures, setTransactionInfos);\n  return <TransactionsMonitorContext.Provider value={value} {...props} />;\n}\n\n// -----------------\n// Custom Address Labels\n// -----------------\nconst CustomAddressLabelsContext: React.Context<Map<string, string>> =\n  React.createContext(new Map());\n\nexport function useCustomAddressLabels() {\n  const context = React.useContext(CustomAddressLabelsContext);\n  assert(\n    context != null,\n    \"useCustomAddressLabels expected to be inside CustomAddressLabelsProvider\"\n  );\n  return context as unknown as [\n    Map<string, string>,\n    React.Dispatch<React.SetStateAction<Map<string, string>>>\n  ];\n}\n\nexport function CustomAddressLabelsProvider(props: any) {\n  const [addressLabels, setAddressLabels] = React.useState(\n    new Map() as Map<string, string>\n  );\n  const value = React.useMemo(\n    () => [addressLabels, setAddressLabels],\n    [addressLabels]\n  );\n  CustomAddressLabelsMonitor.instance(props.ammanClient, setAddressLabels);\n  return <CustomAddressLabelsContext.Provider value={value} {...props} />;\n}\n","import { Link } from \"react-router-dom\";\nimport { useCustomAddressLabels, useTransactionsMonitor } from \"./providers\";\n\nexport function TransactionsMonitorView() {\n  const [transactionInfos] = useTransactionsMonitor();\n  const [customAddressLabels] = useCustomAddressLabels();\n\n  return (\n    <div className=\"header-signatures container my-4\">\n      <h5>Recent Transactions</h5>\n      <div className=\"row align-items-center\">\n        {transactionInfos.map((x) => {\n          let label = (\n            <p className=\"display-6 text-truncate\" style={{ maxWidth: 255 }}>\n              {x.index}. {x.signature}\n            </p>\n          );\n          const addressLabel = customAddressLabels.get(x.signature);\n          if (addressLabel != null) {\n            label = (\n              <div>\n                <span>\n                  {x.index}. {addressLabel}\n                </span>\n                <p\n                  className=\"opacity-25 display-6 text-truncate\"\n                  style={{ maxWidth: 250 }}\n                >\n                  {x.signature}\n                </p>\n              </div>\n            );\n          }\n          return (\n            <Link\n              className=\"col-md\"\n              key={x.signature}\n              to={\"/tx/\" + x.signature}\n            >\n              {label}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Select, { InputActionMeta, ActionMeta, ValueType } from \"react-select\";\nimport StateManager from \"react-select\";\nimport {\n  LOADER_IDS,\n  PROGRAM_NAME_BY_ID,\n  SPECIAL_IDS,\n  SYSVAR_IDS,\n  LoaderName,\n  programLabel,\n} from \"utils/tx\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { TokenInfoMap } from \"@solana/spl-token-registry\";\nimport { TransactionsMonitorView } from \"../amman/components\";\n\nexport function SearchBar() {\n  const [search, setSearch] = React.useState(\"\");\n  const selectRef = React.useRef<StateManager<any> | null>(null);\n  const history = useHistory();\n  const location = useLocation();\n  const { tokenRegistry } = useTokenRegistry();\n  const { cluster, clusterInfo } = useCluster();\n\n  const onChange = (\n    { pathname }: ValueType<any, false>,\n    meta: ActionMeta<any>\n  ) => {\n    if (meta.action === \"select-option\") {\n      history.push({ ...location, pathname });\n      setSearch(\"\");\n    }\n  };\n\n  const onInputChange = (value: string, { action }: InputActionMeta) => {\n    if (action === \"input-change\") setSearch(value);\n  };\n\n  const resetValue = \"\" as any;\n  return (\n    <>\n      <div className=\"container my-4\">\n        <div className=\"row align-items-center\">\n          <div className=\"col\">\n            <Select\n              ref={(ref) => (selectRef.current = ref)}\n              options={buildOptions(\n                search,\n                cluster,\n                tokenRegistry,\n                clusterInfo?.epochInfo.epoch\n              )}\n              noOptionsMessage={() => \"No Results\"}\n              placeholder=\"Search for blocks, accounts, transactions, programs, and tokens\"\n              value={resetValue}\n              inputValue={search}\n              blurInputOnSelect\n              onMenuClose={() => selectRef.current?.blur()}\n              onChange={onChange}\n              styles={{\n                /* work around for https://github.com/JedWatson/react-select/issues/3857 */\n                placeholder: (style) => ({ ...style, pointerEvents: \"none\" }),\n                input: (style) => ({ ...style, width: \"100%\" }),\n              }}\n              onInputChange={onInputChange}\n              components={{ DropdownIndicator }}\n              classNamePrefix=\"search-bar\"\n            />\n          </div>\n        </div>\n      </div>\n      <TransactionsMonitorView />\n    </>\n  );\n}\n\nfunction buildProgramOptions(search: string, cluster: Cluster) {\n  const matchedPrograms = Object.entries(PROGRAM_NAME_BY_ID).filter(\n    ([address]) => {\n      const name = programLabel(address, cluster);\n      if (!name) return false;\n      return (\n        name.toLowerCase().includes(search.toLowerCase()) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedPrograms.length > 0) {\n    return {\n      label: \"Programs\",\n      options: matchedPrograms.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nconst SEARCHABLE_LOADERS: LoaderName[] = [\n  \"BPF Loader\",\n  \"BPF Loader 2\",\n  \"BPF Upgradeable Loader\",\n];\n\nfunction buildLoaderOptions(search: string) {\n  const matchedLoaders = Object.entries(LOADER_IDS).filter(\n    ([address, name]) => {\n      return (\n        SEARCHABLE_LOADERS.includes(name) &&\n        (name.toLowerCase().includes(search.toLowerCase()) ||\n          address.includes(search))\n      );\n    }\n  );\n\n  if (matchedLoaders.length > 0) {\n    return {\n      label: \"Program Loaders\",\n      options: matchedLoaders.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildSysvarOptions(search: string) {\n  const matchedSysvars = Object.entries(SYSVAR_IDS).filter(\n    ([address, name]) => {\n      return (\n        name.toLowerCase().includes(search.toLowerCase()) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedSysvars.length > 0) {\n    return {\n      label: \"Sysvars\",\n      options: matchedSysvars.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildSpecialOptions(search: string) {\n  const matchedSpecialIds = Object.entries(SPECIAL_IDS).filter(\n    ([address, name]) => {\n      return (\n        name.toLowerCase().includes(search.toLowerCase()) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedSpecialIds.length > 0) {\n    return {\n      label: \"Accounts\",\n      options: matchedSpecialIds.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildTokenOptions(\n  search: string,\n  cluster: Cluster,\n  tokenRegistry: TokenInfoMap\n) {\n  const matchedTokens = Array.from(tokenRegistry.entries()).filter(\n    ([address, details]) => {\n      const searchLower = search.toLowerCase();\n      return (\n        details.name.toLowerCase().includes(searchLower) ||\n        details.symbol.toLowerCase().includes(searchLower) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedTokens.length > 0) {\n    return {\n      label: \"Tokens\",\n      options: matchedTokens.map(([id, details]) => ({\n        label: details.name,\n        value: [details.name, details.symbol, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildOptions(\n  rawSearch: string,\n  cluster: Cluster,\n  tokenRegistry: TokenInfoMap,\n  currentEpoch?: number\n) {\n  const search = rawSearch.trim();\n  if (search.length === 0) return [];\n\n  const options = [];\n\n  const programOptions = buildProgramOptions(search, cluster);\n  if (programOptions) {\n    options.push(programOptions);\n  }\n\n  const loaderOptions = buildLoaderOptions(search);\n  if (loaderOptions) {\n    options.push(loaderOptions);\n  }\n\n  const sysvarOptions = buildSysvarOptions(search);\n  if (sysvarOptions) {\n    options.push(sysvarOptions);\n  }\n\n  const specialOptions = buildSpecialOptions(search);\n  if (specialOptions) {\n    options.push(specialOptions);\n  }\n\n  const tokenOptions = buildTokenOptions(search, cluster, tokenRegistry);\n  if (tokenOptions) {\n    options.push(tokenOptions);\n  }\n\n  if (!isNaN(Number(search))) {\n    options.push({\n      label: \"Block\",\n      options: [\n        {\n          label: `Slot #${search}`,\n          value: [search],\n          pathname: `/block/${search}`,\n        },\n      ],\n    });\n\n    if (currentEpoch !== undefined && Number(search) <= currentEpoch + 1) {\n      options.push({\n        label: \"Epoch\",\n        options: [\n          {\n            label: `Epoch #${search}`,\n            value: [search],\n            pathname: `/epoch/${search}`,\n          },\n        ],\n      });\n    }\n  }\n\n  // Prefer nice suggestions over raw suggestions\n  if (options.length > 0) return options;\n\n  try {\n    const decoded = bs58.decode(search);\n    if (decoded.length === 32) {\n      options.push({\n        label: \"Account\",\n        options: [\n          {\n            label: search,\n            value: [search],\n            pathname: \"/address/\" + search,\n          },\n        ],\n      });\n    } else if (decoded.length === 64) {\n      options.push({\n        label: \"Transaction\",\n        options: [\n          {\n            label: search,\n            value: [search],\n            pathname: \"/tx/\" + search,\n          },\n        ],\n      });\n    }\n  } catch (err) {}\n  return options;\n}\n\nfunction DropdownIndicator() {\n  return (\n    <div className=\"search-indicator\">\n      <span className=\"fe fe-search\"></span>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport enum FetchStatus {\n  Fetching,\n  FetchFailed,\n  Fetched,\n}\n\nexport type CacheEntry<T> = {\n  status: FetchStatus;\n  data?: T;\n};\n\nexport type State<T> = {\n  entries: {\n    [key: string]: CacheEntry<T>;\n  };\n  url: string;\n};\n\nexport enum ActionType {\n  Update,\n  Clear,\n}\n\nexport type Update<T> = {\n  type: ActionType.Update;\n  url: string;\n  key: string | number;\n  status: FetchStatus;\n  data?: T;\n};\n\nexport type Clear = {\n  type: ActionType.Clear;\n  url: string;\n};\n\nexport type Action<T> = Update<T> | Clear;\nexport type Dispatch<T> = (action: Action<T>) => void;\ntype Reducer<T, U> = (state: State<T>, action: Action<U>) => State<T>;\ntype Reconciler<T, U> = (\n  entry: T | undefined,\n  update: U | undefined\n) => T | undefined;\n\nfunction defaultReconciler<T>(entry: T | undefined, update: T | undefined) {\n  if (entry) {\n    if (update) {\n      return {\n        ...entry,\n        ...update,\n      };\n    } else {\n      return entry;\n    }\n  } else {\n    return update;\n  }\n}\n\nfunction defaultReducer<T>(state: State<T>, action: Action<T>) {\n  return reducer(state, action, defaultReconciler);\n}\n\nexport function useReducer<T>(url: string) {\n  return React.useReducer<Reducer<T, T>>(defaultReducer, { url, entries: {} });\n}\n\nexport function useCustomReducer<T, U>(\n  url: string,\n  reconciler: Reconciler<T, U>\n) {\n  const customReducer = React.useMemo(() => {\n    return (state: State<T>, action: Action<U>) => {\n      return reducer(state, action, reconciler);\n    };\n  }, [reconciler]);\n  return React.useReducer<Reducer<T, U>>(customReducer, { url, entries: {} });\n}\n\nexport function reducer<T, U>(\n  state: State<T>,\n  action: Action<U>,\n  reconciler: Reconciler<T, U>\n): State<T> {\n  if (action.type === ActionType.Clear) {\n    return { url: action.url, entries: {} };\n  } else if (action.url !== state.url) {\n    return state;\n  }\n\n  switch (action.type) {\n    case ActionType.Update: {\n      const key = action.key;\n      const entry = state.entries[key];\n      const entries = {\n        ...state.entries,\n        [key]: {\n          ...entry,\n          status: action.status,\n          data: reconciler(entry?.data, action.data),\n        },\n      };\n      return { ...state, entries };\n    }\n  }\n}\n","import React from \"react\";\nimport {\n  PublicKey,\n  ConfirmedSignatureInfo,\n  TransactionSignature,\n  Connection,\n  ParsedConfirmedTransaction,\n} from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nconst MAX_TRANSACTION_BATCH_SIZE = 10;\n\ntype TransactionMap = Map<string, ParsedConfirmedTransaction>;\n\ntype AccountHistory = {\n  fetched: ConfirmedSignatureInfo[];\n  transactionMap?: TransactionMap;\n  foundOldest: boolean;\n};\n\ntype HistoryUpdate = {\n  history?: AccountHistory;\n  transactionMap?: TransactionMap;\n  before?: TransactionSignature;\n};\n\ntype State = Cache.State<AccountHistory>;\ntype Dispatch = Cache.Dispatch<HistoryUpdate>;\n\nfunction combineFetched(\n  fetched: ConfirmedSignatureInfo[],\n  current: ConfirmedSignatureInfo[] | undefined,\n  before: TransactionSignature | undefined\n) {\n  if (current === undefined || current.length === 0) {\n    return fetched;\n  }\n\n  // History was refreshed, fetch results should be prepended if contiguous\n  if (before === undefined) {\n    const end = fetched.findIndex((f) => f.signature === current[0].signature);\n    if (end < 0) return fetched;\n    return fetched.slice(0, end).concat(current);\n  }\n\n  // More history was loaded, fetch results should be appended\n  if (current[current.length - 1].signature === before) {\n    return current.concat(fetched);\n  }\n\n  return fetched;\n}\n\nfunction reconcile(\n  history: AccountHistory | undefined,\n  update: HistoryUpdate | undefined\n) {\n  if (update?.history === undefined) return history;\n\n  let transactionMap = history?.transactionMap || new Map();\n  if (update.transactionMap) {\n    transactionMap = new Map([...transactionMap, ...update.transactionMap]);\n  }\n\n  return {\n    fetched: combineFetched(\n      update.history.fetched,\n      history?.fetched,\n      update?.before\n    ),\n    transactionMap,\n    foundOldest: update?.history?.foundOldest || history?.foundOldest || false,\n  };\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype HistoryProviderProps = { children: React.ReactNode };\nexport function HistoryProvider({ children }: HistoryProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useCustomReducer(url, reconcile);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchParsedTransactions(\n  url: string,\n  transactionSignatures: string[]\n) {\n  const transactionMap = new Map();\n  const connection = new Connection(url);\n\n  while (transactionSignatures.length > 0) {\n    const signatures = transactionSignatures.splice(\n      0,\n      MAX_TRANSACTION_BATCH_SIZE\n    );\n    const fetched = await connection.getParsedConfirmedTransactions(signatures);\n    fetched.forEach(\n      (parsed: ParsedConfirmedTransaction | null, index: number) => {\n        if (parsed !== null) {\n          transactionMap.set(signatures[index], parsed);\n        }\n      }\n    );\n  }\n\n  return transactionMap;\n}\n\nasync function fetchAccountHistory(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string,\n  options: {\n    before?: TransactionSignature;\n    limit: number;\n  },\n  fetchTransactions?: boolean,\n  additionalSignatures?: string[]\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: pubkey.toBase58(),\n    url,\n  });\n\n  let status;\n  let history;\n  try {\n    const connection = new Connection(url);\n    const fetched = await connection.getConfirmedSignaturesForAddress2(\n      pubkey,\n      options\n    );\n    history = {\n      fetched,\n      foundOldest: fetched.length < options.limit,\n    };\n    status = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    status = FetchStatus.FetchFailed;\n  }\n\n  let transactionMap;\n  if (fetchTransactions && history?.fetched) {\n    try {\n      const signatures = history.fetched\n        .map((signature) => signature.signature)\n        .concat(additionalSignatures || []);\n      transactionMap = await fetchParsedTransactions(url, signatures);\n    } catch (error) {\n      if (cluster !== Cluster.Custom) {\n        reportError(error, { url });\n      }\n      status = FetchStatus.FetchFailed;\n    }\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key: pubkey.toBase58(),\n    status,\n    data: {\n      history,\n      transactionMap,\n      before: options?.before,\n    },\n  });\n}\n\nexport function useAccountHistories() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useAccountHistories must be used within a AccountsProvider`\n    );\n  }\n\n  return context.entries;\n}\n\nexport function useAccountHistory(\n  address: string\n): Cache.CacheEntry<AccountHistory> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccountHistory must be used within a AccountsProvider`);\n  }\n\n  return context.entries[address];\n}\n\nfunction getUnfetchedSignatures(before: Cache.CacheEntry<AccountHistory>) {\n  if (!before.data?.transactionMap) {\n    return [];\n  }\n\n  const existingMap = before.data.transactionMap;\n  const allSignatures = before.data.fetched.map(\n    (signatureInfo) => signatureInfo.signature\n  );\n  return allSignatures.filter((signature) => !existingMap.has(signature));\n}\n\nexport function useFetchAccountHistory() {\n  const { cluster, url } = useCluster();\n  const state = React.useContext(StateContext);\n  const dispatch = React.useContext(DispatchContext);\n  if (!state || !dispatch) {\n    throw new Error(\n      `useFetchAccountHistory must be used within a AccountsProvider`\n    );\n  }\n\n  return React.useCallback(\n    (pubkey: PublicKey, fetchTransactions?: boolean, refresh?: boolean) => {\n      const before = state.entries[pubkey.toBase58()];\n      if (!refresh && before?.data?.fetched && before.data.fetched.length > 0) {\n        if (before.data.foundOldest) return;\n\n        let additionalSignatures: string[] = [];\n        if (fetchTransactions) {\n          additionalSignatures = getUnfetchedSignatures(before);\n        }\n\n        const oldest =\n          before.data.fetched[before.data.fetched.length - 1].signature;\n        fetchAccountHistory(\n          dispatch,\n          pubkey,\n          cluster,\n          url,\n          {\n            before: oldest,\n            limit: 25,\n          },\n          fetchTransactions,\n          additionalSignatures\n        );\n      } else {\n        fetchAccountHistory(\n          dispatch,\n          pubkey,\n          cluster,\n          url,\n          { limit: 25 },\n          fetchTransactions\n        );\n      }\n    },\n    [state, dispatch, cluster, url]\n  );\n}\n","import { coerce, instance, string } from \"superstruct\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport const PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  (value) => new PublicKey(value)\n);\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  Infer,\n  number,\n  optional,\n  enums,\n  any,\n  boolean,\n  string,\n  array,\n  type,\n  nullable,\n} from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type TokenAccountType = Infer<typeof TokenAccountType>;\nexport const TokenAccountType = enums([\"mint\", \"account\", \"multisig\"]);\n\nexport type TokenAccountState = Infer<typeof AccountState>;\nconst AccountState = enums([\"initialized\", \"uninitialized\", \"frozen\"]);\n\nconst TokenAmount = type({\n  decimals: number(),\n  uiAmountString: string(),\n  amount: string(),\n});\n\nexport type TokenAccountInfo = Infer<typeof TokenAccountInfo>;\nexport const TokenAccountInfo = type({\n  mint: PublicKeyFromString,\n  owner: PublicKeyFromString,\n  tokenAmount: TokenAmount,\n  delegate: optional(PublicKeyFromString),\n  state: AccountState,\n  isNative: boolean(),\n  rentExemptReserve: optional(TokenAmount),\n  delegatedAmount: optional(TokenAmount),\n  closeAuthority: optional(PublicKeyFromString),\n});\n\nexport type MintAccountInfo = Infer<typeof MintAccountInfo>;\nexport const MintAccountInfo = type({\n  mintAuthority: nullable(PublicKeyFromString),\n  supply: string(),\n  decimals: number(),\n  isInitialized: boolean(),\n  freezeAuthority: nullable(PublicKeyFromString),\n});\n\nexport type MultisigAccountInfo = Infer<typeof MultisigAccountInfo>;\nexport const MultisigAccountInfo = type({\n  numRequiredSigners: number(),\n  numValidSigners: number(),\n  isInitialized: boolean(),\n  signers: array(PublicKeyFromString),\n});\n\nexport type TokenAccount = Infer<typeof TokenAccount>;\nexport const TokenAccount = type({\n  type: TokenAccountType,\n  info: any(),\n});\n","import React from \"react\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { TokenAccountInfo } from \"validators/accounts/token\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { create } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\n\nexport type TokenInfoWithPubkey = {\n  info: TokenAccountInfo;\n  pubkey: PublicKey;\n};\n\ninterface AccountTokens {\n  tokens?: TokenInfoWithPubkey[];\n}\n\ntype State = Cache.State<AccountTokens>;\ntype Dispatch = Cache.Dispatch<AccountTokens>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TokensProvider({ children }: ProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<AccountTokens>(url);\n\n  React.useEffect(() => {\n    dispatch({ url, type: ActionType.Clear });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nasync function fetchAccountTokens(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  const key = pubkey.toBase58();\n  dispatch({\n    type: ActionType.Update,\n    key,\n    status: FetchStatus.Fetching,\n    url,\n  });\n\n  let status;\n  let data;\n  try {\n    const { value } = await new Connection(\n      url,\n      \"processed\"\n    ).getParsedTokenAccountsByOwner(pubkey, { programId: TOKEN_PROGRAM_ID });\n    data = {\n      tokens: value.map((accountInfo) => {\n        const parsedInfo = accountInfo.account.data.parsed.info;\n        const info = create(parsedInfo, TokenAccountInfo);\n        return { info, pubkey: accountInfo.pubkey };\n      }),\n    };\n    status = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    status = FetchStatus.FetchFailed;\n  }\n  dispatch({ type: ActionType.Update, url, status, data, key });\n}\n\nexport function useAccountOwnedTokens(\n  address: string\n): Cache.CacheEntry<AccountTokens> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useAccountOwnedTokens must be used within a AccountsProvider`\n    );\n  }\n\n  return context.entries[address];\n}\n\nexport function useFetchAccountOwnedTokens() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchAccountOwnedTokens must be used within a AccountsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchAccountTokens(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { type, any, Infer, string } from \"superstruct\";\n\nexport type ParsedInfo = Infer<typeof ParsedInfo>;\nexport const ParsedInfo = type({\n  type: string(),\n  info: any(),\n});\n","import { coerce, instance, string } from \"superstruct\";\nimport BN from \"bn.js\";\n\nexport const BigNumFromString = coerce(instance(BN), string(), (value) => {\n  if (typeof value === \"string\") return new BN(value, 10);\n  throw new Error(\"invalid big num\");\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { Infer, number, nullable, enums, type } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\nimport { BigNumFromString } from \"validators/bignum\";\n\nexport type StakeAccountType = Infer<typeof StakeAccountType>;\nexport const StakeAccountType = enums([\n  \"uninitialized\",\n  \"initialized\",\n  \"delegated\",\n  \"rewardsPool\",\n]);\n\nexport type StakeMeta = Infer<typeof StakeMeta>;\nexport const StakeMeta = type({\n  rentExemptReserve: BigNumFromString,\n  authorized: type({\n    staker: PublicKeyFromString,\n    withdrawer: PublicKeyFromString,\n  }),\n  lockup: type({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: PublicKeyFromString,\n  }),\n});\n\nexport type StakeAccountInfo = Infer<typeof StakeAccountInfo>;\nexport const StakeAccountInfo = type({\n  meta: StakeMeta,\n  stake: nullable(\n    type({\n      delegation: type({\n        voter: PublicKeyFromString,\n        stake: BigNumFromString,\n        activationEpoch: BigNumFromString,\n        deactivationEpoch: BigNumFromString,\n        warmupCooldownRate: number(),\n      }),\n      creditsObserved: number(),\n    })\n  ),\n});\n\nexport type StakeAccount = Infer<typeof StakeAccount>;\nexport const StakeAccount = type({\n  type: StakeAccountType,\n  info: StakeAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  Infer,\n  enums,\n  number,\n  array,\n  type,\n  nullable,\n  string,\n} from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type VoteAccountType = Infer<typeof VoteAccountType>;\nexport const VoteAccountType = enums([\"vote\"]);\n\nexport type AuthorizedVoter = Infer<typeof AuthorizedVoter>;\nexport const AuthorizedVoter = type({\n  authorizedVoter: PublicKeyFromString,\n  epoch: number(),\n});\n\nexport type PriorVoter = Infer<typeof PriorVoter>;\nexport const PriorVoter = type({\n  authorizedPubkey: PublicKeyFromString,\n  epochOfLastAuthorizedSwitch: number(),\n  targetEpoch: number(),\n});\n\nexport type EpochCredits = Infer<typeof EpochCredits>;\nexport const EpochCredits = type({\n  epoch: number(),\n  credits: string(),\n  previousCredits: string(),\n});\n\nexport type Vote = Infer<typeof Vote>;\nexport const Vote = type({\n  slot: number(),\n  confirmationCount: number(),\n});\n\nexport type VoteAccountInfo = Infer<typeof VoteAccountInfo>;\nexport const VoteAccountInfo = type({\n  authorizedVoters: array(AuthorizedVoter),\n  authorizedWithdrawer: PublicKeyFromString,\n  commission: number(),\n  epochCredits: array(EpochCredits),\n  lastTimestamp: type({\n    slot: number(),\n    timestamp: number(),\n  }),\n  nodePubkey: PublicKeyFromString,\n  priorVoters: array(PriorVoter),\n  rootSlot: nullable(number()),\n  votes: array(Vote),\n});\n\nexport type VoteAccount = Infer<typeof VoteAccount>;\nexport const VoteAccount = type({\n  type: VoteAccountType,\n  info: VoteAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { Infer, string, enums, type } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type NonceAccountType = Infer<typeof NonceAccountType>;\nexport const NonceAccountType = enums([\"uninitialized\", \"initialized\"]);\n\nexport type NonceAccountInfo = Infer<typeof NonceAccountInfo>;\nexport const NonceAccountInfo = type({\n  authority: PublicKeyFromString,\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type NonceAccount = Infer<typeof NonceAccount>;\nexport const NonceAccount = type({\n  type: NonceAccountType,\n  info: NonceAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  Infer,\n  enums,\n  array,\n  number,\n  type,\n  boolean,\n  string,\n  literal,\n  union,\n} from \"superstruct\";\n\nexport type SysvarAccountType = Infer<typeof SysvarAccountType>;\nexport const SysvarAccountType = enums([\n  \"clock\",\n  \"epochSchedule\",\n  \"fees\",\n  \"recentBlockhashes\",\n  \"rent\",\n  \"rewards\",\n  \"slotHashes\",\n  \"slotHistory\",\n  \"stakeHistory\",\n]);\n\nexport type ClockAccountInfo = Infer<typeof ClockAccountInfo>;\nexport const ClockAccountInfo = type({\n  slot: number(),\n  epoch: number(),\n  leaderScheduleEpoch: number(),\n  unixTimestamp: number(),\n});\n\nexport type SysvarClockAccount = Infer<typeof SysvarClockAccount>;\nexport const SysvarClockAccount = type({\n  type: literal(\"clock\"),\n  info: ClockAccountInfo,\n});\n\nexport type EpochScheduleInfo = Infer<typeof EpochScheduleInfo>;\nexport const EpochScheduleInfo = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\nexport type SysvarEpochScheduleAccount = Infer<\n  typeof SysvarEpochScheduleAccount\n>;\nexport const SysvarEpochScheduleAccount = type({\n  type: literal(\"epochSchedule\"),\n  info: EpochScheduleInfo,\n});\n\nexport type FeesInfo = Infer<typeof FeesInfo>;\nexport const FeesInfo = type({\n  feeCalculator: type({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type SysvarFeesAccount = Infer<typeof SysvarFeesAccount>;\nexport const SysvarFeesAccount = type({\n  type: literal(\"fees\"),\n  info: FeesInfo,\n});\n\nexport type RecentBlockhashesEntry = Infer<typeof RecentBlockhashesEntry>;\nexport const RecentBlockhashesEntry = type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type RecentBlockhashesInfo = Infer<typeof RecentBlockhashesInfo>;\nexport const RecentBlockhashesInfo = array(RecentBlockhashesEntry);\n\nexport type SysvarRecentBlockhashesAccount = Infer<\n  typeof SysvarRecentBlockhashesAccount\n>;\nexport const SysvarRecentBlockhashesAccount = type({\n  type: literal(\"recentBlockhashes\"),\n  info: RecentBlockhashesInfo,\n});\n\nexport type RentInfo = Infer<typeof RentInfo>;\nexport const RentInfo = type({\n  lamportsPerByteYear: string(),\n  exemptionThreshold: number(),\n  burnPercent: number(),\n});\n\nexport type SysvarRentAccount = Infer<typeof SysvarRentAccount>;\nexport const SysvarRentAccount = type({\n  type: literal(\"rent\"),\n  info: RentInfo,\n});\n\nexport type RewardsInfo = Infer<typeof RewardsInfo>;\nexport const RewardsInfo = type({\n  validatorPointValue: number(),\n});\n\nexport type SysvarRewardsAccount = Infer<typeof SysvarRewardsAccount>;\nexport const SysvarRewardsAccount = type({\n  type: literal(\"rewards\"),\n  info: RewardsInfo,\n});\n\nexport type SlotHashEntry = Infer<typeof SlotHashEntry>;\nexport const SlotHashEntry = type({\n  slot: number(),\n  hash: string(),\n});\n\nexport type SlotHashesInfo = Infer<typeof SlotHashesInfo>;\nexport const SlotHashesInfo = array(SlotHashEntry);\n\nexport type SysvarSlotHashesAccount = Infer<typeof SysvarSlotHashesAccount>;\nexport const SysvarSlotHashesAccount = type({\n  type: literal(\"slotHashes\"),\n  info: SlotHashesInfo,\n});\n\nexport type SlotHistoryInfo = Infer<typeof SlotHistoryInfo>;\nexport const SlotHistoryInfo = type({\n  nextSlot: number(),\n  bits: string(),\n});\n\nexport type SysvarSlotHistoryAccount = Infer<typeof SysvarSlotHistoryAccount>;\nexport const SysvarSlotHistoryAccount = type({\n  type: literal(\"slotHistory\"),\n  info: SlotHistoryInfo,\n});\n\nexport type StakeHistoryEntryItem = Infer<typeof StakeHistoryEntryItem>;\nexport const StakeHistoryEntryItem = type({\n  effective: number(),\n  activating: number(),\n  deactivating: number(),\n});\n\nexport type StakeHistoryEntry = Infer<typeof StakeHistoryEntry>;\nexport const StakeHistoryEntry = type({\n  epoch: number(),\n  stakeHistory: StakeHistoryEntryItem,\n});\n\nexport type StakeHistoryInfo = Infer<typeof StakeHistoryInfo>;\nexport const StakeHistoryInfo = array(StakeHistoryEntry);\n\nexport type SysvarStakeHistoryAccount = Infer<typeof SysvarStakeHistoryAccount>;\nexport const SysvarStakeHistoryAccount = type({\n  type: literal(\"stakeHistory\"),\n  info: StakeHistoryInfo,\n});\n\nexport type SysvarAccount = Infer<typeof SysvarAccount>;\nexport const SysvarAccount = union([\n  SysvarClockAccount,\n  SysvarEpochScheduleAccount,\n  SysvarFeesAccount,\n  SysvarRecentBlockhashesAccount,\n  SysvarRentAccount,\n  SysvarRewardsAccount,\n  SysvarSlotHashesAccount,\n  SysvarSlotHistoryAccount,\n  SysvarStakeHistoryAccount,\n]);\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  Infer,\n  array,\n  boolean,\n  type,\n  number,\n  string,\n  record,\n  union,\n  literal,\n} from \"superstruct\";\n\nexport type StakeConfigInfo = Infer<typeof StakeConfigInfo>;\nexport const StakeConfigInfo = type({\n  warmupCooldownRate: number(),\n  slashPenalty: number(),\n});\n\nexport type ConfigKey = Infer<typeof ConfigKey>;\nexport const ConfigKey = type({\n  pubkey: string(),\n  signer: boolean(),\n});\n\nexport type ValidatorInfoConfigData = Infer<typeof ValidatorInfoConfigData>;\nexport const ValidatorInfoConfigData = record(string(), string());\n\nexport type ValidatorInfoConfigInfo = Infer<typeof ValidatorInfoConfigInfo>;\nexport const ValidatorInfoConfigInfo = type({\n  keys: array(ConfigKey),\n  configData: ValidatorInfoConfigData,\n});\n\nexport type ValidatorInfoAccount = Infer<typeof ValidatorInfoAccount>;\nexport const ValidatorInfoAccount = type({\n  type: literal(\"validatorInfo\"),\n  info: ValidatorInfoConfigInfo,\n});\n\nexport type StakeConfigInfoAccount = Infer<typeof StakeConfigInfoAccount>;\nexport const StakeConfigInfoAccount = type({\n  type: literal(\"stakeConfig\"),\n  info: StakeConfigInfo,\n});\n\nexport type ConfigAccount = Infer<typeof ConfigAccount>;\nexport const ConfigAccount = union([\n  StakeConfigInfoAccount,\n  ValidatorInfoAccount,\n]);\n","import React from \"react\";\nimport { fetch } from \"cross-fetch\";\n\nconst FLAGGED_REGISTRY =\n  \"https://solana-labs.github.io/solana-flagged-accounts/flagged.txt\";\n\ntype FlaggedMap = Map<string, boolean>;\ntype ProviderProps = { children: React.ReactNode };\n\nconst FlaggedContext = React.createContext<FlaggedMap>(new Map());\n\nexport function FlaggedAccountsProvider({ children }: ProviderProps) {\n  const [flaggedAccounts, setFlaggedAccounts] = React.useState<FlaggedMap>(\n    new Map()\n  );\n\n  React.useEffect(() => {\n    fetch(FLAGGED_REGISTRY)\n      .then((res) => {\n        return res.text();\n      })\n      .then((body: string) => {\n        const flaggedAccounts = new Map<string, boolean>();\n        body\n          .split(\"\\n\")\n          .forEach((account) => flaggedAccounts.set(account, true));\n        setFlaggedAccounts(flaggedAccounts);\n      });\n  }, []);\n\n  return (\n    <FlaggedContext.Provider value={flaggedAccounts}>\n      {children}\n    </FlaggedContext.Provider>\n  );\n}\n\nexport function useFlaggedAccounts() {\n  const flaggedAccounts = React.useContext(FlaggedContext);\n  if (!flaggedAccounts) {\n    throw new Error(\n      `useFlaggedAccounts must be used within a AccountsProvider`\n    );\n  }\n\n  return { flaggedAccounts };\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  type,\n  number,\n  literal,\n  nullable,\n  Infer,\n  union,\n  coerce,\n  create,\n  any,\n  string,\n  tuple,\n} from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type ProgramAccountInfo = Infer<typeof ProgramAccountInfo>;\nexport const ProgramAccountInfo = type({\n  programData: PublicKeyFromString,\n});\n\nexport type ProgramAccount = Infer<typeof ProgramDataAccount>;\nexport const ProgramAccount = type({\n  type: literal(\"program\"),\n  info: ProgramAccountInfo,\n});\n\nexport type ProgramDataAccountInfo = Infer<typeof ProgramDataAccountInfo>;\nexport const ProgramDataAccountInfo = type({\n  authority: nullable(PublicKeyFromString),\n  data: tuple([string(), literal(\"base64\")]),\n  slot: number(),\n});\n\nexport type ProgramDataAccount = Infer<typeof ProgramDataAccount>;\nexport const ProgramDataAccount = type({\n  type: literal(\"programData\"),\n  info: ProgramDataAccountInfo,\n});\n\nexport type ProgramBufferAccountInfo = Infer<typeof ProgramBufferAccountInfo>;\nexport const ProgramBufferAccountInfo = type({\n  authority: nullable(PublicKeyFromString),\n  // don't care about data yet\n});\n\nexport type ProgramBufferAccount = Infer<typeof ProgramBufferAccount>;\nexport const ProgramBufferAccount = type({\n  type: literal(\"buffer\"),\n  info: ProgramBufferAccountInfo,\n});\n\nexport type ProgramUninitializedAccountInfo = Infer<\n  typeof ProgramUninitializedAccountInfo\n>;\nexport const ProgramUninitializedAccountInfo = any();\n\nexport type ProgramUninitializedAccount = Infer<\n  typeof ProgramUninitializedAccount\n>;\nexport const ProgramUninitializedAccount = type({\n  type: literal(\"uninitialized\"),\n  info: ProgramUninitializedAccountInfo,\n});\n\nexport type UpgradeableLoaderAccount = Infer<typeof UpgradeableLoaderAccount>;\nexport const UpgradeableLoaderAccount = coerce(\n  union([\n    ProgramAccount,\n    ProgramDataAccount,\n    ProgramBufferAccount,\n    ProgramUninitializedAccount,\n  ]),\n  ParsedInfo,\n  (value) => {\n    // Coercions like `PublicKeyFromString` are not applied within\n    // union validators so we use this custom coercion as a workaround.\n    switch (value.type) {\n      case \"program\": {\n        return {\n          type: value.type,\n          info: create(value.info, ProgramAccountInfo),\n        };\n      }\n      case \"programData\": {\n        return {\n          type: value.type,\n          info: create(value.info, ProgramDataAccountInfo),\n        };\n      }\n      case \"buffer\": {\n        return {\n          type: value.type,\n          info: create(value.info, ProgramBufferAccountInfo),\n        };\n      }\n      case \"uninitialized\": {\n        return {\n          type: value.type,\n          info: create(value.info, ProgramUninitializedAccountInfo),\n        };\n      }\n      default: {\n        throw new Error(`Unknown program account type: ${value.type}`);\n      }\n    }\n  }\n);\n","import React from \"react\";\nimport * as Cache from \"providers/cache\";\nimport { Connection, BlockResponse } from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"./cluster\";\n\nexport enum FetchStatus {\n  Fetching,\n  FetchFailed,\n  Fetched,\n}\n\nexport enum ActionType {\n  Update,\n  Clear,\n}\n\ntype Block = {\n  block?: BlockResponse;\n  child?: number;\n};\n\ntype State = Cache.State<Block>;\ntype Dispatch = Cache.Dispatch<Block>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype BlockProviderProps = { children: React.ReactNode };\n\nexport function BlockProvider({ children }: BlockProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Block>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useBlock(key: number): Cache.CacheEntry<Block> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useBlock must be used within a BlockProvider`);\n  }\n\n  return context.entries[key];\n}\n\nexport async function fetchBlock(\n  dispatch: Dispatch,\n  url: string,\n  cluster: Cluster,\n  key: number\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key,\n    url,\n  });\n\n  let status: FetchStatus;\n  let data: Block | undefined = undefined;\n\n  try {\n    const connection = new Connection(url, \"confirmed\");\n    const block = await connection.getBlock(key);\n    const child = (await connection.getBlocks(key + 1, key + 100)).shift();\n    if (block === null) {\n      data = {};\n      status = FetchStatus.Fetched;\n    } else {\n      data = { block, child };\n      status = FetchStatus.Fetched;\n    }\n  } catch (err) {\n    status = FetchStatus.FetchFailed;\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key,\n    status,\n    data,\n  });\n}\n\nexport function useFetchBlock() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchBlock must be used within a BlockProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (key: number) => fetchBlock(dispatch, url, cluster, key),\n    [dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport * as Cache from \"providers/cache\";\nimport { Connection, InflationReward, PublicKey } from \"@solana/web3.js\";\nimport { ActionType } from \"providers/block\";\nimport { FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nconst REWARDS_AVAILABLE_EPOCH = new Map<Cluster, number>([\n  [Cluster.MainnetBeta, 132],\n  [Cluster.Testnet, 43],\n]);\n\nconst PAGE_SIZE = 15;\n\nexport type Rewards = {\n  highestFetchedEpoch?: number;\n  lowestFetchedEpoch?: number;\n  rewards: (InflationReward | null)[];\n  foundOldest?: boolean;\n};\n\nexport type RewardsUpdate = {\n  rewards: (InflationReward | null)[];\n  highestFetchedEpoch: number;\n  lowestFetchedEpoch: number;\n  foundOldest?: boolean;\n};\n\ntype State = Cache.State<Rewards>;\ntype Dispatch = Cache.Dispatch<RewardsUpdate>;\n\nfunction reconcile(\n  rewards: Rewards | undefined,\n  update: RewardsUpdate | undefined\n): Rewards | undefined {\n  if (update === undefined) {\n    return rewards;\n  }\n\n  const combined = (rewards?.rewards || [])\n    .concat(update.rewards)\n    .filter((value) => value !== null);\n\n  const foundOldest = update.foundOldest;\n\n  return {\n    rewards: combined,\n    highestFetchedEpoch:\n      rewards?.highestFetchedEpoch || update.highestFetchedEpoch,\n    lowestFetchedEpoch: update.lowestFetchedEpoch,\n    foundOldest,\n  };\n}\n\nexport const StateContext = React.createContext<State | undefined>(undefined);\nexport const DispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\n\ntype RewardsProviderProps = { children: React.ReactNode };\n\nexport function RewardsProvider({ children }: RewardsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useCustomReducer(url, reconcile);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchRewards(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string,\n  fromEpoch?: number,\n  highestEpoch?: number\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: pubkey.toBase58(),\n    url,\n  });\n\n  const lowestAvailableEpoch = REWARDS_AVAILABLE_EPOCH.get(cluster) || 0;\n  const connection = new Connection(url);\n\n  if (!fromEpoch) {\n    try {\n      const epochInfo = await connection.getEpochInfo();\n      fromEpoch = epochInfo.epoch - 1;\n    } catch (error) {\n      if (cluster !== Cluster.Custom) {\n        reportError(error, { url });\n      }\n\n      return dispatch({\n        type: ActionType.Update,\n        status: FetchStatus.FetchFailed,\n        key: pubkey.toBase58(),\n        url,\n      });\n    }\n\n    if (highestEpoch && highestEpoch < fromEpoch) {\n      fromEpoch = highestEpoch;\n    }\n  }\n\n  const getInflationReward = async (epoch: number) => {\n    try {\n      const result = await connection.getInflationReward([pubkey], epoch);\n      return result[0];\n    } catch (error) {\n      if (cluster !== Cluster.Custom) {\n        reportError(error, { url });\n      }\n    }\n    return null;\n  };\n\n  const requests = [];\n  for (let i: number = fromEpoch; i > fromEpoch - PAGE_SIZE; i--) {\n    if (i >= 0) {\n      requests.push(getInflationReward(i));\n    }\n  }\n\n  const results = await Promise.all(requests);\n  const lowestFetchedEpoch = fromEpoch - requests.length + 1;\n\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key: pubkey.toBase58(),\n    status: FetchStatus.Fetched,\n    data: {\n      rewards: results || [],\n      foundOldest: lowestFetchedEpoch <= lowestAvailableEpoch,\n      highestFetchedEpoch: fromEpoch,\n      lowestFetchedEpoch,\n    },\n  });\n}\n\nexport function useRewards(\n  address: string\n): Cache.CacheEntry<Rewards> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useRewards must be used within a AccountsProvider`);\n  }\n\n  return context.entries[address];\n}\n\nexport function useFetchRewards() {\n  const { cluster, url } = useCluster();\n  const state = React.useContext(StateContext);\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!state || !dispatch) {\n    throw new Error(`useFetchRewards must be used within a AccountsProvider`);\n  }\n\n  return React.useCallback(\n    (pubkey: PublicKey, highestEpoch?: number) => {\n      const before = state.entries[pubkey.toBase58()];\n      if (before?.data) {\n        fetchRewards(\n          dispatch,\n          pubkey,\n          cluster,\n          url,\n          before.data.lowestFetchedEpoch\n            ? before.data.lowestFetchedEpoch - 1\n            : undefined,\n          highestEpoch\n        );\n      } else {\n        fetchRewards(dispatch, pubkey, cluster, url, undefined, highestEpoch);\n      }\n    },\n    [state, dispatch, cluster, url]\n  );\n}\n","import { programs } from \"@metaplex/js\";\nimport { Connection } from \"@solana/web3.js\";\n\nconst {\n  metadata: { Metadata, MasterEdition, MetadataKey },\n} = programs;\n\ntype MasterEditionData =\n  | programs.metadata.MasterEditionV1Data\n  | programs.metadata.MasterEditionV2Data;\ntype EditionData = programs.metadata.EditionData;\n\nexport type EditionInfo = {\n  masterEdition?: MasterEditionData;\n  edition?: EditionData;\n};\n\nexport default async function getEditionInfo(\n  metadata: programs.metadata.Metadata,\n  connection: Connection\n): Promise<EditionInfo> {\n  try {\n    const edition = (await Metadata.getEdition(connection, metadata.data.mint))\n      .data;\n\n    if (edition) {\n      if (\n        edition.key === MetadataKey.MasterEditionV1 ||\n        edition.key === MetadataKey.MasterEditionV2\n      ) {\n        return {\n          masterEdition: edition as MasterEditionData,\n          edition: undefined,\n        };\n      }\n\n      // This is an Edition NFT. Pull the Parent (MasterEdition)\n      const masterEdition = (\n        await MasterEdition.load(connection, (edition as EditionData).parent)\n      ).data;\n      if (masterEdition) {\n        return {\n          masterEdition,\n          edition: edition as EditionData,\n        };\n      }\n    }\n  } catch {\n    /* ignore */\n  }\n\n  return {\n    masterEdition: undefined,\n    edition: undefined,\n  };\n}\n","import React from \"react\";\nimport { pubkeyToString } from \"utils\";\nimport { PublicKey, Connection, StakeActivationData } from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { HistoryProvider } from \"./history\";\nimport { TokensProvider } from \"./tokens\";\nimport { create } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport { StakeAccount } from \"validators/accounts/stake\";\nimport {\n  TokenAccount,\n  MintAccountInfo,\n  TokenAccountInfo,\n} from \"validators/accounts/token\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\nimport { VoteAccount } from \"validators/accounts/vote\";\nimport { NonceAccount } from \"validators/accounts/nonce\";\nimport { SysvarAccount } from \"validators/accounts/sysvar\";\nimport { ConfigAccount } from \"validators/accounts/config\";\nimport { FlaggedAccountsProvider } from \"./flagged-accounts\";\nimport {\n  ProgramDataAccount,\n  ProgramDataAccountInfo,\n  UpgradeableLoaderAccount,\n} from \"validators/accounts/upgradeable-program\";\nimport { RewardsProvider } from \"./rewards\";\nimport { programs, MetadataJson } from \"@metaplex/js\";\nimport getEditionInfo, { EditionInfo } from \"./utils/getEditionInfo\";\nexport { useAccountHistory } from \"./history\";\n\nconst Metadata = programs.metadata.Metadata;\n\nexport type StakeProgramData = {\n  program: \"stake\";\n  parsed: StakeAccount;\n  activation?: StakeActivationData;\n};\n\nexport type UpgradeableLoaderAccountData = {\n  program: \"bpf-upgradeable-loader\";\n  parsed: UpgradeableLoaderAccount;\n  programData?: ProgramDataAccountInfo;\n};\n\nexport type NFTData = {\n  metadata: programs.metadata.MetadataData;\n  json: MetadataJson | undefined;\n  editionInfo: EditionInfo;\n};\n\nexport type TokenProgramData = {\n  program: \"spl-token\";\n  parsed: TokenAccount;\n  nftData?: NFTData;\n};\n\nexport type VoteProgramData = {\n  program: \"vote\";\n  parsed: VoteAccount;\n};\n\nexport type NonceProgramData = {\n  program: \"nonce\";\n  parsed: NonceAccount;\n};\n\nexport type SysvarProgramData = {\n  program: \"sysvar\";\n  parsed: SysvarAccount;\n};\n\nexport type ConfigProgramData = {\n  program: \"config\";\n  parsed: ConfigAccount;\n};\n\nexport type ProgramData =\n  | UpgradeableLoaderAccountData\n  | StakeProgramData\n  | TokenProgramData\n  | VoteProgramData\n  | NonceProgramData\n  | SysvarProgramData\n  | ConfigProgramData;\n\nexport interface Details {\n  executable: boolean;\n  owner: PublicKey;\n  space: number;\n  data?: ProgramData;\n}\n\nexport interface Account {\n  pubkey: PublicKey;\n  lamports: number;\n  details?: Details;\n}\n\ntype State = Cache.State<Account>;\ntype Dispatch = Cache.Dispatch<Account>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype AccountsProviderProps = { children: React.ReactNode };\nexport function AccountsProvider({ children }: AccountsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Account>(url);\n\n  // Clear accounts cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <TokensProvider>\n          <HistoryProvider>\n            <RewardsProvider>\n              <FlaggedAccountsProvider>{children}</FlaggedAccountsProvider>\n            </RewardsProvider>\n          </HistoryProvider>\n        </TokensProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchAccountInfo(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: pubkey.toBase58(),\n    status: Cache.FetchStatus.Fetching,\n    url,\n  });\n\n  let data;\n  let fetchStatus;\n  try {\n    const connection = new Connection(url, \"confirmed\");\n    const result = (await connection.getParsedAccountInfo(pubkey)).value;\n\n    let lamports, details;\n    if (result === null) {\n      lamports = 0;\n    } else {\n      lamports = result.lamports;\n\n      // Only save data in memory if we can decode it\n      let space: number;\n      if (!(\"parsed\" in result.data)) {\n        space = result.data.length;\n      } else {\n        space = result.data.space;\n      }\n\n      let data: ProgramData | undefined;\n      if (\"parsed\" in result.data) {\n        try {\n          const info = create(result.data.parsed, ParsedInfo);\n          switch (result.data.program) {\n            case \"bpf-upgradeable-loader\": {\n              const parsed = create(info, UpgradeableLoaderAccount);\n\n              // Fetch program data to get program upgradeability info\n              let programData: ProgramDataAccountInfo | undefined;\n              if (parsed.type === \"program\") {\n                const result = (\n                  await connection.getParsedAccountInfo(parsed.info.programData)\n                ).value;\n                if (\n                  result &&\n                  \"parsed\" in result.data &&\n                  result.data.program === \"bpf-upgradeable-loader\"\n                ) {\n                  const info = create(result.data.parsed, ParsedInfo);\n                  programData = create(info, ProgramDataAccount).info;\n                } else {\n                  throw new Error(\n                    `invalid program data account for program: ${pubkey.toBase58()}`\n                  );\n                }\n              }\n\n              data = {\n                program: result.data.program,\n                parsed,\n                programData,\n              };\n\n              break;\n            }\n            case \"stake\": {\n              const parsed = create(info, StakeAccount);\n              const isDelegated = parsed.type === \"delegated\";\n              const activation = isDelegated\n                ? await connection.getStakeActivation(pubkey)\n                : undefined;\n\n              data = {\n                program: result.data.program,\n                parsed,\n                activation,\n              };\n              break;\n            }\n            case \"vote\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, VoteAccount),\n              };\n              break;\n            case \"nonce\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, NonceAccount),\n              };\n              break;\n            case \"sysvar\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, SysvarAccount),\n              };\n              break;\n            case \"config\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, ConfigAccount),\n              };\n              break;\n\n            case \"spl-token\":\n              const parsed = create(info, TokenAccount);\n              let nftData;\n\n              try {\n                // Generate a PDA and check for a Metadata Account\n                if (parsed.type === \"mint\") {\n                  const metadata = await Metadata.load(\n                    connection,\n                    await Metadata.getPDA(pubkey)\n                  );\n                  if (metadata) {\n                    // We have a valid Metadata account. Try and pull edition data.\n                    const editionInfo = await getEditionInfo(\n                      metadata,\n                      connection\n                    );\n                    const id = pubkeyToString(pubkey);\n                    const metadataJSON = await getMetaDataJSON(\n                      id,\n                      metadata.data\n                    );\n                    nftData = {\n                      metadata: metadata.data,\n                      json: metadataJSON,\n                      editionInfo,\n                    };\n                  }\n                }\n              } catch (error) {\n                // unable to find NFT metadata account\n              }\n\n              data = {\n                program: result.data.program,\n                parsed,\n                nftData,\n              };\n              break;\n            default:\n              data = undefined;\n          }\n        } catch (error) {\n          reportError(error, { url, address: pubkey.toBase58() });\n        }\n      }\n\n      details = {\n        space,\n        executable: result.executable,\n        owner: result.owner,\n        data,\n      };\n    }\n    data = { pubkey, lamports, details };\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    data,\n    key: pubkey.toBase58(),\n    url,\n  });\n}\n\nconst getMetaDataJSON = async (\n  id: string,\n  metadata: programs.metadata.MetadataData\n): Promise<MetadataJson | undefined> => {\n  return new Promise(async (resolve, reject) => {\n    const uri = metadata.data.uri;\n    if (!uri) return resolve(undefined);\n\n    const processJson = (extended: any) => {\n      if (!extended || extended?.properties?.files?.length === 0) {\n        return;\n      }\n\n      if (extended?.image) {\n        extended.image = extended.image.startsWith(\"http\")\n          ? extended.image\n          : `${metadata.data.uri}/${extended.image}`;\n      }\n\n      return extended;\n    };\n\n    try {\n      fetch(uri)\n        .then(async (_) => {\n          try {\n            const data = await _.json();\n            try {\n              localStorage.setItem(uri, JSON.stringify(data));\n            } catch {\n              // ignore\n            }\n            resolve(processJson(data));\n          } catch {\n            resolve(undefined);\n          }\n        })\n        .catch(() => {\n          resolve(undefined);\n        });\n    } catch (ex) {\n      console.error(ex);\n      resolve(undefined);\n    }\n  });\n};\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a AccountsProvider`);\n  }\n  return context.entries;\n}\n\nexport function useAccountInfo(\n  address: string | undefined\n): Cache.CacheEntry<Account> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccountInfo must be used within a AccountsProvider`);\n  }\n  if (address === undefined) return;\n  return context.entries[address];\n}\n\nexport function useMintAccountInfo(\n  address: string | undefined\n): MintAccountInfo | undefined {\n  const accountInfo = useAccountInfo(address);\n  return React.useMemo(() => {\n    if (address === undefined) return;\n\n    try {\n      const data = accountInfo?.data?.details?.data;\n      if (!data) return;\n      if (data.program !== \"spl-token\" || data.parsed.type !== \"mint\") {\n        return;\n      }\n\n      return create(data.parsed.info, MintAccountInfo);\n    } catch (err) {\n      reportError(err, { address });\n    }\n  }, [address, accountInfo]);\n}\n\nexport function useTokenAccountInfo(\n  address: string | undefined\n): TokenAccountInfo | undefined {\n  const accountInfo = useAccountInfo(address);\n  if (address === undefined) return;\n\n  try {\n    const data = accountInfo?.data?.details?.data;\n    if (!data) return;\n    if (data.program !== \"spl-token\" || data.parsed.type !== \"account\") {\n      return;\n    }\n\n    return create(data.parsed.info, TokenAccountInfo);\n  } catch (err) {\n    reportError(err, { address });\n  }\n}\n\nexport function useFetchAccountInfo() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchAccountInfo must be used within a AccountsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchAccountInfo(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","import React, { ReactNode, useState } from \"react\";\n\ntype CopyState = \"copy\" | \"copied\" | \"errored\";\n\nexport function Copyable({\n  text,\n  children,\n  replaceText,\n}: {\n  text: string;\n  children: ReactNode;\n  replaceText?: boolean;\n}) {\n  const [state, setState] = useState<CopyState>(\"copy\");\n\n  const handleClick = async () => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setState(\"copied\");\n    } catch (err) {\n      setState(\"errored\");\n    }\n    setTimeout(() => setState(\"copy\"), 1000);\n  };\n\n  function CopyIcon() {\n    if (state === \"copy\") {\n      return (\n        <span className=\"fe fe-copy c-pointer\" onClick={handleClick}></span>\n      );\n    } else if (state === \"copied\") {\n      return <span className=\"fe fe-check-circle\"></span>;\n    } else if (state === \"errored\") {\n      return (\n        <span\n          className=\"fe fe-x-circle\"\n          title=\"Please check your browser's copy permissions.\"\n        ></span>\n      );\n    }\n    return null;\n  }\n\n  let message: string | undefined;\n  let textColor = \"\";\n  if (state === \"copied\") {\n    message = \"Copied\";\n    textColor = \"text-info\";\n  } else if (state === \"errored\") {\n    message = \"Copy Failed\";\n    textColor = \"text-danger\";\n  }\n\n  function PrependCopyIcon() {\n    return (\n      <>\n        <span className=\"font-size-tiny me-2\">\n          <span className={textColor}>\n            {message !== undefined && <span className=\"me-2\">{message}</span>}\n            <CopyIcon />\n          </span>\n        </span>\n        {children}\n      </>\n    );\n  }\n\n  function ReplaceWithMessage() {\n    return (\n      <span className=\"d-flex flex-column flex-nowrap\">\n        <span className=\"font-size-tiny\">\n          <span className={textColor}>\n            <CopyIcon />\n            <span className=\"ms-2\">{message}</span>\n          </span>\n        </span>\n        <span className=\"v-hidden\">{children}</span>\n      </span>\n    );\n  }\n\n  if (state === \"copy\") {\n    return <PrependCopyIcon />;\n  } else if (replaceText) {\n    return <ReplaceWithMessage />;\n  }\n\n  return (\n    <>\n      <span className=\"d-none d-lg-inline\">\n        <PrependCopyIcon />\n      </span>\n      <span className=\"d-inline d-lg-none\">\n        <ReplaceWithMessage />\n      </span>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { clusterPath } from \"utils/url\";\nimport { displayAddress } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\nimport { Copyable } from \"./Copyable\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { useState, useEffect } from \"react\";\nimport { Connection, programs } from \"@metaplex/js\";\nimport { useCustomAddressLabels } from \"../../amman\";\n\ntype Props = {\n  pubkey: PublicKey;\n  alignRight?: boolean;\n  link?: boolean;\n  raw?: boolean;\n  truncate?: boolean;\n  truncateUnknown?: boolean;\n  truncateChars?: number;\n  useMetadata?: boolean;\n};\n\nexport function Address({\n  pubkey,\n  alignRight,\n  link,\n  raw,\n  truncate,\n  truncateUnknown,\n  truncateChars,\n  useMetadata,\n}: Props) {\n  const address = pubkey.toBase58();\n  const { tokenRegistry } = useTokenRegistry();\n  const { cluster } = useCluster();\n  const [customAddressLabels] = useCustomAddressLabels();\n\n  if (\n    truncateUnknown &&\n    address ===\n      displayAddress(address, cluster, tokenRegistry, customAddressLabels)\n  ) {\n    truncate = true;\n  }\n\n  const displayLabel = displayAddress(\n    address,\n    cluster,\n    tokenRegistry,\n    customAddressLabels\n  );\n  let addressLabel = raw ? address : displayLabel;\n  if (addressLabel !== displayLabel) {\n    addressLabel = `${displayLabel} (${addressLabel})`;\n    document.title = displayLabel;\n  }\n\n  var metaplexData = useTokenMetadata(useMetadata, address);\n  if (metaplexData && metaplexData.data)\n    addressLabel = metaplexData.data.data.name;\n  if (truncateChars && addressLabel === address) {\n    addressLabel = addressLabel.slice(0, truncateChars) + \"…\";\n  }\n\n  const content = (\n    <Copyable text={address} replaceText={!alignRight}>\n      <span className=\"font-monospace\">\n        {link ? (\n          <Link\n            className={truncate ? \"text-truncate address-truncate\" : \"\"}\n            to={clusterPath(`/address/${address}`)}\n          >\n            {addressLabel}\n          </Link>\n        ) : (\n          <span className={truncate ? \"text-truncate address-truncate\" : \"\"}>\n            {addressLabel}\n          </span>\n        )}\n      </span>\n    </Copyable>\n  );\n\n  return (\n    <>\n      <div\n        className={`d-none d-lg-flex align-items-center ${\n          alignRight ? \"justify-content-end\" : \"\"\n        }`}\n      >\n        {content}\n      </div>\n      <div className=\"d-flex d-lg-none align-items-center\">{content}</div>\n    </>\n  );\n}\nexport const useTokenMetadata = (\n  useMetadata: boolean | undefined,\n  pubkey: string\n) => {\n  const [data, setData] = useState<programs.metadata.MetadataData>();\n  var { url } = useCluster();\n\n  useEffect(() => {\n    if (!useMetadata) return;\n    if (pubkey && !data) {\n      programs.metadata.Metadata.getPDA(pubkey)\n        .then((pda) => {\n          const connection = new Connection(url);\n          programs.metadata.Metadata.load(connection, pda)\n            .then((metadata) => {\n              setData(metadata.data);\n            })\n            .catch(() => {\n              setData(undefined);\n            });\n        })\n        .catch(() => {\n          setData(undefined);\n        });\n    }\n  }, [useMetadata, pubkey, url, data, setData]);\n  return { data };\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\nimport { Copyable } from \"./Copyable\";\n\ntype Props = {\n  epoch: number;\n  link?: boolean;\n};\nexport function Epoch({ epoch, link }: Props) {\n  return (\n    <span className=\"font-monospace\">\n      {link ? (\n        <Copyable text={epoch.toString()}>\n          <Link to={clusterPath(`/epoch/${epoch}`)}>\n            {epoch.toLocaleString(\"en-US\")}\n          </Link>\n        </Copyable>\n      ) : (\n        epoch.toLocaleString(\"en-US\")\n      )}\n    </span>\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { SolBalance } from \"utils\";\nimport { displayTimestampUtc } from \"utils/date\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { Address } from \"components/common/Address\";\nimport {\n  StakeAccountInfo,\n  StakeMeta,\n  StakeAccountType,\n} from \"validators/accounts/stake\";\nimport BN from \"bn.js\";\nimport { StakeActivationData } from \"@solana/web3.js\";\nimport { Epoch } from \"components/common/Epoch\";\n\nconst MAX_EPOCH = new BN(2).pow(new BN(64)).sub(new BN(1));\n\nexport function StakeAccountSection({\n  account,\n  stakeAccount,\n  activation,\n  stakeAccountType,\n}: {\n  account: Account;\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n  activation?: StakeActivationData;\n}) {\n  const hideDelegation =\n    stakeAccountType !== \"delegated\" ||\n    isFullyInactivated(stakeAccount, activation);\n  return (\n    <>\n      <LockupCard stakeAccount={stakeAccount} />\n      <OverviewCard\n        account={account}\n        stakeAccount={stakeAccount}\n        stakeAccountType={stakeAccountType}\n        activation={activation}\n        hideDelegation={hideDelegation}\n      />\n      {!hideDelegation && (\n        <DelegationCard\n          stakeAccount={stakeAccount}\n          activation={activation}\n          stakeAccountType={stakeAccountType}\n        />\n      )}\n      <AuthoritiesCard meta={stakeAccount.meta} />\n    </>\n  );\n}\n\nfunction LockupCard({ stakeAccount }: { stakeAccount: StakeAccountInfo }) {\n  const unixTimestamp = 1000 * (stakeAccount.meta?.lockup.unixTimestamp || 0);\n  if (Date.now() < unixTimestamp) {\n    const prettyTimestamp = displayTimestampUtc(unixTimestamp);\n    return (\n      <div className=\"alert alert-warning text-center\">\n        <strong>Account is locked!</strong> Lockup expires on {prettyTimestamp}\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nconst TYPE_NAMES = {\n  uninitialized: \"Uninitialized\",\n  initialized: \"Initialized\",\n  delegated: \"Delegated\",\n  rewardsPool: \"RewardsPool\",\n};\n\nfunction displayStatus(\n  stakeAccountType: StakeAccountType,\n  activation?: StakeActivationData\n) {\n  let status = TYPE_NAMES[stakeAccountType];\n  let activationState = \"\";\n  if (stakeAccountType !== \"delegated\") {\n    status = \"Not delegated\";\n  } else {\n    activationState = activation ? `(${activation.state})` : \"\";\n  }\n\n  return [status, activationState].join(\" \");\n}\n\nfunction OverviewCard({\n  account,\n  stakeAccount,\n  stakeAccountType,\n  activation,\n  hideDelegation,\n}: {\n  account: Account;\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n  activation?: StakeActivationData;\n  hideDelegation: boolean;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Stake Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw me-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Balance (SOL)</td>\n          <td className=\"text-lg-end text-uppercase\">\n            <SolBalance lamports={account.lamports || 0} />\n          </td>\n        </tr>\n        <tr>\n          <td>Rent Reserve (SOL)</td>\n          <td className=\"text-lg-end\">\n            <SolBalance lamports={stakeAccount.meta.rentExemptReserve} />\n          </td>\n        </tr>\n        {hideDelegation && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-end\">\n              {isFullyInactivated(stakeAccount, activation)\n                ? \"Not delegated\"\n                : displayStatus(stakeAccountType, activation)}\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction DelegationCard({\n  stakeAccount,\n  stakeAccountType,\n  activation,\n}: {\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n  activation?: StakeActivationData;\n}) {\n  let voterPubkey, activationEpoch, deactivationEpoch;\n  const delegation = stakeAccount?.stake?.delegation;\n  if (delegation) {\n    voterPubkey = delegation.voter;\n    if (!delegation.activationEpoch.eq(MAX_EPOCH)) {\n      activationEpoch = delegation.activationEpoch.toNumber();\n    }\n    if (!delegation.deactivationEpoch.eq(MAX_EPOCH)) {\n      deactivationEpoch = delegation.deactivationEpoch.toNumber();\n    }\n  }\n  const { stake } = stakeAccount;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Stake Delegation\n        </h3>\n      </div>\n      <TableCardBody>\n        <tr>\n          <td>Status</td>\n          <td className=\"text-lg-end\">\n            {displayStatus(stakeAccountType, activation)}\n          </td>\n        </tr>\n\n        {stake && (\n          <>\n            <tr>\n              <td>Delegated Stake (SOL)</td>\n              <td className=\"text-lg-end\">\n                <SolBalance lamports={stake.delegation.stake} />\n              </td>\n            </tr>\n\n            {activation && (\n              <>\n                <tr>\n                  <td>Active Stake (SOL)</td>\n                  <td className=\"text-lg-end\">\n                    <SolBalance lamports={activation.active} />\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>Inactive Stake (SOL)</td>\n                  <td className=\"text-lg-end\">\n                    <SolBalance lamports={activation.inactive} />\n                  </td>\n                </tr>\n              </>\n            )}\n\n            {voterPubkey && (\n              <tr>\n                <td>Delegated Vote Address</td>\n                <td className=\"text-lg-end\">\n                  <Address pubkey={voterPubkey} alignRight link />\n                </td>\n              </tr>\n            )}\n\n            <tr>\n              <td>Activation Epoch</td>\n              <td className=\"text-lg-end\">\n                {activationEpoch !== undefined ? (\n                  <Epoch epoch={activationEpoch} link />\n                ) : (\n                  \"-\"\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Deactivation Epoch</td>\n              <td className=\"text-lg-end\">\n                {deactivationEpoch !== undefined ? (\n                  <Epoch epoch={deactivationEpoch} link />\n                ) : (\n                  \"-\"\n                )}\n              </td>\n            </tr>\n          </>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction AuthoritiesCard({ meta }: { meta: StakeMeta }) {\n  const hasLockup = meta.lockup.unixTimestamp > 0;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Authorities\n        </h3>\n      </div>\n      <TableCardBody>\n        <tr>\n          <td>Stake Authority Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={meta.authorized.staker} alignRight link />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Withdraw Authority Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={meta.authorized.withdrawer} alignRight link />\n          </td>\n        </tr>\n\n        {hasLockup && (\n          <tr>\n            <td>Lockup Authority Address</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={meta.lockup.custodian} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction isFullyInactivated(\n  stakeAccount: StakeAccountInfo,\n  activation?: StakeActivationData\n): boolean {\n  const { stake } = stakeAccount;\n\n  if (!stake || !activation) {\n    return false;\n  }\n\n  const delegatedStake = stake.delegation.stake.toNumber();\n  const inactiveStake = activation.inactive;\n\n  return (\n    !stake.delegation.deactivationEpoch.eq(MAX_EPOCH) &&\n    delegatedStake === inactiveStake\n  );\n}\n","import React from \"react\";\nimport { Account } from \"providers/accounts\";\nimport { SolBalance } from \"utils\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { addressLabel } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\n\nexport function UnknownAccountCard({ account }: { account: Account }) {\n  const { details, lamports } = account;\n  const { cluster } = useCluster();\n  const { tokenRegistry } = useTokenRegistry();\n  if (lamports === undefined) return null;\n\n  const label = addressLabel(account.pubkey.toBase58(), cluster, tokenRegistry);\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Overview</h3>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {label && (\n          <tr>\n            <td>Address Label</td>\n            <td className=\"text-lg-end\">{label}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Balance (SOL)</td>\n          <td className=\"text-lg-end\">\n            <SolBalance lamports={lamports} />\n          </td>\n        </tr>\n\n        {details?.space !== undefined && (\n          <tr>\n            <td>Allocated Data Size</td>\n            <td className=\"text-lg-end\">{details.space} byte(s)</td>\n          </tr>\n        )}\n\n        {details && (\n          <tr>\n            <td>Assigned Program Id</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={details.owner} alignRight link />\n            </td>\n          </tr>\n        )}\n\n        {details && (\n          <tr>\n            <td>Executable</td>\n            <td className=\"text-lg-end\">{details.executable ? \"Yes\" : \"No\"}</td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\n// @ts-ignore\nimport * as CoinGecko from \"coingecko-api\";\n\nconst PRICE_REFRESH = 10000;\n\nconst CoinGeckoClient = new CoinGecko();\n\nexport enum CoingeckoStatus {\n  Success,\n  FetchFailed,\n  Loading,\n}\n\nexport interface CoinInfo {\n  price: number;\n  volume_24: number;\n  market_cap: number;\n  price_change_percentage_24h: number;\n  market_cap_rank: number;\n  last_updated: Date;\n}\n\nexport interface CoinInfoResult {\n  data: {\n    market_data: {\n      current_price: {\n        usd: number;\n      };\n      total_volume: {\n        usd: number;\n      };\n      market_cap: {\n        usd: number;\n      };\n      price_change_percentage_24h: number;\n      market_cap_rank: number;\n    };\n    last_updated: string;\n  };\n}\n\nexport type CoinGeckoResult = {\n  coinInfo?: CoinInfo;\n  status: CoingeckoStatus;\n};\n\nexport function useCoinGecko(coinId?: string): CoinGeckoResult | undefined {\n  const [coinInfo, setCoinInfo] = React.useState<CoinGeckoResult>();\n  React.useEffect(() => {\n    let interval: NodeJS.Timeout | undefined;\n    if (coinId) {\n      const getCoinInfo = (refresh = false) => {\n        if (!refresh) {\n          setCoinInfo({\n            status: CoingeckoStatus.Loading,\n          });\n        }\n        CoinGeckoClient.coins\n          .fetch(coinId)\n          .then((info: CoinInfoResult) => {\n            setCoinInfo({\n              coinInfo: {\n                price: info.data.market_data.current_price.usd,\n                volume_24: info.data.market_data.total_volume.usd,\n                market_cap: info.data.market_data.market_cap.usd,\n                market_cap_rank: info.data.market_data.market_cap_rank,\n                price_change_percentage_24h:\n                  info.data.market_data.price_change_percentage_24h,\n                last_updated: new Date(info.data.last_updated),\n              },\n              status: CoingeckoStatus.Success,\n            });\n          })\n          .catch((error: any) => {\n            setCoinInfo({\n              status: CoingeckoStatus.FetchFailed,\n            });\n          });\n      };\n\n      getCoinInfo();\n      interval = setInterval(() => {\n        getCoinInfo(true);\n      }, PRICE_REFRESH);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [setCoinInfo, coinId]);\n\n  return coinInfo;\n}\n","import React from \"react\";\n\nexport function LoadingCard({ message }: { message?: string }) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body text-center\">\n        <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n        {message || \"Loading\"}\n      </div>\n    </div>\n  );\n}\n","import { MintAccountInfo } from \"validators/accounts/token\";\nimport { ProgramData } from \"..\";\n\nexport default function isMetaplexNFT(\n  data?: ProgramData,\n  mintInfo?: MintAccountInfo\n) {\n  return (\n    data?.program === \"spl-token\" &&\n    data?.parsed.type === \"mint\" &&\n    data?.nftData &&\n    mintInfo?.decimals === 0 &&\n    parseInt(mintInfo.supply) === 1\n  );\n}\n","import {\n  Account,\n  NFTData,\n  TokenProgramData,\n  useFetchAccountInfo,\n} from \"providers/accounts\";\nimport {\n  TokenAccount,\n  MintAccountInfo,\n  TokenAccountInfo,\n  MultisigAccountInfo,\n} from \"validators/accounts/token\";\nimport { create } from \"superstruct\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { UnknownAccountCard } from \"./UnknownAccountCard\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport { abbreviatedNumber, normalizeTokenAmount } from \"utils\";\nimport { addressLabel } from \"utils/tx\";\nimport { reportError } from \"utils/sentry\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { CoingeckoStatus, useCoinGecko } from \"utils/coingecko\";\nimport { displayTimestampWithoutDate } from \"utils/date\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport isMetaplexNFT from \"providers/accounts/utils/isMetaplexNFT\";\n\nconst getEthAddress = (link?: string) => {\n  let address = \"\";\n  if (link) {\n    const extractEth = link.match(/0x[a-fA-F0-9]{40,64}/);\n\n    if (extractEth) {\n      address = extractEth[0];\n    }\n  }\n\n  return address;\n};\n\nexport function TokenAccountSection({\n  account,\n  tokenAccount,\n}: {\n  account: Account;\n  tokenAccount: TokenAccount;\n}) {\n  const { cluster } = useCluster();\n\n  try {\n    switch (tokenAccount.type) {\n      case \"mint\": {\n        const info = create(tokenAccount.info, MintAccountInfo);\n\n        if (isMetaplexNFT(account.details?.data, info)) {\n          return (\n            <NonFungibleTokenMintAccountCard\n              account={account}\n              nftData={(account.details!.data as TokenProgramData).nftData!}\n              mintInfo={info}\n            />\n          );\n        }\n\n        return <FungibleTokenMintAccountCard account={account} info={info} />;\n      }\n      case \"account\": {\n        const info = create(tokenAccount.info, TokenAccountInfo);\n        return <TokenAccountCard account={account} info={info} />;\n      }\n      case \"multisig\": {\n        const info = create(tokenAccount.info, MultisigAccountInfo);\n        return <MultisigAccountCard account={account} info={info} />;\n      }\n    }\n  } catch (err) {\n    if (cluster !== Cluster.Custom) {\n      reportError(err, {\n        address: account.pubkey.toBase58(),\n      });\n    }\n  }\n  return <UnknownAccountCard account={account} />;\n}\n\nfunction FungibleTokenMintAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: MintAccountInfo;\n}) {\n  const { tokenRegistry } = useTokenRegistry();\n  const mintAddress = account.pubkey.toBase58();\n  const fetchInfo = useFetchAccountInfo();\n  const refresh = () => fetchInfo(account.pubkey);\n  const tokenInfo = tokenRegistry.get(mintAddress);\n\n  const bridgeContractAddress = getEthAddress(\n    tokenInfo?.extensions?.bridgeContract\n  );\n  const assetContractAddress = getEthAddress(\n    tokenInfo?.extensions?.assetContract\n  );\n\n  const coinInfo = useCoinGecko(tokenInfo?.extensions?.coingeckoId);\n\n  let tokenPriceInfo;\n  let tokenPriceDecimals = 2;\n  if (coinInfo?.status === CoingeckoStatus.Success) {\n    tokenPriceInfo = coinInfo.coinInfo;\n    if (tokenPriceInfo && tokenPriceInfo.price < 1) {\n      tokenPriceDecimals = 6;\n    }\n  }\n\n  return (\n    <>\n      {tokenInfo?.extensions?.coingeckoId &&\n        coinInfo?.status === CoingeckoStatus.Loading && (\n          <LoadingCard message=\"Loading token price data\" />\n        )}\n      {tokenPriceInfo && tokenPriceInfo.price && (\n        <div className=\"row\">\n          <div className=\"col-12 col-lg-4 col-xl\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4>\n                  Price{\" \"}\n                  {tokenPriceInfo.market_cap_rank && (\n                    <span className=\"ms-2 badge bg-primary rank\">\n                      Rank #{tokenPriceInfo.market_cap_rank}\n                    </span>\n                  )}\n                </h4>\n                <h1 className=\"mb-0\">\n                  ${tokenPriceInfo.price.toFixed(tokenPriceDecimals)}{\" \"}\n                  {tokenPriceInfo.price_change_percentage_24h > 0 && (\n                    <small className=\"change-positive\">\n                      &uarr;{\" \"}\n                      {tokenPriceInfo.price_change_percentage_24h.toFixed(2)}%\n                    </small>\n                  )}\n                  {tokenPriceInfo.price_change_percentage_24h < 0 && (\n                    <small className=\"change-negative\">\n                      &darr;{\" \"}\n                      {tokenPriceInfo.price_change_percentage_24h.toFixed(2)}%\n                    </small>\n                  )}\n                  {tokenPriceInfo.price_change_percentage_24h === 0 && (\n                    <small>0%</small>\n                  )}\n                </h1>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-4 col-xl\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4>24 Hour Volume</h4>\n                <h1 className=\"mb-0\">\n                  ${abbreviatedNumber(tokenPriceInfo.volume_24)}\n                </h1>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-4 col-xl\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4>Market Cap</h4>\n                <h1 className=\"mb-0\">\n                  ${abbreviatedNumber(tokenPriceInfo.market_cap)}\n                </h1>\n                <p className=\"updated-time text-muted\">\n                  Updated at{\" \"}\n                  {displayTimestampWithoutDate(\n                    tokenPriceInfo.last_updated.getTime()\n                  )}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n            {tokenInfo ? \"Overview\" : \"Token Mint\"}\n          </h3>\n          <button className=\"btn btn-white btn-sm\" onClick={refresh}>\n            <span className=\"fe fe-refresh-cw me-2\"></span>\n            Refresh\n          </button>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td>Address</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={account.pubkey} alignRight raw />\n            </td>\n          </tr>\n          <tr>\n            <td>\n              {info.mintAuthority === null ? \"Fixed Supply\" : \"Current Supply\"}\n            </td>\n            <td className=\"text-lg-end\">\n              {normalizeTokenAmount(info.supply, info.decimals).toLocaleString(\n                \"en-US\",\n                {\n                  minimumFractionDigits: info.decimals,\n                }\n              )}\n            </td>\n          </tr>\n          {tokenInfo?.extensions?.website && (\n            <tr>\n              <td>Website</td>\n              <td className=\"text-lg-end\">\n                <a\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  href={tokenInfo.extensions.website}\n                >\n                  {tokenInfo.extensions.website}\n                  <span className=\"fe fe-external-link ms-2\"></span>\n                </a>\n              </td>\n            </tr>\n          )}\n          {info.mintAuthority && (\n            <tr>\n              <td>Mint Authority</td>\n              <td className=\"text-lg-end\">\n                <Address pubkey={info.mintAuthority} alignRight link />\n              </td>\n            </tr>\n          )}\n          {info.freezeAuthority && (\n            <tr>\n              <td>Freeze Authority</td>\n              <td className=\"text-lg-end\">\n                <Address pubkey={info.freezeAuthority} alignRight link />\n              </td>\n            </tr>\n          )}\n          <tr>\n            <td>Decimals</td>\n            <td className=\"text-lg-end\">{info.decimals}</td>\n          </tr>\n          {!info.isInitialized && (\n            <tr>\n              <td>Status</td>\n              <td className=\"text-lg-end\">Uninitialized</td>\n            </tr>\n          )}\n          {tokenInfo?.extensions?.bridgeContract && bridgeContractAddress && (\n            <tr>\n              <td>Bridge Contract</td>\n              <td className=\"text-lg-end\">\n                <Copyable text={bridgeContractAddress}>\n                  <a\n                    href={tokenInfo.extensions.bridgeContract}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {bridgeContractAddress}\n                  </a>\n                </Copyable>\n              </td>\n            </tr>\n          )}\n          {tokenInfo?.extensions?.assetContract && assetContractAddress && (\n            <tr>\n              <td>Bridged Asset Contract</td>\n              <td className=\"text-lg-end\">\n                <Copyable text={assetContractAddress}>\n                  <a\n                    href={tokenInfo.extensions.bridgeContract}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {assetContractAddress}\n                  </a>\n                </Copyable>\n              </td>\n            </tr>\n          )}\n        </TableCardBody>\n      </div>\n    </>\n  );\n}\n\nfunction NonFungibleTokenMintAccountCard({\n  account,\n  nftData,\n  mintInfo,\n}: {\n  account: Account;\n  nftData: NFTData;\n  mintInfo: MintAccountInfo;\n}) {\n  const fetchInfo = useFetchAccountInfo();\n  const refresh = () => fetchInfo(account.pubkey);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Overview\n        </h3>\n        <button className=\"btn btn-white btn-sm\" onClick={refresh}>\n          <span className=\"fe fe-refresh-cw me-2\"></span>\n          Refresh\n        </button>\n      </div>\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {nftData.editionInfo.masterEdition?.maxSupply && (\n          <tr>\n            <td>Max Total Supply</td>\n            <td className=\"text-lg-end\">\n              {nftData.editionInfo.masterEdition.maxSupply.toNumber() === 0\n                ? 1\n                : nftData.editionInfo.masterEdition.maxSupply.toNumber()}\n            </td>\n          </tr>\n        )}\n        {nftData?.editionInfo.masterEdition?.supply && (\n          <tr>\n            <td>Current Supply</td>\n            <td className=\"text-lg-end\">\n              {nftData.editionInfo.masterEdition.supply.toNumber() === 0\n                ? 1\n                : nftData.editionInfo.masterEdition.supply.toNumber()}\n            </td>\n          </tr>\n        )}\n        {mintInfo.mintAuthority && (\n          <tr>\n            <td>Mint Authority</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={mintInfo.mintAuthority} alignRight link />\n            </td>\n          </tr>\n        )}\n        <tr>\n          <td>Update Authority</td>\n          <td className=\"text-lg-end\">\n            <Address\n              pubkey={new PublicKey(nftData.metadata.updateAuthority)}\n              alignRight\n              link\n            />\n          </td>\n        </tr>\n        {nftData?.json && nftData.json.external_url && (\n          <tr>\n            <td>Website</td>\n            <td className=\"text-lg-end\">\n              <a\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n                href={nftData.json.external_url}\n              >\n                {nftData.json.external_url}\n                <span className=\"fe fe-external-link ms-2\"></span>\n              </a>\n            </td>\n          </tr>\n        )}\n        {nftData?.metadata.data && (\n          <tr>\n            <td>Seller Fee</td>\n            <td className=\"text-lg-end\">\n              {`${nftData?.metadata.data.sellerFeeBasisPoints / 100}%`}\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction TokenAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: TokenAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  const { cluster } = useCluster();\n  const { tokenRegistry } = useTokenRegistry();\n  const label = addressLabel(account.pubkey.toBase58(), cluster, tokenRegistry);\n\n  let unit, balance;\n  if (info.isNative) {\n    unit = \"SOL\";\n    balance = (\n      <>\n        ◎\n        <span className=\"font-monospace\">\n          {new BigNumber(info.tokenAmount.uiAmountString).toFormat(9)}\n        </span>\n      </>\n    );\n  } else {\n    balance = <>{info.tokenAmount.uiAmountString}</>;\n    unit = tokenRegistry.get(info.mint.toBase58())?.symbol || \"tokens\";\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Token Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw me-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {label && (\n          <tr>\n            <td>Address Label</td>\n            <td className=\"text-lg-end\">{label}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Mint</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={info.mint} alignRight link />\n          </td>\n        </tr>\n        <tr>\n          <td>Owner</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={info.owner} alignRight link />\n          </td>\n        </tr>\n        <tr>\n          <td>Token balance ({unit})</td>\n          <td className=\"text-lg-end\">{balance}</td>\n        </tr>\n        {info.state === \"uninitialized\" && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-end\">Uninitialized</td>\n          </tr>\n        )}\n        {info.rentExemptReserve && (\n          <tr>\n            <td>Rent-exempt reserve (SOL)</td>\n            <td className=\"text-lg-end\">\n              <>\n                ◎\n                <span className=\"font-monospace\">\n                  {new BigNumber(\n                    info.rentExemptReserve.uiAmountString\n                  ).toFormat(9)}\n                </span>\n              </>\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction MultisigAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: MultisigAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Multisig Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw me-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Required Signers</td>\n          <td className=\"text-lg-end\">{info.numRequiredSigners}</td>\n        </tr>\n        <tr>\n          <td>Valid Signers</td>\n          <td className=\"text-lg-end\">{info.numValidSigners}</td>\n        </tr>\n        {info.signers.map((signer) => (\n          <tr key={signer.toString()}>\n            <td>Signer</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={signer} alignRight link />\n            </td>\n          </tr>\n        ))}\n        {!info.isInitialized && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-end\">Uninitialized</td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function ErrorCard({\n  retry,\n  retryText,\n  text,\n  subtext,\n}: {\n  retry?: () => void;\n  retryText?: string;\n  text: string;\n  subtext?: string;\n}) {\n  const buttonText = retryText || \"Try Again\";\n  return (\n    <div className=\"card\">\n      <div className=\"card-body text-center\">\n        {text}\n        {retry && (\n          <>\n            <span\n              className=\"btn btn-white ms-3 d-none d-md-inline\"\n              onClick={retry}\n            >\n              {buttonText}\n            </span>\n            <div className=\"d-block d-md-none mt-4\">\n              <span className=\"btn btn-white w-100\" onClick={retry}>\n                {buttonText}\n              </span>\n            </div>\n            {subtext && (\n              <div className=\"text-muted\">\n                <hr></hr>\n                {subtext}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\n// @ts-ignore\nimport Jazzicon from \"@metamask/jazzicon\";\nimport bs58 from \"bs58\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport function Identicon(props: {\n  address?: string | PublicKey;\n  style?: React.CSSProperties;\n  className?: string;\n}) {\n  const { style, className } = props;\n  const address =\n    typeof props.address === \"string\"\n      ? props.address\n      : props.address?.toBase58();\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.className = className || \"\";\n      ref.current.appendChild(\n        Jazzicon(\n          style?.width || 16,\n          parseInt(bs58.decode(address).toString(\"hex\").slice(5, 15), 16)\n        )\n      );\n    }\n  }, [address, style, className]);\n\n  return <div className=\"identicon-wrapper\" ref={ref} style={props.style} />;\n}\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { FetchStatus } from \"providers/cache\";\nimport {\n  useFetchAccountOwnedTokens,\n  useAccountOwnedTokens,\n  TokenInfoWithPubkey,\n} from \"providers/accounts/tokens\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Address } from \"components/common/Address\";\nimport { useQuery } from \"utils/url\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Identicon } from \"components/common/Identicon\";\n\ntype Display = \"summary\" | \"detail\" | null;\n\nconst SMALL_IDENTICON_WIDTH = 16;\n\nconst useQueryDisplay = (): Display => {\n  const query = useQuery();\n  const filter = query.get(\"display\");\n  if (filter === \"summary\" || filter === \"detail\") {\n    return filter;\n  } else {\n    return null;\n  }\n};\n\nexport function OwnedTokensCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const ownedTokens = useAccountOwnedTokens(address);\n  const fetchAccountTokens = useFetchAccountOwnedTokens();\n  const refresh = () => fetchAccountTokens(pubkey);\n  const [showDropdown, setDropdown] = React.useState(false);\n  const display = useQueryDisplay();\n\n  // Fetch owned tokens\n  React.useEffect(() => {\n    if (!ownedTokens) refresh();\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (ownedTokens === undefined) {\n    return null;\n  }\n\n  const { status } = ownedTokens;\n  const tokens = ownedTokens.data?.tokens;\n  const fetching = status === FetchStatus.Fetching;\n  if (fetching && (tokens === undefined || tokens.length === 0)) {\n    return <LoadingCard message=\"Loading token holdings\" />;\n  } else if (tokens === undefined) {\n    return <ErrorCard retry={refresh} text=\"Failed to fetch token holdings\" />;\n  }\n\n  if (tokens.length === 0) {\n    return (\n      <ErrorCard\n        retry={refresh}\n        retryText=\"Try Again\"\n        text={\"No token holdings found\"}\n      />\n    );\n  }\n\n  return (\n    <>\n      {showDropdown && (\n        <div className=\"dropdown-exit\" onClick={() => setDropdown(false)} />\n      )}\n\n      <div className=\"card\">\n        <div className=\"card-header align-items-center\">\n          <h3 className=\"card-header-title\">Token Holdings</h3>\n          <DisplayDropdown\n            display={display}\n            toggle={() => setDropdown((show) => !show)}\n            show={showDropdown}\n          />\n        </div>\n        {display === \"detail\" ? (\n          <HoldingsDetailTable tokens={tokens} />\n        ) : (\n          <HoldingsSummaryTable tokens={tokens} />\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction HoldingsDetailTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const detailsList: React.ReactNode[] = [];\n  const { tokenRegistry } = useTokenRegistry();\n  const showLogos = tokens.some(\n    (t) => tokenRegistry.get(t.info.mint.toBase58())?.logoURI !== undefined\n  );\n  tokens.forEach((tokenAccount) => {\n    const address = tokenAccount.pubkey.toBase58();\n    const mintAddress = tokenAccount.info.mint.toBase58();\n    const tokenDetails = tokenRegistry.get(mintAddress);\n    detailsList.push(\n      <tr key={address}>\n        {showLogos && (\n          <td className=\"w-1 p-0 text-center\">\n            {tokenDetails?.logoURI ? (\n              <img\n                src={tokenDetails.logoURI}\n                alt=\"token icon\"\n                className=\"token-icon rounded-circle border border-4 border-gray-dark\"\n              />\n            ) : (\n              <Identicon\n                address={address}\n                className=\"avatar-img identicon-wrapper identicon-wrapper-small\"\n                style={{ width: SMALL_IDENTICON_WIDTH }}\n              />\n            )}\n          </td>\n        )}\n        <td>\n          <Address pubkey={tokenAccount.pubkey} link truncate />\n        </td>\n        <td>\n          <Address pubkey={tokenAccount.info.mint} link truncate />\n        </td>\n        <td>\n          {tokenAccount.info.tokenAmount.uiAmountString}{\" \"}\n          {tokenDetails && tokenDetails.symbol}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <thead>\n          <tr>\n            {showLogos && (\n              <th className=\"text-muted w-1 p-0 text-center\">Logo</th>\n            )}\n            <th className=\"text-muted\">Account Address</th>\n            <th className=\"text-muted\">Mint Address</th>\n            <th className=\"text-muted\">Balance</th>\n          </tr>\n        </thead>\n        <tbody className=\"list\">{detailsList}</tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction HoldingsSummaryTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const { tokenRegistry } = useTokenRegistry();\n  const mappedTokens = new Map<string, string>();\n  for (const { info: token } of tokens) {\n    const mintAddress = token.mint.toBase58();\n    const totalByMint = mappedTokens.get(mintAddress);\n\n    let amount = token.tokenAmount.uiAmountString;\n    if (totalByMint !== undefined) {\n      amount = new BigNumber(totalByMint)\n        .plus(token.tokenAmount.uiAmountString)\n        .toString();\n    }\n\n    mappedTokens.set(mintAddress, amount);\n  }\n\n  const detailsList: React.ReactNode[] = [];\n  const showLogos = tokens.some(\n    (t) => tokenRegistry.get(t.info.mint.toBase58())?.logoURI !== undefined\n  );\n  mappedTokens.forEach((totalByMint, mintAddress) => {\n    const tokenDetails = tokenRegistry.get(mintAddress);\n    detailsList.push(\n      <tr key={mintAddress}>\n        {showLogos && (\n          <td className=\"w-1 p-0 text-center\">\n            {tokenDetails?.logoURI ? (\n              <img\n                src={tokenDetails.logoURI}\n                alt=\"token icon\"\n                className=\"token-icon rounded-circle border border-4 border-gray-dark\"\n              />\n            ) : (\n              <Identicon\n                address={mintAddress}\n                className=\"avatar-img identicon-wrapper identicon-wrapper-small\"\n                style={{ width: SMALL_IDENTICON_WIDTH }}\n              />\n            )}\n          </td>\n        )}\n        <td>\n          <Address pubkey={new PublicKey(mintAddress)} link useMetadata />\n        </td>\n        <td>\n          {totalByMint} {tokenDetails && tokenDetails.symbol}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <thead>\n          <tr>\n            {showLogos && (\n              <th className=\"text-muted w-1 p-0 text-center\">Logo</th>\n            )}\n            <th className=\"text-muted\">Mint Address</th>\n            <th className=\"text-muted\">Total Balance</th>\n          </tr>\n        </thead>\n        <tbody className=\"list\">{detailsList}</tbody>\n      </table>\n    </div>\n  );\n}\n\ntype DropdownProps = {\n  display: Display;\n  toggle: () => void;\n  show: boolean;\n};\n\nconst DisplayDropdown = ({ display, toggle, show }: DropdownProps) => {\n  const buildLocation = (location: Location, display: Display) => {\n    const params = new URLSearchParams(location.search);\n    if (display === null) {\n      params.delete(\"display\");\n    } else {\n      params.set(\"display\", display);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const DISPLAY_OPTIONS: Display[] = [null, \"detail\"];\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {display === \"detail\" ? \"Detailed\" : \"Summary\"}\n      </button>\n      <div className={`dropdown-menu-end dropdown-menu${show ? \" show\" : \"\"}`}>\n        {DISPLAY_OPTIONS.map((displayOption) => {\n          return (\n            <Link\n              key={displayOption || \"null\"}\n              to={(location) => buildLocation(location, displayOption)}\n              className={`dropdown-item${\n                displayOption === display ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {displayOption === \"detail\" ? \"Detailed\" : \"Summary\"}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { TransactionSignature } from \"@solana/web3.js\";\nimport { clusterPath } from \"utils/url\";\nimport { Copyable } from \"./Copyable\";\n\ntype Props = {\n  signature: TransactionSignature;\n  alignRight?: boolean;\n  link?: boolean;\n  truncate?: boolean;\n  truncateChars?: number;\n  addressLabel?: string;\n};\n\nexport function Signature({\n  signature,\n  alignRight,\n  link,\n  truncate,\n  truncateChars,\n  addressLabel,\n}: Props) {\n  let signatureLabel = signature;\n\n  if (truncateChars) {\n    signatureLabel = signature.slice(0, truncateChars) + \"…\";\n  }\n  const signatureDisplay =\n    addressLabel == null ? (\n      <>{signatureLabel}</>\n    ) : (\n      <>\n        <span>{addressLabel}</span>\n        <span className=\"opacity-25 display-6 ms-3\">{signature}</span>\n      </>\n    );\n\n  return (\n    <div\n      className={`d-flex align-items-center ${\n        alignRight ? \"justify-content-end\" : \"\"\n      }`}\n    >\n      <Copyable text={signature} replaceText={!alignRight}>\n        <span className=\"font-monospace\">\n          {link ? (\n            <Link\n              className={truncate ? \"text-truncate signature-truncate\" : \"\"}\n              to={clusterPath(`/tx/${signature}`)}\n            >\n              {signatureDisplay}\n            </Link>\n          ) : (\n            signatureDisplay\n          )}\n        </span>\n      </Copyable>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\nimport { Copyable } from \"./Copyable\";\n\ntype Props = {\n  slot: number;\n  link?: boolean;\n};\nexport function Slot({ slot, link }: Props) {\n  return (\n    <span className=\"font-monospace\">\n      {link ? (\n        <Copyable text={slot.toString()}>\n          <Link to={clusterPath(`/block/${slot}`)}>\n            {slot.toLocaleString(\"en-US\")}\n          </Link>\n        </Copyable>\n      ) : (\n        slot.toLocaleString(\"en-US\")\n      )}\n    </span>\n  );\n}\n","import React from \"react\";\nimport {\n  Connection,\n  TransactionSignature,\n  ParsedConfirmedTransaction,\n} from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nexport interface Details {\n  transaction?: ParsedConfirmedTransaction | null;\n}\n\ntype State = Cache.State<Details>;\ntype Dispatch = Cache.Dispatch<Details>;\n\nexport const StateContext = React.createContext<State | undefined>(undefined);\nexport const DispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\n\ntype DetailsProviderProps = { children: React.ReactNode };\nexport function DetailsProvider({ children }: DetailsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Details>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchDetails(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: signature,\n    url,\n  });\n\n  let fetchStatus;\n  let transaction;\n  try {\n    transaction = await new Connection(url).getParsedConfirmedTransaction(\n      signature,\n      \"confirmed\"\n    );\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    key: signature,\n    data: { transaction },\n    url,\n  });\n}\n\nexport function useFetchTransactionDetails() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTransactionDetails must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      url && fetchDetails(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n\nexport function useTransactionDetails(\n  signature: TransactionSignature\n): Cache.CacheEntry<Details> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionDetails must be used within a TransactionsProvider`\n    );\n  }\n\n  return context.entries[signature];\n}\n\nexport type TransactionDetailsCache = {\n  [key: string]: Cache.CacheEntry<Details>;\n};\nexport function useTransactionDetailsCache(): TransactionDetailsCache {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionDetailsCache must be used within a TransactionsProvider`\n    );\n  }\n\n  return context.entries;\n}\n","import { TransactionInstruction } from \"@solana/web3.js\";\n\nexport const PROGRAM_IDS: string[] = [\n  \"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\", // mainnet / testnet / devnet\n  \"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\", // mainnet - legacy\n  \"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\", // testnet - legacy\n  \"9tdctNJuFsYZ6VrKfKEuwwbPp4SFdFw3jYBZU8QUtzeX\", // testnet - legacy\n  \"CrRvVBS4Hmj47TPU3cMukurpmCUYUrdHYxTQBxncBGqw\", // testnet - legacy\n  \"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\", // devnet - legacy\n  \"H1E1G7eD5Rrcy43xvDxXCsjkRggz7MWNMLGJ8YNzJ8PM\", // devnet - legacy\n  \"CMoteLxSPVPoc7Drcggf3QPg3ue8WPpxYyZTg77UGqHo\", // devnet - legacy\n  \"EEuPz4iZA5reBUeZj6x1VzoiHfYeHMppSCnHZasRFhYo\", // devnet - legacy\n  \"5rdpyt5iGfr68qt28hkefcFyF4WtyhTwqKDmHSBG8GZx\", // localnet\n];\n\nconst INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Swap\",\n  1: \"Swap\",\n  2: \"Deposit All Token Types\",\n  3: \"Withdraw All Token Types\",\n  4: \"Deposit Single Token Type Exact Amount In\",\n  5: \"Withdraw Single Token Type Exact Amount Out\",\n};\n\nexport function isTokenSwapInstruction(\n  instruction: TransactionInstruction\n): boolean {\n  return PROGRAM_IDS.includes(instruction.programId.toBase58());\n}\n\nexport function parseTokenSwapInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Token Swap instruction code: ${code}`);\n  }\n\n  return INSTRUCTION_LOOKUP[code];\n}\n","import { TransactionInstruction } from \"@solana/web3.js\";\n\nexport const PROGRAM_IDS: string[] = [\n  \"LendZqTs7gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi\", // mainnet / testnet / devnet\n];\n\nconst INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Lending Market\",\n  1: \"Initialize Reserve\",\n  2: \"Initialize Obligation\",\n  3: \"Reserve Deposit\",\n  4: \"Reserve Withdraw\",\n  5: \"Borrow\",\n  6: \"Repay Loan\",\n  7: \"Liquidate Loan\",\n  8: \"Accrue Interest\",\n};\n\nexport function isTokenLendingInstruction(\n  instruction: TransactionInstruction\n): boolean {\n  return PROGRAM_IDS.includes(instruction.programId.toBase58());\n}\n\nexport function parseTokenLendingInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Token Lending instruction code: ${code}`);\n  }\n\n  return INSTRUCTION_LOOKUP[code];\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { decodeInstruction, MARKETS } from \"@project-serum/serum\";\nimport {\n  AccountMeta,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { enums, number, type, Infer, create } from \"superstruct\";\nimport { BigNumFromString } from \"validators/bignum\";\n\nconst SERUM_PROGRAM_IDS = [\n  \"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn\",\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\",\n];\n\nexport const SERUM_DECODED_MAX = 6;\n\nexport type Side = Infer<typeof Side>;\nexport const Side = enums([\"buy\", \"sell\"]);\n\nexport type OrderType = Infer<typeof OrderType>;\nexport const OrderType = enums([\"limit\", \"ioc\", \"postOnly\"]);\n\nexport type SelfTradeBehavior = Infer<typeof SelfTradeBehavior>;\nexport const SelfTradeBehavior = enums([\n  \"decrementTake\",\n  \"cancelProvide\",\n  \"abortTransaction\",\n]);\n\nfunction getOptionalKey(\n  keys: AccountMeta[],\n  index: number\n): PublicKey | undefined {\n  if (index < keys.length) {\n    return keys[index].pubkey;\n  } else {\n    return undefined;\n  }\n}\n\nexport type InitializeMarket = {\n  programId: PublicKey;\n  data: Infer<typeof InitializeMarketInstruction>;\n  accounts: {\n    market: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    baseVault: PublicKey;\n    quoteVault: PublicKey;\n    baseMint: PublicKey;\n    quoteMint: PublicKey;\n    openOrdersMarketAuthority?: PublicKey;\n    pruneAuthority?: PublicKey;\n    crankAuthority?: PublicKey;\n  };\n};\n\nexport const InitializeMarketInstruction = type({\n  baseLotSize: BigNumFromString,\n  quoteLotSize: BigNumFromString,\n  feeRateBps: number(),\n  quoteDustThreshold: BigNumFromString,\n  vaultSignerNonce: BigNumFromString,\n});\n\nexport function decodeInitializeMarket(\n  ix: TransactionInstruction\n): InitializeMarket {\n  return {\n    programId: ix.programId,\n    data: create(\n      decodeInstruction(ix.data).initializeMarket,\n      InitializeMarketInstruction\n    ),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      requestQueue: ix.keys[1].pubkey,\n      eventQueue: ix.keys[2].pubkey,\n      bids: ix.keys[3].pubkey,\n      asks: ix.keys[4].pubkey,\n      baseVault: ix.keys[5].pubkey,\n      quoteVault: ix.keys[6].pubkey,\n      baseMint: ix.keys[7].pubkey,\n      quoteMint: ix.keys[8].pubkey,\n      openOrdersMarketAuthority: getOptionalKey(ix.keys, 10),\n      pruneAuthority: getOptionalKey(ix.keys, 11),\n      crankAuthority: getOptionalKey(ix.keys, 12),\n    },\n  };\n}\n\nexport type NewOrder = {\n  programId: PublicKey;\n  data: Infer<typeof NewOrderInstruction>;\n  accounts: {\n    market: PublicKey;\n    openOrders: PublicKey;\n    requestQueue: PublicKey;\n    payer: PublicKey;\n    openOrdersOwner: PublicKey;\n    baseVault: PublicKey;\n    quoteVault: PublicKey;\n    feeDiscountPubkey?: PublicKey;\n  };\n};\n\nexport const NewOrderInstruction = type({\n  side: Side,\n  limitPrice: BigNumFromString,\n  maxQuantity: BigNumFromString,\n  orderType: OrderType,\n  clientId: BigNumFromString,\n});\n\nexport function decodeNewOrder(ix: TransactionInstruction): NewOrder {\n  return {\n    programId: ix.programId,\n    data: create(decodeInstruction(ix.data).newOrder, NewOrderInstruction),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      openOrders: ix.keys[1].pubkey,\n      requestQueue: ix.keys[2].pubkey,\n      payer: ix.keys[3].pubkey,\n      openOrdersOwner: ix.keys[4].pubkey,\n      baseVault: ix.keys[5].pubkey,\n      quoteVault: ix.keys[6].pubkey,\n      feeDiscountPubkey: getOptionalKey(ix.keys, 9),\n    },\n  };\n}\n\nexport type MatchOrders = {\n  programId: PublicKey;\n  data: Infer<typeof MatchOrdersInstruction>;\n  accounts: {\n    market: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n  };\n};\n\nexport const MatchOrdersInstruction = type({\n  limit: number(),\n});\n\nexport function decodeMatchOrders(ix: TransactionInstruction): MatchOrders {\n  return {\n    programId: ix.programId,\n    data: create(\n      decodeInstruction(ix.data).matchOrders,\n      MatchOrdersInstruction\n    ),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      requestQueue: ix.keys[1].pubkey,\n      eventQueue: ix.keys[2].pubkey,\n      bids: ix.keys[3].pubkey,\n      asks: ix.keys[4].pubkey,\n    },\n  };\n}\n\nexport type ConsumeEvents = {\n  programId: PublicKey;\n  data: Infer<typeof ConsumeEventsInstruction>;\n  accounts: {\n    openOrders: PublicKey[];\n    market: PublicKey;\n    eventQueue: PublicKey;\n  };\n};\n\nexport const ConsumeEventsInstruction = type({\n  limit: number(),\n});\n\nexport function decodeConsumeEvents(ix: TransactionInstruction): ConsumeEvents {\n  return {\n    programId: ix.programId,\n    data: create(\n      decodeInstruction(ix.data).consumeEvents,\n      ConsumeEventsInstruction\n    ),\n    accounts: {\n      openOrders: ix.keys.slice(0, -4).map((k) => k.pubkey),\n      market: ix.keys[ix.keys.length - 4].pubkey,\n      eventQueue: ix.keys[ix.keys.length - 3].pubkey,\n    },\n  };\n}\n\nexport type CancelOrder = {\n  programId: PublicKey;\n  data: Infer<typeof CancelOrderInstruction>;\n  accounts: {\n    market: PublicKey;\n    openOrders: PublicKey;\n    requestQueue: PublicKey;\n    openOrdersOwner: PublicKey;\n  };\n};\n\nexport const CancelOrderInstruction = type({\n  side: Side,\n  orderId: BigNumFromString,\n  openOrdersSlot: number(),\n});\n\nexport function decodeCancelOrder(ix: TransactionInstruction): CancelOrder {\n  return {\n    programId: ix.programId,\n    data: create(\n      decodeInstruction(ix.data).cancelOrder,\n      CancelOrderInstruction\n    ),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      openOrders: ix.keys[1].pubkey,\n      requestQueue: ix.keys[2].pubkey,\n      openOrdersOwner: ix.keys[3].pubkey,\n    },\n  };\n}\n\nexport type SettleFunds = {\n  programId: PublicKey;\n  accounts: {\n    market: PublicKey;\n    openOrders: PublicKey;\n    openOrdersOwner: PublicKey;\n    baseVault: PublicKey;\n    quoteVault: PublicKey;\n    baseWallet: PublicKey;\n    quoteWallet: PublicKey;\n    vaultSigner: PublicKey;\n    referrerQuoteWallet?: PublicKey;\n  };\n};\n\nexport function decodeSettleFunds(ix: TransactionInstruction): SettleFunds {\n  return {\n    programId: ix.programId,\n    accounts: {\n      market: ix.keys[0].pubkey,\n      openOrders: ix.keys[1].pubkey,\n      openOrdersOwner: ix.keys[2].pubkey,\n      baseVault: ix.keys[3].pubkey,\n      quoteVault: ix.keys[4].pubkey,\n      baseWallet: ix.keys[5].pubkey,\n      quoteWallet: ix.keys[6].pubkey,\n      vaultSigner: ix.keys[7].pubkey,\n      referrerQuoteWallet: getOptionalKey(ix.keys, 9),\n    },\n  };\n}\n\nexport type CancelOrderByClientId = {\n  programId: PublicKey;\n  data: Infer<typeof CancelOrderByClientIdInstruction>;\n  accounts: {\n    market: PublicKey;\n    openOrders: PublicKey;\n    requestQueue: PublicKey;\n    openOrdersOwner: PublicKey;\n  };\n};\n\nexport const CancelOrderByClientIdInstruction = type({\n  clientId: BigNumFromString,\n});\n\nexport function decodeCancelOrderByClientId(\n  ix: TransactionInstruction\n): CancelOrderByClientId {\n  return {\n    programId: ix.programId,\n    data: create(\n      decodeInstruction(ix.data).cancelOrderByClientId,\n      CancelOrderByClientIdInstruction\n    ),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      openOrders: ix.keys[1].pubkey,\n      requestQueue: ix.keys[2].pubkey,\n      openOrdersOwner: ix.keys[3].pubkey,\n    },\n  };\n}\n\nexport type DisableMarket = {\n  programId: PublicKey;\n  accounts: {\n    market: PublicKey;\n    disableAuthority: PublicKey;\n  };\n};\n\nexport function decodeDisableMarket(ix: TransactionInstruction): DisableMarket {\n  return {\n    programId: ix.programId,\n    accounts: {\n      market: ix.keys[0].pubkey,\n      disableAuthority: ix.keys[1].pubkey,\n    },\n  };\n}\n\nexport type SweepFees = {\n  programId: PublicKey;\n  accounts: {\n    market: PublicKey;\n    quoteVault: PublicKey;\n    feeSweepingAuthority: PublicKey;\n    quoteFeeReceiver: PublicKey;\n    vaultSigner: PublicKey;\n  };\n};\n\nexport function decodeSweepFees(ix: TransactionInstruction): SweepFees {\n  return {\n    programId: ix.programId,\n    accounts: {\n      market: ix.keys[0].pubkey,\n      quoteVault: ix.keys[1].pubkey,\n      feeSweepingAuthority: ix.keys[2].pubkey,\n      quoteFeeReceiver: ix.keys[3].pubkey,\n      vaultSigner: ix.keys[4].pubkey,\n    },\n  };\n}\n\nexport type NewOrderV3 = {\n  programId: PublicKey;\n  data: Infer<typeof NewOrderV3Instruction>;\n  accounts: {\n    market: PublicKey;\n    openOrders: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    payer: PublicKey;\n    openOrdersOwner: PublicKey;\n    baseVault: PublicKey;\n    quoteVault: PublicKey;\n    feeDiscountPubkey?: PublicKey;\n  };\n};\n\nexport const NewOrderV3Instruction = type({\n  side: Side,\n  limitPrice: BigNumFromString,\n  maxBaseQuantity: BigNumFromString,\n  maxQuoteQuantity: BigNumFromString,\n  selfTradeBehavior: SelfTradeBehavior,\n  orderType: OrderType,\n  clientId: BigNumFromString,\n  limit: number(),\n});\n\nexport function decodeNewOrderV3(ix: TransactionInstruction): NewOrderV3 {\n  return {\n    programId: ix.programId,\n    data: create(decodeInstruction(ix.data).newOrderV3, NewOrderV3Instruction),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      openOrders: ix.keys[1].pubkey,\n      requestQueue: ix.keys[2].pubkey,\n      eventQueue: ix.keys[3].pubkey,\n      bids: ix.keys[4].pubkey,\n      asks: ix.keys[5].pubkey,\n      payer: ix.keys[6].pubkey,\n      openOrdersOwner: ix.keys[7].pubkey,\n      baseVault: ix.keys[8].pubkey,\n      quoteVault: ix.keys[9].pubkey,\n      feeDiscountPubkey: getOptionalKey(ix.keys, 12),\n    },\n  };\n}\n\nexport type CancelOrderV2 = {\n  programId: PublicKey;\n  data: Infer<typeof CancelOrderV2Instruction>;\n  accounts: {\n    market: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    openOrders: PublicKey;\n    openOrdersOwner: PublicKey;\n    eventQueue: PublicKey;\n  };\n};\n\nexport const CancelOrderV2Instruction = type({\n  side: Side,\n  orderId: BigNumFromString,\n});\n\nexport function decodeCancelOrderV2(ix: TransactionInstruction): CancelOrderV2 {\n  return {\n    programId: ix.programId,\n    data: create(\n      decodeInstruction(ix.data).cancelOrderV2,\n      CancelOrderV2Instruction\n    ),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      bids: ix.keys[1].pubkey,\n      asks: ix.keys[2].pubkey,\n      openOrders: ix.keys[3].pubkey,\n      openOrdersOwner: ix.keys[4].pubkey,\n      eventQueue: ix.keys[5].pubkey,\n    },\n  };\n}\n\nexport type CancelOrderByClientIdV2 = {\n  programId: PublicKey;\n  data: Infer<typeof CancelOrderByClientIdV2Instruction>;\n  accounts: {\n    market: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    openOrders: PublicKey;\n    openOrdersOwner: PublicKey;\n    eventQueue: PublicKey;\n  };\n};\n\nexport const CancelOrderByClientIdV2Instruction = type({\n  clientId: BigNumFromString,\n});\n\nexport function decodeCancelOrderByClientIdV2(\n  ix: TransactionInstruction\n): CancelOrderByClientIdV2 {\n  return {\n    programId: ix.programId,\n    data: create(\n      decodeInstruction(ix.data).cancelOrderByClientIdV2,\n      CancelOrderByClientIdV2Instruction\n    ),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      bids: ix.keys[1].pubkey,\n      asks: ix.keys[2].pubkey,\n      openOrders: ix.keys[3].pubkey,\n      openOrdersOwner: ix.keys[4].pubkey,\n      eventQueue: ix.keys[5].pubkey,\n    },\n  };\n}\n\nexport type CloseOpenOrders = {\n  programId: PublicKey;\n  accounts: {\n    openOrders: PublicKey;\n    openOrdersOwner: PublicKey;\n    rentReceiver: PublicKey;\n    market: PublicKey;\n  };\n};\n\nexport function decodeCloseOpenOrders(\n  ix: TransactionInstruction\n): CloseOpenOrders {\n  return {\n    programId: ix.programId,\n    accounts: {\n      openOrders: ix.keys[0].pubkey,\n      openOrdersOwner: ix.keys[1].pubkey,\n      rentReceiver: ix.keys[2].pubkey,\n      market: ix.keys[3].pubkey,\n    },\n  };\n}\n\nexport type InitOpenOrders = {\n  programId: PublicKey;\n  accounts: {\n    openOrders: PublicKey;\n    openOrdersOwner: PublicKey;\n    market: PublicKey;\n    openOrdersMarketAuthority?: PublicKey;\n  };\n};\n\nexport function decodeInitOpenOrders(\n  ix: TransactionInstruction\n): InitOpenOrders {\n  return {\n    programId: ix.programId,\n    accounts: {\n      openOrders: ix.keys[0].pubkey,\n      openOrdersOwner: ix.keys[1].pubkey,\n      market: ix.keys[2].pubkey,\n      openOrdersMarketAuthority: ix.keys[4].pubkey,\n    },\n  };\n}\n\nexport type Prune = {\n  programId: PublicKey;\n  data: Infer<typeof PruneInstruction>;\n  accounts: {\n    market: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    pruneAuthority: PublicKey;\n    openOrders: PublicKey;\n    openOrdersOwner: PublicKey;\n    eventQueue: PublicKey;\n  };\n};\n\nexport const PruneInstruction = type({\n  limit: number(),\n});\n\nexport function decodePrune(ix: TransactionInstruction): Prune {\n  return {\n    programId: ix.programId,\n    data: create(decodeInstruction(ix.data).prune, PruneInstruction),\n    accounts: {\n      market: ix.keys[0].pubkey,\n      bids: ix.keys[1].pubkey,\n      asks: ix.keys[2].pubkey,\n      pruneAuthority: ix.keys[3].pubkey,\n      openOrders: ix.keys[4].pubkey,\n      openOrdersOwner: ix.keys[5].pubkey,\n      eventQueue: ix.keys[6].pubkey,\n    },\n  };\n}\n\nexport type ConsumeEventsPermissioned = {\n  programId: PublicKey;\n  data: Infer<typeof ConsumeEventsPermissionedInstruction>;\n  accounts: {\n    openOrders: PublicKey[];\n    market: PublicKey;\n    eventQueue: PublicKey;\n    crankAuthority: PublicKey;\n  };\n};\n\nexport const ConsumeEventsPermissionedInstruction = type({\n  limit: number(),\n});\n\nexport function decodeConsumeEventsPermissioned(\n  ix: TransactionInstruction\n): ConsumeEventsPermissioned {\n  return {\n    programId: ix.programId,\n    data: create(\n      decodeInstruction(ix.data).consumeEventsPermissioned,\n      ConsumeEventsPermissionedInstruction\n    ),\n    accounts: {\n      openOrders: ix.keys.slice(0, -3).map((k) => k.pubkey),\n      market: ix.keys[ix.keys.length - 3].pubkey,\n      eventQueue: ix.keys[ix.keys.length - 2].pubkey,\n      crankAuthority: ix.keys[ix.keys.length - 1].pubkey,\n    },\n  };\n}\n\nexport function isSerumInstruction(instruction: TransactionInstruction) {\n  return (\n    SERUM_PROGRAM_IDS.includes(instruction.programId.toBase58()) ||\n    MARKETS.some(\n      (market) =>\n        market.programId && market.programId.equals(instruction.programId)\n    )\n  );\n}\n\nexport function parseSerumInstructionKey(\n  instruction: TransactionInstruction\n): string {\n  const decoded = decodeInstruction(instruction.data);\n  const keys = Object.keys(decoded);\n\n  if (keys.length < 1) {\n    throw new Error(\"Serum instruction key not decoded\");\n  }\n\n  return keys[0];\n}\n\nconst SERUM_CODE_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Market\",\n  1: \"New Order\",\n  2: \"Match Orders\",\n  3: \"Consume Events\",\n  4: \"Cancel Order\",\n  5: \"Settle Funds\",\n  6: \"Cancel Order by Client Id\",\n  7: \"Disable Market\",\n  8: \"Sweep Fees\",\n  9: \"New Order v2\",\n  10: \"New Order v3\",\n  11: \"Cancel Order v2\",\n  12: \"Cancel Order by Client Id v2\",\n  13: \"Send Take\",\n  14: \"Close Open Orders\",\n  15: \"Init Open Orders\",\n  16: \"Prune\",\n  17: \"Consume Events Permissioned\",\n};\n\nexport function parseSerumInstructionCode(instruction: TransactionInstruction) {\n  return instruction.data.slice(1, 5).readUInt32LE(0);\n}\n\nexport function parseSerumInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = parseSerumInstructionCode(instruction);\n\n  if (!(code in SERUM_CODE_LOOKUP)) {\n    throw new Error(`Unrecognized Serum instruction code: ${code}`);\n  }\n\n  return SERUM_CODE_LOOKUP[code];\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  enums,\n  number,\n  type,\n  Infer,\n  create,\n  array,\n  string,\n  optional,\n  coerce,\n  any,\n} from \"superstruct\";\nimport {\n  Instruction,\n  decodeInstruction,\n  BONFIDABOT_PROGRAM_ID,\n} from \"@bonfida/bot\";\n\nexport const SERUM_DECODED_MAX = 6;\n\nexport type Side = Infer<typeof Side>;\nexport const Side = enums([0, 1]);\n\nexport type OrderType = Infer<typeof OrderType>;\nexport const OrderType = enums([0, 1, 2]);\n\nconst PublicKeyToString = coerce(string(), any(), (value) => value.toBase58());\n\nexport type InitializeBot = {\n  systemProgramAccount: PublicKey;\n  rentSysvarAccount: PublicKey;\n  splTokenProgramAccount: PublicKey;\n  poolAccount: PublicKey;\n  mintAccount: PublicKey;\n  payerAccount: PublicKey;\n\n  poolSeed: string;\n  maxNumberOfAsset: number | undefined | null;\n  numberOfMarkets: number;\n  programId: PublicKey;\n};\n\nexport const InitializeBotDecode = type({\n  poolSeed: string(),\n  maxNumberOfAsset: optional(number()),\n  numberOfMarkets: number(),\n});\n\nexport const decodeInitializeBot = (\n  ix: TransactionInstruction\n): InitializeBot => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.Init),\n    InitializeBotDecode\n  );\n  const initializeBot: InitializeBot = {\n    systemProgramAccount: ix.keys[0].pubkey,\n    rentSysvarAccount: ix.keys[1].pubkey,\n    splTokenProgramAccount: ix.keys[2].pubkey,\n    poolAccount: ix.keys[3].pubkey,\n    mintAccount: ix.keys[4].pubkey,\n    payerAccount: ix.keys[5].pubkey,\n    poolSeed: decoded.poolSeed,\n    maxNumberOfAsset: decoded.maxNumberOfAsset,\n    numberOfMarkets: decoded.numberOfMarkets,\n    programId: ix.programId,\n  };\n\n  return initializeBot;\n};\n\nexport type CreateBot = {\n  splTokenProgramId: PublicKey;\n  clockSysvarKey: PublicKey;\n  mintKey: PublicKey;\n  poolKey: PublicKey;\n  poolSeed: string;\n  targetPoolTokenKey: PublicKey;\n  serumProgramId: PublicKey;\n  signalProviderKey: PublicKey;\n  depositAmounts: number[] | undefined | null;\n  markets: string[] | undefined | null;\n  feeCollectionPeriod: number;\n  feeRatio: number;\n  programId: PublicKey;\n};\n\nexport const CreateBotDecode = type({\n  poolSeed: string(),\n  feeCollectionPeriod: number(),\n  feeRatio: number(),\n  depositAmounts: array(number()),\n  markets: array(PublicKeyToString),\n});\n\nexport const decodeCreateBot = (ix: TransactionInstruction): CreateBot => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.Create),\n    CreateBotDecode\n  );\n  const createBot: CreateBot = {\n    splTokenProgramId: ix.keys[0].pubkey,\n    clockSysvarKey: ix.keys[1].pubkey,\n    mintKey: ix.keys[4].pubkey,\n    poolKey: ix.keys[6].pubkey,\n    poolSeed: decoded.poolSeed,\n    targetPoolTokenKey: ix.keys[5].pubkey,\n    serumProgramId: ix.keys[2].pubkey,\n    signalProviderKey: ix.keys[3].pubkey,\n    depositAmounts: decoded.depositAmounts,\n    markets: decoded.markets,\n    feeCollectionPeriod: decoded.feeCollectionPeriod,\n    feeRatio: decoded.feeRatio,\n    programId: ix.programId,\n  };\n\n  return createBot;\n};\n\nexport type Deposit = {\n  splTokenProgramId: PublicKey;\n  programId: PublicKey;\n  sigProviderFeeReceiverKey: PublicKey;\n  bonfidaFeeReceiverKey: PublicKey;\n  bonfidaBuyAndBurnKey: PublicKey;\n  mintKey: PublicKey;\n  poolKey: PublicKey;\n  targetPoolTokenKey: PublicKey;\n  poolSeed: string;\n  poolTokenAmount: number;\n};\n\nexport const DepositDecode = type({\n  poolSeed: string(),\n  poolTokenAmount: number(),\n});\n\nexport const decodeDeposit = (ix: TransactionInstruction): Deposit => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.Deposit),\n    DepositDecode\n  );\n\n  const deposit: Deposit = {\n    splTokenProgramId: ix.keys[0].pubkey,\n    programId: ix.programId,\n    sigProviderFeeReceiverKey: ix.keys[3].pubkey,\n    bonfidaFeeReceiverKey: ix.keys[4].pubkey,\n    bonfidaBuyAndBurnKey: ix.keys[5].pubkey,\n    mintKey: ix.keys[1].pubkey,\n    poolKey: ix.keys[6].pubkey,\n    targetPoolTokenKey: ix.keys[2].pubkey,\n    poolSeed: decoded.poolSeed,\n    poolTokenAmount: decoded.poolTokenAmount,\n  };\n\n  return deposit;\n};\n\nexport type CreateOrder = {\n  programId: PublicKey;\n  signalProviderKey: PublicKey;\n  market: PublicKey;\n  payerPoolAssetKey: PublicKey;\n  openOrdersKey: PublicKey;\n  serumRequestQueue: PublicKey;\n  serumEventQueue: PublicKey;\n  serumMarketBids: PublicKey;\n  serumMarketAsks: PublicKey;\n  poolKey: PublicKey;\n  coinVaultKey: PublicKey;\n  pcVaultKey: PublicKey;\n  splTokenProgramId: PublicKey;\n  dexProgramKey: PublicKey;\n  rentProgramId: PublicKey;\n  srmReferrerKey: PublicKey | null | undefined;\n  poolSeed: string;\n  side: Side;\n  limitPrice: number;\n  ratioOfPoolAssetsToTrade: number;\n  orderType: OrderType;\n  clientId: number;\n  coinLotSize: number;\n  pcLotSize: number;\n  targetMint: string;\n};\n\nexport const CreateDecode = type({\n  poolSeed: string(),\n  side: Side,\n  limitPrice: number(),\n  ratioOfPoolAssetsToTrade: number(),\n  orderType: OrderType,\n  clientId: number(),\n  coinLotSize: number(),\n  pcLotSize: number(),\n  targetMint: string(),\n});\n\nexport const decodeCreateOrder = (ix: TransactionInstruction): CreateOrder => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.CreateOrder),\n    CreateDecode\n  );\n\n  const createOrder: CreateOrder = {\n    programId: ix.programId,\n    signalProviderKey: ix.keys[0].pubkey,\n    market: ix.keys[1].pubkey,\n    payerPoolAssetKey: ix.keys[2].pubkey,\n    openOrdersKey: ix.keys[3].pubkey,\n    serumRequestQueue: ix.keys[5].pubkey,\n    serumEventQueue: ix.keys[4].pubkey,\n    serumMarketBids: ix.keys[6].pubkey,\n    serumMarketAsks: ix.keys[7].pubkey,\n    poolKey: ix.keys[8].pubkey,\n    coinVaultKey: ix.keys[9].pubkey,\n    pcVaultKey: ix.keys[10].pubkey,\n    splTokenProgramId: ix.keys[11].pubkey,\n    dexProgramKey: ix.keys[13].pubkey,\n    rentProgramId: ix.keys[12].pubkey,\n    srmReferrerKey: ix.keys[14]?.pubkey,\n    // Miss maxQuantity\n    //\n    poolSeed: decoded.poolSeed,\n    side: decoded.side,\n    limitPrice: decoded.limitPrice,\n    ratioOfPoolAssetsToTrade: decoded.ratioOfPoolAssetsToTrade,\n    orderType: decoded.orderType,\n    clientId: decoded.clientId,\n    coinLotSize: decoded.coinLotSize,\n    pcLotSize: decoded.pcLotSize,\n    targetMint: decoded.targetMint,\n  };\n\n  return createOrder;\n};\n\nexport type CancelOrder = {\n  programId: PublicKey;\n  signalProviderKey: PublicKey;\n  market: PublicKey;\n  openOrdersKey: PublicKey;\n  serumEventQueue: PublicKey;\n  serumMarketBids: PublicKey;\n  serumMarketAsks: PublicKey;\n  poolKey: PublicKey;\n  dexProgramKey: PublicKey;\n  poolSeed: string;\n  side: Side;\n  orderId: number;\n};\n\nexport const CancelOrderDecode = type({\n  poolSeed: string(),\n  side: Side,\n  orderId: number(),\n});\n\nexport const decodeCancelOrder = (ix: TransactionInstruction): CancelOrder => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.CancelOrder),\n    CancelOrderDecode\n  );\n\n  const cancelOrder: CancelOrder = {\n    programId: ix.programId,\n    signalProviderKey: ix.keys[0].pubkey,\n    market: ix.keys[1].pubkey,\n    openOrdersKey: ix.keys[2].pubkey,\n    serumEventQueue: ix.keys[3].pubkey,\n    serumMarketBids: ix.keys[4].pubkey,\n    serumMarketAsks: ix.keys[5].pubkey,\n    poolKey: ix.keys[6].pubkey,\n    dexProgramKey: ix.keys[7].pubkey,\n    //\n    poolSeed: decoded.poolSeed,\n    side: decoded.side,\n    orderId: decoded.orderId,\n  };\n  return cancelOrder;\n};\n\nexport type SettleFunds = {\n  programId: PublicKey;\n  market: PublicKey;\n  openOrdersKey: PublicKey;\n  poolKey: PublicKey;\n  poolMintKey: PublicKey;\n  coinVaultKey: PublicKey;\n  pcVaultKey: PublicKey;\n  coinPoolAssetKey: PublicKey;\n  pcPoolAssetKey: PublicKey;\n  vaultSignerKey: PublicKey;\n  splTokenProgramId: PublicKey;\n  dexProgramKey: PublicKey;\n  srmReferrerKey: PublicKey | null;\n  poolSeed: string;\n};\n\nexport const SettleFundsDecode = type({\n  poolSeed: string(),\n  pcIndex: number(),\n  orderId: optional(number()),\n});\n\nexport const decodeSettleFunds = (ix: TransactionInstruction): SettleFunds => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.SettleFunds),\n    SettleFundsDecode\n  );\n\n  const settleFunds: SettleFunds = {\n    programId: ix.programId,\n    market: ix.keys[0].pubkey,\n    openOrdersKey: ix.keys[1].pubkey,\n    poolKey: ix.keys[2].pubkey,\n    poolMintKey: ix.keys[3].pubkey,\n    coinVaultKey: ix.keys[4].pubkey,\n    pcVaultKey: ix.keys[5].pubkey,\n    coinPoolAssetKey: ix.keys[6].pubkey,\n    pcPoolAssetKey: ix.keys[7].pubkey,\n    vaultSignerKey: ix.keys[8].pubkey,\n    splTokenProgramId: ix.keys[9].pubkey,\n    dexProgramKey: ix.keys[10].pubkey,\n    srmReferrerKey: ix.keys[11]?.pubkey,\n    poolSeed: decoded.poolSeed,\n  };\n  return settleFunds;\n};\n\nexport type Redeem = {\n  splTokenProgramId: PublicKey;\n  programId: PublicKey;\n  mintKey: PublicKey;\n  poolKey: PublicKey;\n  sourcePoolTokenOwnerKey: PublicKey;\n  sourcePoolTokenKey: PublicKey;\n  poolSeed: string;\n  poolTokenAmount: number;\n};\n\nexport const RedeemDecode = type({\n  poolSeed: string(),\n  poolTokenAmount: number(),\n});\n\nexport const decodeRedeem = (ix: TransactionInstruction): Redeem => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.Redeem),\n    RedeemDecode\n  );\n\n  const redeem: Redeem = {\n    programId: ix.programId,\n    splTokenProgramId: ix.keys[0].pubkey,\n    mintKey: ix.keys[2].pubkey,\n    poolKey: ix.keys[5].pubkey,\n    sourcePoolTokenOwnerKey: ix.keys[3].pubkey,\n    sourcePoolTokenKey: ix.keys[4].pubkey,\n    poolSeed: decoded.poolSeed,\n    poolTokenAmount: decoded.poolTokenAmount,\n  };\n\n  return redeem;\n};\n\nexport type CollectFees = {\n  splTokenProgramId: PublicKey;\n  clockSysvarKey: PublicKey;\n  programId: PublicKey;\n  poolKey: PublicKey;\n  mintKey: PublicKey;\n  signalProviderPoolTokenKey: PublicKey;\n  bonfidaFeePoolTokenKey: PublicKey;\n  bonfidaBnBPTKey: PublicKey;\n  poolSeed: string;\n};\n\nexport const CollectFeesDecode = type({\n  poolSeed: string(),\n});\n\nexport const decodeCollectFees = (ix: TransactionInstruction): CollectFees => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.CollectFees),\n    CollectFeesDecode\n  );\n\n  const collectFees: CollectFees = {\n    programId: ix.programId,\n    splTokenProgramId: ix.keys[0].pubkey,\n    clockSysvarKey: ix.keys[1].pubkey,\n    poolKey: ix.keys[2].pubkey,\n    mintKey: ix.keys[3].pubkey,\n    signalProviderPoolTokenKey: ix.keys[4].pubkey,\n    bonfidaFeePoolTokenKey: ix.keys[5].pubkey,\n    bonfidaBnBPTKey: ix.keys[6].pubkey,\n    poolSeed: decoded.poolSeed,\n  };\n\n  return collectFees;\n};\n\nexport const isBonfidaBotInstruction = (\n  instruction: TransactionInstruction\n) => {\n  return instruction.programId.equals(BONFIDABOT_PROGRAM_ID);\n};\n\nexport const INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Bot\",\n  1: \"Create Bot\",\n  2: \"Deposit\",\n  3: \"Create Order\",\n  4: \"Cancel Order\",\n  5: \"Settle Funds\",\n  6: \"Redeem\",\n  7: \"Collect Fees\",\n};\n\nexport const parseBonfidaBotInstructionTitle = (\n  instruction: TransactionInstruction\n): string => {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Bonfida Bot instruction code: ${code}`);\n  }\n  return INSTRUCTION_LOOKUP[code];\n};\n","import React from \"react\";\nimport {\n  Connection,\n  TransactionSignature,\n  Transaction,\n  Message,\n} from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nexport interface Details {\n  raw?: {\n    transaction: Transaction;\n    message: Message;\n    signatures: string[];\n  } | null;\n}\n\ntype State = Cache.State<Details>;\ntype Dispatch = Cache.Dispatch<Details>;\n\nexport const StateContext = React.createContext<State | undefined>(undefined);\nexport const DispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\n\ntype DetailsProviderProps = { children: React.ReactNode };\nexport function RawDetailsProvider({ children }: DetailsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Details>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useRawTransactionDetails(\n  signature: TransactionSignature\n): Cache.CacheEntry<Details> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useRawTransactionDetails must be used within a TransactionsProvider`\n    );\n  }\n\n  return context.entries[signature];\n}\n\nasync function fetchRawTransaction(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  let fetchStatus;\n  try {\n    const response = await new Connection(url).getTransaction(signature);\n    fetchStatus = FetchStatus.Fetched;\n\n    let data: Details = { raw: null };\n    if (response !== null) {\n      const { message, signatures } = response.transaction;\n      data = {\n        raw: {\n          message,\n          signatures,\n          transaction: Transaction.populate(message, signatures),\n        },\n      };\n    }\n\n    dispatch({\n      type: ActionType.Update,\n      status: fetchStatus,\n      key: signature,\n      data,\n      url,\n    });\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n  }\n}\n\nexport function useFetchRawTransaction() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchRawTransaction must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      url && fetchRawTransaction(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\nimport {\n  TransactionSignature,\n  Connection,\n  SignatureResult,\n  TransactionConfirmationStatus,\n} from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { DetailsProvider } from \"./parsed\";\nimport { RawDetailsProvider } from \"./raw\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\nexport { useTransactionDetails } from \"./parsed\";\n\nexport type Confirmations = number | \"max\";\n\nexport type Timestamp = number | \"unavailable\";\n\nexport interface TransactionStatusInfo {\n  slot: number;\n  result: SignatureResult;\n  timestamp: Timestamp;\n  confirmations: Confirmations;\n  confirmationStatus?: TransactionConfirmationStatus;\n}\n\nexport interface TransactionStatus {\n  signature: TransactionSignature;\n  info: TransactionStatusInfo | null;\n}\n\ntype State = Cache.State<TransactionStatus>;\ntype Dispatch = Cache.Dispatch<TransactionStatus>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype TransactionsProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<TransactionStatus>(url);\n\n  // Clear accounts cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <RawDetailsProvider>\n          <DetailsProvider>{children}</DetailsProvider>\n        </RawDetailsProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport async function fetchTransactionStatus(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: signature,\n    status: FetchStatus.Fetching,\n    url,\n  });\n\n  let fetchStatus;\n  let data;\n  try {\n    const connection = new Connection(url);\n    const { value } = await connection.getSignatureStatus(signature, {\n      searchTransactionHistory: true,\n    });\n\n    let info = null;\n    if (value !== null) {\n      let confirmations: Confirmations;\n      if (typeof value.confirmations === \"number\") {\n        confirmations = value.confirmations;\n      } else {\n        confirmations = \"max\";\n      }\n\n      let blockTime = null;\n      try {\n        blockTime = await connection.getBlockTime(value.slot);\n      } catch (error) {\n        if (cluster === Cluster.MainnetBeta && confirmations === \"max\") {\n          reportError(error, { slot: `${value.slot}` });\n        }\n      }\n      let timestamp: Timestamp = blockTime !== null ? blockTime : \"unavailable\";\n\n      info = {\n        slot: value.slot,\n        timestamp,\n        confirmations,\n        confirmationStatus: value.confirmationStatus,\n        result: { err: value.err },\n      };\n    }\n    data = { signature, info };\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    key: signature,\n    status: fetchStatus,\n    data,\n    url,\n  });\n}\n\nexport function useTransactions() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n  return context;\n}\n\nexport function useTransactionStatus(\n  signature: TransactionSignature | undefined\n): Cache.CacheEntry<TransactionStatus> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionStatus must be used within a TransactionsProvider`\n    );\n  }\n\n  if (signature === undefined) {\n    return undefined;\n  }\n\n  return context.entries[signature];\n}\n\nexport function useFetchTransactionStatus() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTransactionStatus must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      fetchTransactionStatus(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","import React, { useState, ReactNode } from \"react\";\n\ntype Props = {\n  text: string;\n  children?: ReactNode;\n  bottom?: boolean;\n  right?: boolean;\n};\n\ntype State = \"hide\" | \"show\";\n\nfunction Popover({\n  state,\n  bottom,\n  right,\n  text,\n}: {\n  state: State;\n  bottom?: boolean;\n  right?: boolean;\n  text: string;\n}) {\n  if (state === \"hide\") return null;\n  return (\n    <div\n      className={`popover bs-popover-${bottom ? \"bottom\" : \"top\"}${\n        right ? \" right\" : \"\"\n      } show`}\n    >\n      <div className={`arrow${right ? \" right\" : \"\"}`} />\n      <div className=\"popover-body\">{text}</div>\n    </div>\n  );\n}\n\nexport function InfoTooltip({ bottom, right, text, children }: Props) {\n  const [state, setState] = useState<State>(\"hide\");\n\n  const justify = right ? \"end\" : \"start\";\n  return (\n    <div\n      className=\"popover-container w-100\"\n      onMouseOver={() => setState(\"show\")}\n      onMouseOut={() => setState(\"hide\")}\n    >\n      <div className={`d-flex align-items-center justify-content-${justify}`}>\n        {children}\n        <span className=\"fe fe-help-circle ms-2\"></span>\n      </div>\n      <Popover bottom={bottom} right={right} state={state} text={text} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BigNumber } from \"bignumber.js\";\nimport { SolBalance } from \"utils\";\n\nexport function BalanceDelta({\n  delta,\n  isSol = false,\n}: {\n  delta: BigNumber;\n  isSol?: boolean;\n}) {\n  let sols;\n\n  if (isSol) {\n    sols = <SolBalance lamports={delta.toNumber()} />;\n  }\n\n  if (delta.gt(0)) {\n    return (\n      <span className=\"badge bg-success-soft\">\n        +{isSol ? sols : delta.toString()}\n      </span>\n    );\n  } else if (delta.lt(0)) {\n    return (\n      <span className=\"badge bg-warning-soft\">\n        {isSol ? <>-{sols}</> : delta.toString()}\n      </span>\n    );\n  }\n\n  return <span className=\"badge bg-secondary-soft\">0</span>;\n}\n","import React from \"react\";\nimport {\n  ParsedMessageAccount,\n  PublicKey,\n  TokenAmount,\n  TokenBalance,\n} from \"@solana/web3.js\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Address } from \"components/common/Address\";\nimport { BalanceDelta } from \"components/common/BalanceDelta\";\nimport { SignatureProps } from \"pages/TransactionDetailsPage\";\nimport { useTransactionDetails } from \"providers/transactions\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\n\nexport type TokenBalanceRow = {\n  account: PublicKey;\n  mint: string;\n  balance: TokenAmount;\n  delta: BigNumber;\n  accountIndex: number;\n};\n\nexport function TokenBalancesCard({ signature }: SignatureProps) {\n  const details = useTransactionDetails(signature);\n  const { tokenRegistry } = useTokenRegistry();\n\n  if (!details) {\n    return null;\n  }\n\n  const preTokenBalances = details.data?.transaction?.meta?.preTokenBalances;\n  const postTokenBalances = details.data?.transaction?.meta?.postTokenBalances;\n\n  const accountKeys =\n    details.data?.transaction?.transaction.message.accountKeys;\n\n  if (!preTokenBalances || !postTokenBalances || !accountKeys) {\n    return null;\n  }\n\n  const rows = generateTokenBalanceRows(\n    preTokenBalances,\n    postTokenBalances,\n    accountKeys\n  );\n\n  if (rows.length < 1) {\n    return null;\n  }\n\n  const accountRows = rows.map(({ account, delta, balance, mint }) => {\n    const key = account.toBase58() + mint;\n    const units = tokenRegistry.get(mint)?.symbol || \"tokens\";\n\n    return (\n      <tr key={key}>\n        <td>\n          <Address pubkey={account} link />\n        </td>\n        <td>\n          <Address pubkey={new PublicKey(mint)} link />\n        </td>\n        <td>\n          <BalanceDelta delta={delta} />\n        </td>\n        <td>\n          {balance.uiAmountString} {units}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Token Balances</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Token</th>\n              <th className=\"text-muted\">Change</th>\n              <th className=\"text-muted\">Post Balance</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{accountRows}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport function generateTokenBalanceRows(\n  preTokenBalances: TokenBalance[],\n  postTokenBalances: TokenBalance[],\n  accounts: ParsedMessageAccount[]\n): TokenBalanceRow[] {\n  let preBalanceMap: { [index: number]: TokenBalance } = {};\n\n  preTokenBalances.forEach(\n    (balance) => (preBalanceMap[balance.accountIndex] = balance)\n  );\n\n  let rows: TokenBalanceRow[] = [];\n\n  postTokenBalances.forEach(({ uiTokenAmount, accountIndex, mint }) => {\n    const preBalance = preBalanceMap[accountIndex];\n    const account = accounts[accountIndex].pubkey;\n\n    if (!uiTokenAmount.uiAmountString) {\n      // uiAmount deprecation\n      return;\n    }\n\n    // case where mint changes\n    if (preBalance && preBalance.mint !== mint) {\n      if (!preBalance.uiTokenAmount.uiAmountString) {\n        // uiAmount deprecation\n        return;\n      }\n\n      rows.push({\n        account: accounts[accountIndex].pubkey,\n        accountIndex,\n        balance: {\n          decimals: preBalance.uiTokenAmount.decimals,\n          amount: \"0\",\n          uiAmount: 0,\n        },\n        delta: new BigNumber(-preBalance.uiTokenAmount.uiAmountString),\n        mint: preBalance.mint,\n      });\n\n      rows.push({\n        account: accounts[accountIndex].pubkey,\n        accountIndex,\n        balance: uiTokenAmount,\n        delta: new BigNumber(uiTokenAmount.uiAmountString),\n        mint: mint,\n      });\n      return;\n    }\n\n    let delta;\n\n    if (preBalance) {\n      if (!preBalance.uiTokenAmount.uiAmountString) {\n        // uiAmount deprecation\n        return;\n      }\n\n      delta = new BigNumber(uiTokenAmount.uiAmountString).minus(\n        preBalance.uiTokenAmount.uiAmountString\n      );\n    } else {\n      delta = new BigNumber(uiTokenAmount.uiAmountString);\n    }\n\n    rows.push({\n      account,\n      mint,\n      balance: uiTokenAmount,\n      delta,\n      accountIndex,\n    });\n  });\n\n  return rows.sort((a, b) => a.accountIndex - b.accountIndex);\n}\n","import React, { ReactNode } from \"react\";\nimport { Buffer } from \"buffer\";\nimport { Copyable } from \"./Copyable\";\n\nexport function HexData({ raw }: { raw: Buffer }) {\n  if (!raw || raw.length === 0) {\n    return <span>No data</span>;\n  }\n\n  const chunks = [];\n  const hexString = raw.toString(\"hex\");\n  for (let i = 0; i < hexString.length; i += 2) {\n    chunks.push(hexString.slice(i, i + 2));\n  }\n\n  const SPAN_SIZE = 4;\n  const ROW_SIZE = 4 * SPAN_SIZE;\n\n  const divs: ReactNode[] = [];\n  let spans: ReactNode[] = [];\n  for (let i = 0; i < chunks.length; i += SPAN_SIZE) {\n    const color = i % (2 * SPAN_SIZE) === 0 ? \"text-white\" : \"text-gray-500\";\n    spans.push(\n      <span key={i} className={color}>\n        {chunks.slice(i, i + SPAN_SIZE).join(\" \")}&emsp;\n      </span>\n    );\n\n    if (\n      i % ROW_SIZE === ROW_SIZE - SPAN_SIZE ||\n      i >= chunks.length - SPAN_SIZE\n    ) {\n      divs.push(<div key={i / ROW_SIZE}>{spans}</div>);\n\n      // clear spans\n      spans = [];\n    }\n  }\n\n  function Content() {\n    return (\n      <Copyable text={hexString}>\n        <pre className=\"d-inline-block text-start mb-0\">{divs}</pre>\n      </Copyable>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"d-none d-lg-flex align-items-center justify-content-end\">\n        <Content />\n      </div>\n      <div className=\"d-flex d-lg-none align-items-center\">\n        <Content />\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { HexData } from \"components/common/HexData\";\n\nexport function RawDetails({ ix }: { ix: TransactionInstruction }) {\n  return (\n    <>\n      {ix.keys.map(({ pubkey, isSigner, isWritable }, keyIndex) => (\n        <tr key={keyIndex}>\n          <td>\n            <div className=\"me-2 d-md-inline\">Account #{keyIndex + 1}</div>\n            {isWritable && (\n              <span className=\"badge bg-info-soft me-1\">Writable</span>\n            )}\n            {isSigner && (\n              <span className=\"badge bg-info-soft me-1\">Signer</span>\n            )}\n          </td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={pubkey} alignRight link />\n          </td>\n        </tr>\n      ))}\n\n      <tr>\n        <td>\n          Instruction Data <span className=\"text-muted\">(Hex)</span>\n        </td>\n        <td className=\"text-lg-end\">\n          <HexData raw={ix.data} />\n        </td>\n      </tr>\n    </>\n  );\n}\n","import React from \"react\";\nimport { ParsedInstruction } from \"@solana/web3.js\";\n\nexport function RawParsedDetails({\n  ix,\n  children,\n}: {\n  ix: ParsedInstruction;\n  children?: React.ReactNode;\n}) {\n  return (\n    <>\n      {children}\n\n      <tr>\n        <td>\n          Instruction Data <span className=\"text-muted\">(JSON)</span>\n        </td>\n        <td className=\"text-lg-end\">\n          <pre className=\"d-inline-block text-start json-wrap\">\n            {JSON.stringify(ix.parsed, null, 2)}\n          </pre>\n        </td>\n      </tr>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport {\n  TransactionInstruction,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { RawDetails } from \"./RawDetails\";\nimport { RawParsedDetails } from \"./RawParsedDetails\";\nimport { SignatureContext } from \"../../pages/TransactionDetailsPage\";\nimport {\n  useFetchRawTransaction,\n  useRawTransactionDetails,\n} from \"providers/transactions/raw\";\nimport { Address } from \"components/common/Address\";\n\ntype InstructionProps = {\n  title: string;\n  children?: React.ReactNode;\n  result: SignatureResult;\n  index: number;\n  ix: TransactionInstruction | ParsedInstruction;\n  defaultRaw?: boolean;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function InstructionCard({\n  title,\n  children,\n  result,\n  index,\n  ix,\n  defaultRaw,\n  innerCards,\n  childIndex,\n}: InstructionProps) {\n  const [resultClass] = ixResult(result, index);\n  const [showRaw, setShowRaw] = React.useState(defaultRaw || false);\n  const signature = useContext(SignatureContext);\n  const rawDetails = useRawTransactionDetails(signature);\n\n  let raw: TransactionInstruction | undefined = undefined;\n  if (rawDetails && childIndex === undefined) {\n    raw = rawDetails?.data?.raw?.transaction.instructions[index];\n  }\n\n  const fetchRaw = useFetchRawTransaction();\n  const fetchRawTrigger = () => fetchRaw(signature);\n\n  const rawClickHandler = () => {\n    if (!defaultRaw && !showRaw && !raw) {\n      fetchRawTrigger();\n    }\n\n    return setShowRaw((r) => !r);\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          <span className={`badge bg-${resultClass}-soft me-2`}>\n            #{index + 1}\n            {childIndex !== undefined ? `.${childIndex + 1}` : \"\"}\n          </span>\n          {title}\n        </h3>\n\n        <button\n          disabled={defaultRaw}\n          className={`btn btn-sm d-flex ${\n            showRaw ? \"btn-black active\" : \"btn-white\"\n          }`}\n          onClick={rawClickHandler}\n        >\n          <span className=\"fe fe-code me-1\"></span>\n          Raw\n        </button>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <tbody className=\"list\">\n            {showRaw ? (\n              <>\n                <tr>\n                  <td>Program</td>\n                  <td className=\"text-lg-end\">\n                    <Address pubkey={ix.programId} alignRight link />\n                  </td>\n                </tr>\n                {\"parsed\" in ix ? (\n                  <RawParsedDetails ix={ix}>\n                    {raw ? <RawDetails ix={raw} /> : null}\n                  </RawParsedDetails>\n                ) : (\n                  <RawDetails ix={ix} />\n                )}\n              </>\n            ) : (\n              children\n            )}\n            {innerCards && innerCards.length > 0 && (\n              <tr>\n                <td colSpan={2}>\n                  Inner Instructions\n                  <div className=\"inner-cards\">{innerCards}</div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction ixResult(result: SignatureResult, index: number) {\n  if (result.err) {\n    const err = result.err as any;\n    const ixError = err[\"InstructionError\"];\n    if (ixError && Array.isArray(ixError)) {\n      const [errorIndex, error] = ixError;\n      if (Number.isInteger(errorIndex) && errorIndex === index) {\n        return [\"warning\", `Error: ${JSON.stringify(error)}`];\n      }\n    }\n    return [\"dark\"];\n  }\n  return [\"success\"];\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, type, string, Infer } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type WriteInfo = Infer<typeof WriteInfo>;\nexport const WriteInfo = type({\n  account: PublicKeyFromString,\n  bytes: string(),\n  offset: number(),\n});\n\nexport type FinalizeInfo = Infer<typeof FinalizeInfo>;\nexport const FinalizeInfo = type({\n  account: PublicKeyFromString,\n});\n\nexport type BpfLoaderInstructionType = Infer<typeof BpfLoaderInstructionType>;\nexport const BpfLoaderInstructionType = enums([\"write\", \"finalize\"]);\n","import React from \"react\";\nimport {\n  TransactionInstruction,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { programLabel } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\n\nexport function UnknownDetailsCard({\n  ix,\n  index,\n  result,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction | ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { cluster } = useCluster();\n  const programName =\n    programLabel(ix.programId.toBase58(), cluster) || \"Unknown Program\";\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`${programName}: Unknown Instruction`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedInstruction,\n  ParsedTransaction,\n  BPF_LOADER_PROGRAM_ID,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { create } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport { WriteInfo, FinalizeInfo } from \"./types\";\nimport { reportError } from \"utils/sentry\";\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { Address } from \"components/common/Address\";\nimport { wrap } from \"utils\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function BpfLoaderDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n\n    switch (parsed.type) {\n      case \"write\": {\n        const info = create(parsed.info, WriteInfo);\n        return <BpfLoaderWriteDetailsCard info={info} {...props} />;\n      }\n      case \"finalize\": {\n        const info = create(parsed.info, FinalizeInfo);\n        return <BpfLoaderFinalizeDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n\ntype Props<T> = {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: T;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function BpfLoaderWriteDetailsCard(props: Props<WriteInfo>) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const bytes = wrap(info.bytes, 50);\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"BPF Loader 2: Write\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={BPF_LOADER_PROGRAM_ID} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>\n          Bytes <span className=\"text-muted\">(Base 64)</span>\n        </td>\n        <td className=\"text-lg-end\">\n          <pre className=\"d-inline-block text-start mb-0\">{bytes}</pre>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Offset</td>\n        <td className=\"text-lg-end\">{info.offset}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n\nexport function BpfLoaderFinalizeDetailsCard(props: Props<FinalizeInfo>) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"BPF Loader 2: Finalize\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={BPF_LOADER_PROGRAM_ID} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { ParsedInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { wrap } from \"utils\";\nimport { Address } from \"components/common/Address\";\n\nexport function MemoDetailsCard({\n  ix,\n  index,\n  result,\n  innerCards,\n  childIndex,\n}: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const data = wrap(ix.parsed, 50);\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Memo Program: Memo\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={ix.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Data (UTF-8)</td>\n        <td className=\"text-lg-end\">\n          <pre className=\"d-inline-block text-start mb-0\">{data}</pre>\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { NewOrder } from \"./types\";\n\nexport function NewOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: NewOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: New Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Payer</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.payer} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-end\">{info.data.side}</td>\n      </tr>\n\n      <tr>\n        <td>Order Type</td>\n        <td className=\"text-lg-end\">{info.data.orderType}</td>\n      </tr>\n\n      <tr>\n        <td>Limit Price</td>\n        <td className=\"text-lg-end\">{info.data.limitPrice.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Max Quantity</td>\n        <td className=\"text-lg-end\">{info.data.maxQuantity.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Client Id</td>\n        <td className=\"text-lg-end\">{info.data.clientId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { MatchOrders } from \"./types\";\n\nexport function MatchOrdersDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: MatchOrders;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Match Orders\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Limit</td>\n        <td className=\"text-lg-end\">{info.data.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeMarket } from \"./types\";\n\nexport function InitializeMarketDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeMarket;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Initialize Market\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Mint</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.baseMint} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Mint</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.quoteMint} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Lot Size</td>\n        <td className=\"text-lg-end\">{info.data.baseLotSize.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Quote Lot Size</td>\n        <td className=\"text-lg-end\">{info.data.quoteLotSize.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Fee Rate Bps</td>\n        <td className=\"text-lg-end\">{info.data.feeRateBps}</td>\n      </tr>\n\n      <tr>\n        <td>Quote Dust Threshold</td>\n        <td className=\"text-lg-end\">\n          {info.data.quoteDustThreshold.toString(10)}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer Nonce</td>\n        <td className=\"text-lg-end\">\n          {info.data.vaultSignerNonce.toString(10)}\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { ConsumeEvents } from \"./types\";\n\nexport function ConsumeEventsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: ConsumeEvents;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Consume Events\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Accounts</td>\n        <td className=\"text-lg-end\">\n          {info.accounts.openOrders.map((account, index) => {\n            return <Address pubkey={account} key={index} alignRight link />;\n          })}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Limit</td>\n        <td className=\"text-lg-end\">{info.data.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrder } from \"./types\";\n\nexport function CancelOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Cancel Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-end\">{info.data.side}</td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Slot</td>\n        <td className=\"text-lg-end\">{info.data.openOrdersSlot}</td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-end\">{info.data.orderId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrderByClientId } from \"./types\";\n\nexport function CancelOrderByClientIdDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrderByClientId;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Cancel Order By Client Id\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Client Id</td>\n        <td className=\"text-lg-end\">{info.data.clientId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SettleFunds } from \"./types\";\n\nexport function SettleFundsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SettleFunds;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Settle Funds\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Wallet</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.baseWallet} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Wallet</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.quoteWallet} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.vaultSigner} alignRight link />\n        </td>\n      </tr>\n\n      {info.accounts.referrerQuoteWallet && (\n        <tr>\n          <td>Referrer Quote Wallet</td>\n          <td className=\"text-lg-end\">\n            <Address\n              pubkey={info.accounts.referrerQuoteWallet}\n              alignRight\n              link\n            />\n          </td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { DisableMarket } from \"./types\";\n\nexport function DisableMarketDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: DisableMarket;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Disable Market\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Disable Authority</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.disableAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SweepFees } from \"./types\";\n\nexport function SweepFeesDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SweepFees;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Sweep Fees\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Fee Sweeping Authority</td>\n        <td className=\"text-lg-end\">\n          <Address\n            pubkey={info.accounts.feeSweepingAuthority}\n            alignRight\n            link\n          />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Fee Receiver</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.quoteFeeReceiver} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.vaultSigner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { NewOrderV3 } from \"./types\";\n\nexport function NewOrderV3DetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: NewOrderV3;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: New Order v3\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Payer</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.payer} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      {info.accounts.feeDiscountPubkey && (\n        <tr>\n          <td>Fee Discount</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={info.accounts.feeDiscountPubkey} alignRight link />\n          </td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-end\">{info.data.side.toUpperCase()}</td>\n      </tr>\n\n      <tr>\n        <td>Order Type</td>\n        <td className=\"text-lg-end\">{info.data.orderType}</td>\n      </tr>\n\n      <tr>\n        <td>Limit Price</td>\n        <td className=\"text-lg-end\">{info.data.limitPrice.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Max Base Quantity</td>\n        <td className=\"text-lg-end\">\n          {info.data.maxBaseQuantity.toString(10)}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Max Quote Quantity</td>\n        <td className=\"text-lg-end\">\n          {info.data.maxQuoteQuantity.toString(10)}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Client Id</td>\n        <td className=\"text-lg-end\">{info.data.clientId.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Match Iteration Limit</td>\n        <td className=\"text-lg-end\">{info.data.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrderV2 } from \"./types\";\n\nexport function CancelOrderV2DetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrderV2;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Cancel Order v2\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-end\">{info.data.side}</td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-end\">{info.data.orderId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrderByClientIdV2 } from \"./types\";\n\nexport function CancelOrderByClientIdV2DetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrderByClientIdV2;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Cancel Order By Client Id v2\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Client Id</td>\n        <td className=\"text-lg-end\">{info.data.clientId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CloseOpenOrders } from \"./types\";\n\nexport function CloseOpenOrdersDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CloseOpenOrders;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Close Open Orders\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Rent Receiver</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.rentReceiver} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitOpenOrders } from \"./types\";\n\nexport function InitOpenOrdersDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitOpenOrders;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Init Open Orders\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      {info.accounts.openOrdersMarketAuthority && (\n        <tr>\n          <td>Open Orders Market Authority</td>\n          <td className=\"text-lg-end\">\n            <Address\n              pubkey={info.accounts.openOrdersMarketAuthority}\n              alignRight\n              link\n            />\n          </td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { Prune } from \"./types\";\n\nexport function PruneDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: Prune;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Prune\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Prune Authority</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.pruneAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.openOrdersOwner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Iteration Limit</td>\n        <td className=\"text-lg-end\">{info.data.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { ConsumeEventsPermissioned } from \"./types\";\n\nexport function ConsumeEventsPermissionedDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: ConsumeEventsPermissioned;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Consume Events Permissioned\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Crank Authority</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.accounts.crankAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Accounts</td>\n        <td className=\"text-lg-end\">\n          {info.accounts.openOrders.map((account, index) => {\n            return <Address pubkey={account} key={index} alignRight link />;\n          })}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Limit</td>\n        <td className=\"text-lg-end\">{info.data.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  decodeCancelOrder,\n  decodeCancelOrderByClientId,\n  decodeCancelOrderByClientIdV2,\n  decodeCancelOrderV2,\n  decodeCloseOpenOrders,\n  decodeConsumeEvents,\n  decodeConsumeEventsPermissioned,\n  decodeDisableMarket,\n  decodeInitializeMarket,\n  decodeInitOpenOrders,\n  decodeMatchOrders,\n  decodeNewOrder,\n  decodeNewOrderV3,\n  decodePrune,\n  decodeSettleFunds,\n  decodeSweepFees,\n  parseSerumInstructionKey,\n  parseSerumInstructionTitle,\n} from \"./serum/types\";\nimport { NewOrderDetailsCard } from \"./serum/NewOrderDetailsCard\";\nimport { MatchOrdersDetailsCard } from \"./serum/MatchOrdersDetailsCard\";\nimport { InitializeMarketDetailsCard } from \"./serum/InitializeMarketDetailsCard\";\nimport { ConsumeEventsDetailsCard } from \"./serum/ConsumeEventsDetails\";\nimport { CancelOrderDetailsCard } from \"./serum/CancelOrderDetails\";\nimport { CancelOrderByClientIdDetailsCard } from \"./serum/CancelOrderByClientIdDetails\";\nimport { SettleFundsDetailsCard } from \"./serum/SettleFundsDetailsCard\";\nimport { DisableMarketDetailsCard } from \"./serum/DisableMarketDetails\";\nimport { SweepFeesDetailsCard } from \"./serum/SweepFeesDetails\";\nimport { NewOrderV3DetailsCard } from \"./serum/NewOrderV3DetailsCard\";\nimport { CancelOrderV2DetailsCard } from \"./serum/CancelOrderV2Details\";\nimport { CancelOrderByClientIdV2DetailsCard } from \"./serum/CancelOrderByClientIdV2Details\";\nimport { CloseOpenOrdersDetailsCard } from \"./serum/CloseOpenOrdersDetails\";\nimport { InitOpenOrdersDetailsCard } from \"./serum/InitOpenOrdersDetails\";\nimport { PruneDetailsCard } from \"./serum/PruneDetails\";\nimport { ConsumeEventsPermissionedDetailsCard } from \"./serum/ConsumeEventsPermissionedDetails\";\n\nexport function SerumDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, signature, innerCards, childIndex } = props;\n\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseSerumInstructionTitle(ix);\n    switch (parseSerumInstructionKey(ix)) {\n      case \"initializeMarket\":\n        return (\n          <InitializeMarketDetailsCard\n            info={decodeInitializeMarket(ix)}\n            {...props}\n          />\n        );\n      case \"newOrder\":\n        return <NewOrderDetailsCard info={decodeNewOrder(ix)} {...props} />;\n      case \"matchOrders\":\n        return (\n          <MatchOrdersDetailsCard info={decodeMatchOrders(ix)} {...props} />\n        );\n      case \"consumeEvents\":\n        return (\n          <ConsumeEventsDetailsCard info={decodeConsumeEvents(ix)} {...props} />\n        );\n      case \"cancelOrder\":\n        return (\n          <CancelOrderDetailsCard info={decodeCancelOrder(ix)} {...props} />\n        );\n      case \"settleFunds\":\n        return (\n          <SettleFundsDetailsCard info={decodeSettleFunds(ix)} {...props} />\n        );\n      case \"cancelOrderByClientId\":\n        return (\n          <CancelOrderByClientIdDetailsCard\n            info={decodeCancelOrderByClientId(ix)}\n            {...props}\n          />\n        );\n      case \"disableMarket\":\n        return (\n          <DisableMarketDetailsCard info={decodeDisableMarket(ix)} {...props} />\n        );\n      case \"sweepFees\":\n        return <SweepFeesDetailsCard info={decodeSweepFees(ix)} {...props} />;\n      case \"newOrderV3\":\n        return <NewOrderV3DetailsCard info={decodeNewOrderV3(ix)} {...props} />;\n      case \"cancelOrderV2\":\n        return (\n          <CancelOrderV2DetailsCard info={decodeCancelOrderV2(ix)} {...props} />\n        );\n      case \"cancelOrderByClientIdV2\":\n        return (\n          <CancelOrderByClientIdV2DetailsCard\n            info={decodeCancelOrderByClientIdV2(ix)}\n            {...props}\n          />\n        );\n      case \"closeOpenOrders\":\n        return (\n          <CloseOpenOrdersDetailsCard\n            info={decodeCloseOpenOrders(ix)}\n            {...props}\n          />\n        );\n      case \"initOpenOrders\":\n        return (\n          <InitOpenOrdersDetailsCard\n            info={decodeInitOpenOrders(ix)}\n            {...props}\n          />\n        );\n      case \"prune\":\n        return <PruneDetailsCard info={decodePrune(ix)} {...props} />;\n      case \"consumeEventsPermissioned\":\n        return (\n          <ConsumeEventsPermissionedDetailsCard\n            info={decodeConsumeEventsPermissioned(ix)}\n            {...props}\n          />\n        );\n    }\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Serum Program: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  SystemProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeInfo } from \"./types\";\nimport { displayTimestampUtc } from \"utils/date\";\nimport { Epoch } from \"components/common/Epoch\";\n\nexport function InitializeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Program: Initialize Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.authorized.staker} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.authorized.withdrawer} alignRight link />\n        </td>\n      </tr>\n\n      {info.lockup.epoch > 0 && (\n        <tr>\n          <td>Lockup Expiry Epoch</td>\n          <td className=\"text-lg-end\">\n            <Epoch epoch={info.lockup.epoch} link />\n          </td>\n        </tr>\n      )}\n\n      {info.lockup.unixTimestamp > 0 && (\n        <tr>\n          <td>Lockup Expiry Timestamp</td>\n          <td className=\"text-lg-end font-monospace\">\n            {displayTimestampUtc(info.lockup.unixTimestamp * 1000)}\n          </td>\n        </tr>\n      )}\n\n      {!info.lockup.custodian.equals(SystemProgram.programId) && (\n        <tr>\n          <td>Lockup Custodian Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={info.lockup.custodian} alignRight link />\n          </td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { DelegateInfo } from \"./types\";\n\nexport function DelegateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: DelegateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Program: Delegate Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Delegated Vote Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.voteAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AuthorizeInfo } from \"./types\";\n\nexport function AuthorizeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AuthorizeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Program: Authorize\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Old Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.authority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.newAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Type</td>\n        <td className=\"text-lg-end\">{info.authorityType}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SplitInfo } from \"./types\";\n\nexport function SplitDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SplitInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Program: Split Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Stake Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.newSplitAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Split Amount (SOL)</td>\n        <td className=\"text-lg-end\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { WithdrawInfo } from \"./types\";\n\nexport function WithdrawDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: WithdrawInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Withdraw Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.withdrawAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Amount (SOL)</td>\n        <td className=\"text-lg-end\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { DeactivateInfo } from \"./types\";\n\nexport function DeactivateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: DeactivateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Program: Deactivate Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, type, string, Infer } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type InitializeInfo = Infer<typeof InitializeInfo>;\nexport const InitializeInfo = type({\n  stakeAccount: PublicKeyFromString,\n  authorized: type({\n    staker: PublicKeyFromString,\n    withdrawer: PublicKeyFromString,\n  }),\n  lockup: type({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: PublicKeyFromString,\n  }),\n});\n\nexport type DelegateInfo = Infer<typeof DelegateInfo>;\nexport const DelegateInfo = type({\n  stakeAccount: PublicKeyFromString,\n  voteAccount: PublicKeyFromString,\n  stakeAuthority: PublicKeyFromString,\n});\n\nexport type AuthorizeInfo = Infer<typeof AuthorizeInfo>;\nexport const AuthorizeInfo = type({\n  authorityType: string(),\n  stakeAccount: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  newAuthority: PublicKeyFromString,\n});\n\nexport type SplitInfo = Infer<typeof SplitInfo>;\nexport const SplitInfo = type({\n  stakeAccount: PublicKeyFromString,\n  stakeAuthority: PublicKeyFromString,\n  newSplitAccount: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type WithdrawInfo = Infer<typeof WithdrawInfo>;\nexport const WithdrawInfo = type({\n  stakeAccount: PublicKeyFromString,\n  withdrawAuthority: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type DeactivateInfo = Infer<typeof DeactivateInfo>;\nexport const DeactivateInfo = type({\n  stakeAccount: PublicKeyFromString,\n  stakeAuthority: PublicKeyFromString,\n});\n\nexport type MergeInfo = Infer<typeof MergeInfo>;\nexport const MergeInfo = type({\n  source: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  stakeAuthority: PublicKeyFromString,\n  stakeHistorySysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n});\n\nexport type StakeInstructionType = Infer<typeof StakeInstructionType>;\nexport const StakeInstructionType = enums([\n  \"initialize\",\n  \"delegate\",\n  \"authorize\",\n  \"split\",\n  \"withdraw\",\n  \"deactivate\",\n  \"merge\",\n]);\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { MergeInfo } from \"./types\";\n\nexport function MergeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: MergeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Program: Merge Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Source</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Destination</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Clock Sysvar</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.clockSysvar} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake History Sysvar</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.stakeHistorySysvar} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedTransaction,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { InitializeDetailsCard } from \"./InitializeDetailsCard\";\nimport { DelegateDetailsCard } from \"./DelegateDetailsCard\";\nimport { AuthorizeDetailsCard } from \"./AuthorizeDetailsCard\";\nimport { SplitDetailsCard } from \"./SplitDetailsCard\";\nimport { WithdrawDetailsCard } from \"./WithdrawDetailsCard\";\nimport { DeactivateDetailsCard } from \"./DeactivateDetailsCard\";\nimport { ParsedInfo } from \"validators\";\nimport { reportError } from \"utils/sentry\";\nimport { create } from \"superstruct\";\nimport {\n  AuthorizeInfo,\n  DeactivateInfo,\n  DelegateInfo,\n  InitializeInfo,\n  MergeInfo,\n  SplitInfo,\n  WithdrawInfo,\n} from \"./types\";\nimport { MergeDetailsCard } from \"./MergeDetailsCard\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function StakeDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n\n    switch (parsed.type) {\n      case \"initialize\": {\n        const info = create(parsed.info, InitializeInfo);\n        return <InitializeDetailsCard info={info} {...props} />;\n      }\n      case \"delegate\": {\n        const info = create(parsed.info, DelegateInfo);\n        return <DelegateDetailsCard info={info} {...props} />;\n      }\n      case \"authorize\": {\n        const info = create(parsed.info, AuthorizeInfo);\n        return <AuthorizeDetailsCard info={info} {...props} />;\n      }\n      case \"split\": {\n        const info = create(parsed.info, SplitInfo);\n        return <SplitDetailsCard info={info} {...props} />;\n      }\n      case \"withdraw\": {\n        const info = create(parsed.info, WithdrawInfo);\n        return <WithdrawDetailsCard info={info} {...props} />;\n      }\n      case \"deactivate\": {\n        const info = create(parsed.info, DeactivateInfo);\n        return <DeactivateDetailsCard info={info} {...props} />;\n      }\n      case \"merge\": {\n        const info = create(parsed.info, MergeInfo);\n        return <MergeDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { TransferInfo } from \"./types\";\n\nexport function TransferDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: TransferInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Transfer\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (SOL)</td>\n        <td className=\"text-lg-end\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AllocateInfo } from \"./types\";\n\nexport function AllocateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AllocateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Allocate Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Data Size</td>\n        <td className=\"text-lg-end\">{info.space} byte(s)</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { AllocateWithSeedInfo } from \"./types\";\n\nexport function AllocateWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AllocateWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Allocate Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-end\">\n          <Copyable text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Data Size</td>\n        <td className=\"text-lg-end\">{info.space} byte(s)</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Program Id</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AssignInfo } from \"./types\";\n\nexport function AssignDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AssignInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Assign Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Assigned Program Id</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { AssignWithSeedInfo } from \"./types\";\n\nexport function AssignWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AssignWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Assign Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-end\">\n          <Copyable text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Assigned Program Id</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CreateAccountInfo } from \"./types\";\n\nexport function CreateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateAccountInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Create Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.newAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (SOL)</td>\n        <td className=\"text-lg-end\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Data Size</td>\n        <td className=\"text-lg-end\">{info.space} byte(s)</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Program Id</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { CreateAccountWithSeedInfo } from \"./types\";\n\nexport function CreateWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateAccountWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Create Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.newAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-end\">\n          <Copyable text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (SOL)</td>\n        <td className=\"text-lg-end\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Data Size</td>\n        <td className=\"text-lg-end\">{info.space} byte(s)</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Program Id</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeNonceInfo } from \"./types\";\n\nexport function NonceInitializeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Initialize Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AdvanceNonceInfo } from \"./types\";\n\nexport function NonceAdvanceDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AdvanceNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Advance Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { WithdrawNonceInfo } from \"./types\";\n\nexport function NonceWithdrawDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: WithdrawNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Withdraw Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Amount (SOL)</td>\n        <td className=\"text-lg-end\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AuthorizeNonceInfo } from \"./types\";\n\nexport function NonceAuthorizeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AuthorizeNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Authorize Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Old Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Authority Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.newAuthorized} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { TransferWithSeedInfo } from \"./types\";\n\nexport function TransferWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: TransferWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"System Program: Transfer w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Destination Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.sourceBase} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (SOL)</td>\n        <td className=\"text-lg-end\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-end\">\n          <Copyable text={info.sourceSeed}>\n            <code>{info.sourceSeed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Source Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.sourceOwner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, type, string, Infer } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type CreateAccountInfo = Infer<typeof CreateAccountInfo>;\nexport const CreateAccountInfo = type({\n  source: PublicKeyFromString,\n  newAccount: PublicKeyFromString,\n  lamports: number(),\n  space: number(),\n  owner: PublicKeyFromString,\n});\n\nexport type AssignInfo = Infer<typeof AssignInfo>;\nexport const AssignInfo = type({\n  account: PublicKeyFromString,\n  owner: PublicKeyFromString,\n});\n\nexport type TransferInfo = Infer<typeof TransferInfo>;\nexport const TransferInfo = type({\n  source: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type CreateAccountWithSeedInfo = Infer<typeof CreateAccountWithSeedInfo>;\nexport const CreateAccountWithSeedInfo = type({\n  source: PublicKeyFromString,\n  newAccount: PublicKeyFromString,\n  base: PublicKeyFromString,\n  seed: string(),\n  lamports: number(),\n  space: number(),\n  owner: PublicKeyFromString,\n});\n\nexport type AdvanceNonceInfo = Infer<typeof AdvanceNonceInfo>;\nexport const AdvanceNonceInfo = type({\n  nonceAccount: PublicKeyFromString,\n  nonceAuthority: PublicKeyFromString,\n});\n\nexport type WithdrawNonceInfo = Infer<typeof WithdrawNonceInfo>;\nexport const WithdrawNonceInfo = type({\n  nonceAccount: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  nonceAuthority: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type InitializeNonceInfo = Infer<typeof InitializeNonceInfo>;\nexport const InitializeNonceInfo = type({\n  nonceAccount: PublicKeyFromString,\n  nonceAuthority: PublicKeyFromString,\n});\n\nexport type AuthorizeNonceInfo = Infer<typeof AuthorizeNonceInfo>;\nexport const AuthorizeNonceInfo = type({\n  nonceAccount: PublicKeyFromString,\n  nonceAuthority: PublicKeyFromString,\n  newAuthorized: PublicKeyFromString,\n});\n\nexport type AllocateInfo = Infer<typeof AllocateInfo>;\nexport const AllocateInfo = type({\n  account: PublicKeyFromString,\n  space: number(),\n});\n\nexport type AllocateWithSeedInfo = Infer<typeof AllocateWithSeedInfo>;\nexport const AllocateWithSeedInfo = type({\n  account: PublicKeyFromString,\n  base: PublicKeyFromString,\n  seed: string(),\n  space: number(),\n  owner: PublicKeyFromString,\n});\n\nexport type AssignWithSeedInfo = Infer<typeof AssignWithSeedInfo>;\nexport const AssignWithSeedInfo = type({\n  account: PublicKeyFromString,\n  base: PublicKeyFromString,\n  seed: string(),\n  owner: PublicKeyFromString,\n});\n\nexport type TransferWithSeedInfo = Infer<typeof TransferWithSeedInfo>;\nexport const TransferWithSeedInfo = type({\n  source: PublicKeyFromString,\n  sourceBase: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  lamports: number(),\n  sourceSeed: string(),\n  sourceOwner: PublicKeyFromString,\n});\n\nexport type SystemInstructionType = Infer<typeof SystemInstructionType>;\nexport const SystemInstructionType = enums([\n  \"createAccount\",\n  \"createAccountWithSeed\",\n  \"allocate\",\n  \"allocateWithSeed\",\n  \"assign\",\n  \"assignWithSeed\",\n  \"transfer\",\n  \"advanceNonce\",\n  \"withdrawNonce\",\n  \"authorizeNonce\",\n  \"initializeNonce\",\n  \"transferWithSeed\",\n]);\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedInstruction,\n  ParsedTransaction,\n} from \"@solana/web3.js\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { TransferDetailsCard } from \"./TransferDetailsCard\";\nimport { AllocateDetailsCard } from \"./AllocateDetailsCard\";\nimport { AllocateWithSeedDetailsCard } from \"./AllocateWithSeedDetailsCard\";\nimport { AssignDetailsCard } from \"./AssignDetailsCard\";\nimport { AssignWithSeedDetailsCard } from \"./AssignWithSeedDetailsCard\";\nimport { CreateDetailsCard } from \"./CreateDetailsCard\";\nimport { CreateWithSeedDetailsCard } from \"./CreateWithSeedDetailsCard\";\nimport { NonceInitializeDetailsCard } from \"./NonceInitializeDetailsCard\";\nimport { NonceAdvanceDetailsCard } from \"./NonceAdvanceDetailsCard\";\nimport { NonceWithdrawDetailsCard } from \"./NonceWithdrawDetailsCard\";\nimport { NonceAuthorizeDetailsCard } from \"./NonceAuthorizeDetailsCard\";\nimport { TransferWithSeedDetailsCard } from \"./TransferWithSeedDetailsCard\";\nimport { ParsedInfo } from \"validators\";\nimport { create } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  CreateAccountInfo,\n  CreateAccountWithSeedInfo,\n  AllocateInfo,\n  AllocateWithSeedInfo,\n  AssignInfo,\n  AssignWithSeedInfo,\n  TransferInfo,\n  AdvanceNonceInfo,\n  AuthorizeNonceInfo,\n  InitializeNonceInfo,\n  WithdrawNonceInfo,\n  TransferWithSeedInfo,\n} from \"./types\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function SystemDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n    switch (parsed.type) {\n      case \"createAccount\": {\n        const info = create(parsed.info, CreateAccountInfo);\n        return <CreateDetailsCard info={info} {...props} />;\n      }\n      case \"createAccountWithSeed\": {\n        const info = create(parsed.info, CreateAccountWithSeedInfo);\n        return <CreateWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"allocate\": {\n        const info = create(parsed.info, AllocateInfo);\n        return <AllocateDetailsCard info={info} {...props} />;\n      }\n      case \"allocateWithSeed\": {\n        const info = create(parsed.info, AllocateWithSeedInfo);\n        return <AllocateWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"assign\": {\n        const info = create(parsed.info, AssignInfo);\n        return <AssignDetailsCard info={info} {...props} />;\n      }\n      case \"assignWithSeed\": {\n        const info = create(parsed.info, AssignWithSeedInfo);\n        return <AssignWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"transfer\": {\n        const info = create(parsed.info, TransferInfo);\n        return <TransferDetailsCard info={info} {...props} />;\n      }\n      case \"advanceNonce\": {\n        const info = create(parsed.info, AdvanceNonceInfo);\n        return <NonceAdvanceDetailsCard info={info} {...props} />;\n      }\n      case \"withdrawNonce\": {\n        const info = create(parsed.info, WithdrawNonceInfo);\n        return <NonceWithdrawDetailsCard info={info} {...props} />;\n      }\n      case \"authorizeNonce\": {\n        const info = create(parsed.info, AuthorizeNonceInfo);\n        return <NonceAuthorizeDetailsCard info={info} {...props} />;\n      }\n      case \"initializeNonce\": {\n        const info = create(parsed.info, InitializeNonceInfo);\n        return <NonceInitializeDetailsCard info={info} {...props} />;\n      }\n      case \"transferWithSeed\": {\n        const info = create(parsed.info, TransferWithSeedInfo);\n        return <TransferWithSeedDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  enums,\n  type,\n  Infer,\n  number,\n  string,\n  optional,\n  array,\n  nullable,\n  union,\n} from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type TokenAmountUi = Infer<typeof TokenAmountUi>;\nexport const TokenAmountUi = type({\n  amount: string(),\n  decimals: number(),\n  uiAmountString: string(),\n});\n\nconst InitializeMint = type({\n  mint: PublicKeyFromString,\n  decimals: number(),\n  mintAuthority: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  freezeAuthority: optional(PublicKeyFromString),\n});\n\nconst InitializeAccount = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  owner: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n});\n\nconst InitializeMultisig = type({\n  multisig: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  signers: array(PublicKeyFromString),\n  m: number(),\n});\n\nexport type Transfer = Infer<typeof Transfer>;\nexport const Transfer = type({\n  source: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  amount: union([string(), number()]),\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst Approve = type({\n  source: PublicKeyFromString,\n  delegate: PublicKeyFromString,\n  amount: union([string(), number()]),\n  owner: optional(PublicKeyFromString),\n  multisigOwner: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst Revoke = type({\n  source: PublicKeyFromString,\n  owner: optional(PublicKeyFromString),\n  multisigOwner: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst AuthorityType = enums([\n  \"mintTokens\",\n  \"freezeAccount\",\n  \"accountOwner\",\n  \"closeAccount\",\n]);\n\nconst SetAuthority = type({\n  mint: optional(PublicKeyFromString),\n  account: optional(PublicKeyFromString),\n  authorityType: AuthorityType,\n  newAuthority: nullable(PublicKeyFromString),\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst MintTo = type({\n  mint: PublicKeyFromString,\n  account: PublicKeyFromString,\n  amount: union([string(), number()]),\n  mintAuthority: optional(PublicKeyFromString),\n  multisigMintAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst Burn = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  amount: union([string(), number()]),\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst CloseAccount = type({\n  account: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  owner: optional(PublicKeyFromString),\n  multisigOwner: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst FreezeAccount = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  freezeAuthority: optional(PublicKeyFromString),\n  multisigFreezeAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst ThawAccount = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  freezeAuthority: optional(PublicKeyFromString),\n  multisigFreezeAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nexport type TransferChecked = Infer<typeof TransferChecked>;\nexport const TransferChecked = type({\n  source: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst ApproveChecked = type({\n  source: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  delegate: PublicKeyFromString,\n  owner: optional(PublicKeyFromString),\n  multisigOwner: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst MintToChecked = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  mintAuthority: optional(PublicKeyFromString),\n  multisigMintAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst BurnChecked = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n  tokenAmount: TokenAmountUi,\n});\n\nexport type TokenInstructionType = Infer<typeof TokenInstructionType>;\nexport const TokenInstructionType = enums([\n  \"initializeMint\",\n  \"initializeAccount\",\n  \"initializeMultisig\",\n  \"transfer\",\n  \"approve\",\n  \"revoke\",\n  \"setAuthority\",\n  \"mintTo\",\n  \"burn\",\n  \"closeAccount\",\n  \"freezeAccount\",\n  \"thawAccount\",\n  \"transfer2\",\n  \"approve2\",\n  \"mintTo2\",\n  \"burn2\",\n  \"transferChecked\",\n  \"approveChecked\",\n  \"mintToChecked\",\n  \"burnChecked\",\n]);\n\nexport const IX_STRUCTS = {\n  initializeMint: InitializeMint,\n  initializeAccount: InitializeAccount,\n  initializeMultisig: InitializeMultisig,\n  transfer: Transfer,\n  approve: Approve,\n  revoke: Revoke,\n  setAuthority: SetAuthority,\n  mintTo: MintTo,\n  burn: Burn,\n  closeAccount: CloseAccount,\n  freezeAccount: FreezeAccount,\n  thawAccount: ThawAccount,\n  transfer2: TransferChecked,\n  approve2: ApproveChecked,\n  mintTo2: MintToChecked,\n  burn2: BurnChecked,\n  transferChecked: TransferChecked,\n  approveChecked: ApproveChecked,\n  mintToChecked: MintToChecked,\n  burnChecked: BurnChecked,\n};\n\nexport const IX_TITLES = {\n  initializeMint: \"Initialize Mint\",\n  initializeAccount: \"Initialize Account\",\n  initializeMultisig: \"Initialize Multisig\",\n  transfer: \"Transfer\",\n  approve: \"Approve\",\n  revoke: \"Revoke\",\n  setAuthority: \"Set Authority\",\n  mintTo: \"Mint To\",\n  burn: \"Burn\",\n  closeAccount: \"Close Account\",\n  freezeAccount: \"Freeze Account\",\n  thawAccount: \"Thaw Account\",\n  transfer2: \"Transfer (Checked)\",\n  approve2: \"Approve (Checked)\",\n  mintTo2: \"Mint To (Checked)\",\n  burn2: \"Burn (Checked)\",\n  transferChecked: \"Transfer (Checked)\",\n  approveChecked: \"Approve (Checked)\",\n  mintToChecked: \"Mint To (Checked)\",\n  burnChecked: \"Burn (Checked)\",\n};\n","import React from \"react\";\nimport { create } from \"superstruct\";\nimport {\n  SignatureResult,\n  ParsedTransaction,\n  PublicKey,\n  ParsedInstruction,\n} from \"@solana/web3.js\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport {\n  IX_STRUCTS,\n  TokenInstructionType,\n  IX_TITLES,\n  TokenAmountUi,\n} from \"./types\";\nimport { ParsedInfo } from \"validators\";\nimport {\n  useTokenAccountInfo,\n  useMintAccountInfo,\n  useFetchAccountInfo,\n} from \"providers/accounts\";\nimport { normalizeTokenAmount } from \"utils\";\nimport { reportError } from \"utils/sentry\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function TokenDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n    const { type: rawType, info } = parsed;\n    const type = create(rawType, TokenInstructionType);\n    const title = `Token Program: ${IX_TITLES[type]}`;\n    const created = create(info, IX_STRUCTS[type] as any);\n    return <TokenInstruction title={title} info={created} {...props} />;\n  } catch (err) {\n    reportError(err, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n\ntype InfoProps = {\n  ix: ParsedInstruction;\n  info: any;\n  result: SignatureResult;\n  index: number;\n  title: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nfunction TokenInstruction(props: InfoProps) {\n  const { mintAddress: infoMintAddress, tokenAddress } = React.useMemo(() => {\n    let mintAddress: string | undefined;\n    let tokenAddress: string | undefined;\n\n    // No sense fetching accounts if we don't need to convert an amount\n    if (!(\"amount\" in props.info)) return {};\n\n    if (\"mint\" in props.info && props.info.mint instanceof PublicKey) {\n      mintAddress = props.info.mint.toBase58();\n    } else if (\n      \"account\" in props.info &&\n      props.info.account instanceof PublicKey\n    ) {\n      tokenAddress = props.info.account.toBase58();\n    } else if (\n      \"source\" in props.info &&\n      props.info.source instanceof PublicKey\n    ) {\n      tokenAddress = props.info.source.toBase58();\n    }\n    return {\n      mintAddress,\n      tokenAddress,\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const tokenInfo = useTokenAccountInfo(tokenAddress);\n  const mintAddress = infoMintAddress || tokenInfo?.mint.toBase58();\n  const mintInfo = useMintAccountInfo(mintAddress);\n  const { tokenRegistry } = useTokenRegistry();\n  const fetchAccountInfo = useFetchAccountInfo();\n\n  React.useEffect(() => {\n    if (tokenAddress && !tokenInfo) {\n      fetchAccountInfo(new PublicKey(tokenAddress));\n    }\n  }, [fetchAccountInfo, tokenAddress]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    if (mintAddress && !mintInfo) {\n      fetchAccountInfo(new PublicKey(mintAddress));\n    }\n  }, [fetchAccountInfo, mintAddress]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const attributes: JSX.Element[] = [];\n  let decimals = mintInfo?.decimals;\n  let tokenSymbol = \"\";\n\n  if (\"tokenAmount\" in props.info) {\n    decimals = props.info.tokenAmount.decimals;\n  }\n\n  if (mintAddress) {\n    const tokenDetails = tokenRegistry.get(mintAddress);\n\n    if (tokenDetails) {\n      tokenSymbol = tokenDetails.symbol;\n    }\n\n    attributes.push(\n      <tr key={mintAddress}>\n        <td>Token</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={new PublicKey(mintAddress)} alignRight link />\n        </td>\n      </tr>\n    );\n  }\n\n  for (let key in props.info) {\n    let value = props.info[key];\n    if (value === undefined) continue;\n\n    // Flatten lists of public keys\n    if (Array.isArray(value) && value.every((v) => v instanceof PublicKey)) {\n      for (let i = 0; i < value.length; i++) {\n        let publicKey = value[i];\n        let label = `${key.charAt(0).toUpperCase() + key.slice(1)} - #${i + 1}`;\n\n        attributes.push(\n          <tr key={key + i}>\n            <td>{label}</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={publicKey} alignRight link />\n            </td>\n          </tr>\n        );\n      }\n      continue;\n    }\n\n    if (key === \"tokenAmount\") {\n      key = \"amount\";\n      value = (value as TokenAmountUi).amount;\n    }\n\n    let tag;\n    let labelSuffix = \"\";\n    if (value instanceof PublicKey) {\n      tag = <Address pubkey={value} alignRight link />;\n    } else if (key === \"amount\") {\n      let amount;\n      if (decimals === undefined) {\n        labelSuffix = \" (raw)\";\n        amount = new Intl.NumberFormat(\"en-US\").format(value);\n      } else {\n        amount = new Intl.NumberFormat(\"en-US\", {\n          minimumFractionDigits: decimals,\n          maximumFractionDigits: decimals,\n        }).format(normalizeTokenAmount(value, decimals));\n      }\n      tag = (\n        <>\n          {amount} {tokenSymbol}\n        </>\n      );\n    } else {\n      tag = <>{value}</>;\n    }\n\n    let label = key.charAt(0).toUpperCase() + key.slice(1) + labelSuffix;\n\n    attributes.push(\n      <tr key={key}>\n        <td>{label}</td>\n        <td className=\"text-lg-end\">{tag}</td>\n      </tr>\n    );\n  }\n\n  return (\n    <InstructionCard\n      ix={props.ix}\n      index={props.index}\n      result={props.result}\n      title={props.title}\n      innerCards={props.innerCards}\n      childIndex={props.childIndex}\n    >\n      {attributes}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { parseTokenLendingInstructionTitle } from \"./token-lending/types\";\n\nexport function TokenLendingDetailsCard({\n  ix,\n  index,\n  result,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseTokenLendingInstructionTitle(ix);\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Token Lending: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { parseTokenSwapInstructionTitle } from \"./token-swap/types\";\n\nexport function TokenSwapDetailsCard({\n  ix,\n  index,\n  result,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseTokenSwapInstructionTitle(ix);\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Token Swap: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import { TransactionInstruction } from \"@solana/web3.js\";\n\nexport const PROGRAM_IDS: string[] = [\n  \"WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC\", // mainnet / testnet / devnet\n];\n\nconst INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Bridge\",\n  1: \"Transfer Assets Out\",\n  2: \"Post VAA\",\n  3: \"Evict Transfer Proposal\",\n  4: \"Evict Claimed VAA\",\n  5: \"Poke Proposal\",\n  6: \"Verify Signatures\",\n  7: \"Create Wrapped Asset\",\n};\n\nexport function isWormholeInstruction(\n  instruction: TransactionInstruction\n): boolean {\n  return PROGRAM_IDS.includes(instruction.programId.toBase58());\n}\n\nexport function parsWormholeInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Wormhole instruction code: ${code}`);\n  }\n\n  return INSTRUCTION_LOOKUP[code];\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { parsWormholeInstructionTitle } from \"./wormhole/types\";\n\nexport function WormholeDetailsCard({\n  ix,\n  index,\n  result,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parsWormholeInstructionTitle(ix);\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Wormhole: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrder } from \"./types\";\n\nexport function CancelOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum Program: Cancel Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.signalProviderKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.openOrdersKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.serumEventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Bids</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.serumMarketBids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Asks</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.serumMarketAsks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Program ID</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.dexProgramKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-end\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-end\">{info.side}</td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-end\">{info.orderId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CollectFees } from \"./types\";\n\nexport function CollectFeesDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CollectFees;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Collect Fees\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.signalProviderPoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Insurance Fund</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.bonfidaFeePoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Buy and Burn</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.bonfidaBnBPTKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-end\">{info.poolSeed}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CreateBot } from \"./types\";\n\nexport function CreateBotDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateBot;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Create Bot\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.mintKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Target Pool Token Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.targetPoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Program ID</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.serumProgramId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.signalProviderKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-end\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Fee Ratio</td>\n        <td className=\"text-lg-end\">{info.feeRatio}</td>\n      </tr>\n\n      <tr>\n        <td>Fee Collection Period</td>\n        <td className=\"text-lg-end\">{info.feeCollectionPeriod}</td>\n      </tr>\n\n      <tr>\n        <td>Serum Markets</td>\n        <td className=\"text-lg-end\">{info.markets}</td>\n      </tr>\n\n      <tr>\n        <td>Deposit Amounts</td>\n        <td className=\"text-lg-end\">{info.depositAmounts}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { Deposit } from \"./types\";\n\nexport function DepositDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: Deposit;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Deposit\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider Fee Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.sigProviderFeeReceiverKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Insurance Funds</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.bonfidaFeeReceiverKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Buy and Burn</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.bonfidaBuyAndBurnKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.mintKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Target Pool Token Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.targetPoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-end\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Pool Token Amount</td>\n        <td className=\"text-lg-end\">{info.poolTokenAmount.toString()}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeBot } from \"./types\";\n\nexport function InitializeBotDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeBot;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Initialize Bot\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Account</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.poolAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Mint Account</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.mintAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-end\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Max Number of Assets</td>\n        <td className=\"text-lg-end\">{info.maxNumberOfAsset}</td>\n      </tr>\n\n      <tr>\n        <td>Number of Markets</td>\n        <td className=\"text-lg-end\">{info.numberOfMarkets}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { Redeem } from \"./types\";\n\nexport function RedeemDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: Redeem;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Redeem\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.mintKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Source Bot Token Owner</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.sourcePoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Source Bot Token Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.sourcePoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-end\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Pool Token Amount</td>\n        <td className=\"text-lg-end\">{info.poolTokenAmount}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SettleFunds } from \"./types\";\n\nexport function SettleFundsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SettleFunds;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Settle Funds\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.openOrdersKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.poolMintKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Coin Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.coinVaultKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pc Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.pcVaultKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot's Coin Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.coinPoolAssetKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot's Pc Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.pcPoolAssetKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.vaultSignerKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Program ID</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.dexProgramKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-end\">{info.poolSeed}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  TransactionInstruction,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CreateOrder } from \"./types\";\n\nexport function CreateOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  console.log(\"Test\");\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Create Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.signalProviderKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Payer Bot Asset Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.payerPoolAssetKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Order</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.openOrdersKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Request Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.serumRequestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Event Queue</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.serumEventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Bids</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.serumMarketBids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Asks</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.serumMarketAsks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Coin Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.coinVaultKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pc Vault</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.pcVaultKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Program ID</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={info.dexProgramKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={new PublicKey(info.targetMint)} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-end\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-end\">{info.side}</td>\n      </tr>\n\n      <tr>\n        <td>Limit Price</td>\n        <td className=\"text-lg-end\">{info.limitPrice}</td>\n      </tr>\n\n      <tr>\n        <td>Ratio to Trade</td>\n        <td className=\"text-lg-end\">{info.ratioOfPoolAssetsToTrade}</td>\n      </tr>\n\n      <tr>\n        <td>Order Type</td>\n        <td className=\"text-lg-end\">{info.orderType}</td>\n      </tr>\n\n      <tr>\n        <td>Coin Lot Size</td>\n        <td className=\"text-lg-end\">{info.coinLotSize.toString()}</td>\n      </tr>\n\n      <tr>\n        <td>Pc Lot Size</td>\n        <td className=\"text-lg-end\">{info.pcLotSize.toString()}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  decodeCancelOrder,\n  decodeInitializeBot,\n  decodeCreateBot,\n  decodeDeposit,\n  decodeCreateOrder,\n  decodeSettleFunds,\n  decodeRedeem,\n  decodeCollectFees,\n  parseBonfidaBotInstructionTitle,\n} from \"./bonfida-bot/types\";\nimport { CancelOrderDetailsCard } from \"./bonfida-bot/CancelOrderDetails\";\nimport { CollectFeesDetailsCard } from \"./bonfida-bot/CollectFeesDetails\";\nimport { CreateBotDetailsCard } from \"./bonfida-bot/CreateBotDetails\";\nimport { DepositDetailsCard } from \"./bonfida-bot/DepositDetails\";\nimport { InitializeBotDetailsCard } from \"./bonfida-bot/InitializeBotDetails\";\nimport { RedeemDetailsCard } from \"./bonfida-bot/RedeemDetails\";\nimport { SettleFundsDetailsCard } from \"./bonfida-bot/SettleFundsDetails\";\nimport { CreateOrderDetailsCard } from \"./bonfida-bot/CreateOrderDetails\";\n\nexport function BonfidaBotDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, signature, innerCards, childIndex } = props;\n\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseBonfidaBotInstructionTitle(ix);\n\n    switch (title) {\n      case \"Initialize Bot\":\n        return (\n          <InitializeBotDetailsCard info={decodeInitializeBot(ix)} {...props} />\n        );\n      case \"Create Bot\":\n        return <CreateBotDetailsCard info={decodeCreateBot(ix)} {...props} />;\n      case \"Deposit\":\n        return <DepositDetailsCard info={decodeDeposit(ix)} {...props} />;\n      case \"Create Order\":\n        return (\n          <CreateOrderDetailsCard info={decodeCreateOrder(ix)} {...props} />\n        );\n      case \"Cancel Order\":\n        return (\n          <CancelOrderDetailsCard info={decodeCancelOrder(ix)} {...props} />\n        );\n      case \"Settle Funds\":\n        return (\n          <SettleFundsDetailsCard info={decodeSettleFunds(ix)} {...props} />\n        );\n      case \"settleFunds\":\n        return (\n          <SettleFundsDetailsCard info={decodeSettleFunds(ix)} {...props} />\n        );\n      case \"Redeem\":\n        return <RedeemDetailsCard info={decodeRedeem(ix)} {...props} />;\n      case \"Collect Fees\":\n        return (\n          <CollectFeesDetailsCard info={decodeCollectFees(ix)} {...props} />\n        );\n    }\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Bonfida Bot: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, nullable, number, type, string, Infer } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type WriteInfo = Infer<typeof WriteInfo>;\nexport const WriteInfo = type({\n  account: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  bytes: string(),\n  offset: number(),\n});\n\nexport type InitializeBufferInfo = Infer<typeof InitializeBufferInfo>;\nexport const InitializeBufferInfo = type({\n  account: PublicKeyFromString,\n  authority: PublicKeyFromString,\n});\n\nexport type UpgradeInfo = Infer<typeof UpgradeInfo>;\nexport const UpgradeInfo = type({\n  programDataAccount: PublicKeyFromString,\n  programAccount: PublicKeyFromString,\n  bufferAccount: PublicKeyFromString,\n  spillAccount: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n});\n\nexport type SetAuthorityInfo = Infer<typeof SetAuthorityInfo>;\nexport const SetAuthorityInfo = type({\n  account: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  newAuthority: nullable(PublicKeyFromString),\n});\n\nexport type DeployWithMaxDataLenInfo = Infer<typeof DeployWithMaxDataLenInfo>;\nexport const DeployWithMaxDataLenInfo = type({\n  programDataAccount: PublicKeyFromString,\n  programAccount: PublicKeyFromString,\n  payerAccount: PublicKeyFromString,\n  bufferAccount: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n  systemProgram: PublicKeyFromString,\n  maxDataLen: number(),\n});\n\nexport type UpgradeableBpfLoaderInstructionType = Infer<\n  typeof UpgradeableBpfLoaderInstructionType\n>;\nexport const UpgradeableBpfLoaderInstructionType = enums([\n  \"initializeBuffer\",\n  \"deployWithMaxDataLen\",\n  \"setAuthority\",\n  \"write\",\n  \"finalize\",\n]);\n","import React from \"react\";\nimport {\n  ParsedTransaction,\n  ParsedInstruction,\n  SignatureResult,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { create, Struct } from \"superstruct\";\nimport { camelToTitleCase } from \"utils\";\nimport { reportError } from \"utils/sentry\";\nimport { ParsedInfo } from \"validators\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport {\n  DeployWithMaxDataLenInfo,\n  InitializeBufferInfo,\n  SetAuthorityInfo,\n  UpgradeInfo,\n  WriteInfo,\n} from \"./types\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function BpfUpgradeableLoaderDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n    switch (parsed.type) {\n      case \"write\": {\n        return renderDetails<WriteInfo>(props, parsed, WriteInfo);\n      }\n      case \"upgrade\": {\n        return renderDetails<UpgradeInfo>(props, parsed, UpgradeInfo);\n      }\n      case \"setAuthority\": {\n        return renderDetails<SetAuthorityInfo>(props, parsed, SetAuthorityInfo);\n      }\n      case \"deployWithMaxDataLen\": {\n        return renderDetails<DeployWithMaxDataLenInfo>(\n          props,\n          parsed,\n          DeployWithMaxDataLenInfo\n        );\n      }\n      case \"initializeBuffer\": {\n        return renderDetails<InitializeBufferInfo>(\n          props,\n          parsed,\n          InitializeBufferInfo\n        );\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n\nfunction renderDetails<T>(\n  props: DetailsProps,\n  parsed: ParsedInfo,\n  struct: Struct<T>\n) {\n  const info = create(parsed.info, struct);\n\n  const attributes: JSX.Element[] = [];\n  for (let [key, value] of Object.entries(info)) {\n    if (value instanceof PublicKey) {\n      value = <Address pubkey={value} alignRight link />;\n    } else if (key === \"bytes\") {\n      value = (\n        <pre className=\"d-inline-block text-start mb-0 data-wrap\">{value}</pre>\n      );\n    }\n\n    attributes.push(\n      <tr key={key}>\n        <td>\n          {camelToTitleCase(key)}{\" \"}\n          {key === \"bytes\" && <span className=\"text-muted\">(Base 64)</span>}\n        </td>\n        <td className=\"text-lg-end\">{value}</td>\n      </tr>\n    );\n  }\n\n  return (\n    <InstructionCard\n      {...props}\n      title={`BPF Upgradeable Loader: ${camelToTitleCase(parsed.type)}`}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={props.ix.programId} alignRight link />\n        </td>\n      </tr>\n      {attributes}\n    </InstructionCard>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  array,\n  nullable,\n  number,\n  optional,\n  type,\n  string,\n  Infer,\n} from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type InitializeInfo = Infer<typeof InitializeInfo>;\nexport const InitializeInfo = type({\n  voteAccount: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n  node: PublicKeyFromString,\n  authorizedVoter: PublicKeyFromString,\n  authorizedWithdrawer: PublicKeyFromString,\n  commission: number(),\n});\n\nexport type AuthorizeInfo = Infer<typeof AuthorizeInfo>;\nexport const AuthorizeInfo = type({\n  voteAccount: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  newAuthority: PublicKeyFromString,\n  authorityType: number(),\n});\n\nexport type VoteInfo = Infer<typeof VoteInfo>;\nexport const VoteInfo = type({\n  clockSysvar: PublicKeyFromString,\n  slotHashesSysvar: PublicKeyFromString,\n  voteAccount: PublicKeyFromString,\n  voteAuthority: PublicKeyFromString,\n  vote: type({\n    hash: string(),\n    slots: array(number()),\n    timestamp: optional(nullable(number())),\n  }),\n});\n\nexport type WithdrawInfo = Infer<typeof WithdrawInfo>;\nexport const WithdrawInfo = type({\n  voteAccount: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  withdrawAuthority: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type UpdateValidatorInfo = Infer<typeof UpdateValidatorInfo>;\nexport const UpdateValidatorInfo = type({\n  voteAccount: PublicKeyFromString,\n  newValidatorIdentity: PublicKeyFromString,\n  withdrawAuthority: PublicKeyFromString,\n});\n\nexport type UpdateCommissionInfo = Infer<typeof UpdateCommissionInfo>;\nexport const UpdateCommissionInfo = type({\n  voteAccount: PublicKeyFromString,\n  withdrawAuthority: PublicKeyFromString,\n  commission: number(),\n});\n\nexport type VoteSwitchInfo = Infer<typeof VoteSwitchInfo>;\nexport const VoteSwitchInfo = type({\n  voteAccount: PublicKeyFromString,\n  slotHashesSysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n  voteAuthority: PublicKeyFromString,\n  vote: type({\n    hash: string(),\n    slots: array(number()),\n    timestamp: number(),\n  }),\n  hash: string(),\n});\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { create, Struct } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport {\n  UpdateCommissionInfo,\n  UpdateValidatorInfo,\n  VoteInfo,\n  VoteSwitchInfo,\n  WithdrawInfo,\n  AuthorizeInfo,\n} from \"./types\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { displayTimestamp } from \"utils/date\";\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { InstructionDetailsProps } from \"components/transaction/InstructionsSection\";\nimport { camelToTitleCase } from \"utils\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport function VoteDetailsCard(props: InstructionDetailsProps) {\n  const { url } = useCluster();\n\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n\n    switch (parsed.type) {\n      case \"vote\":\n        return renderDetails<VoteInfo>(props, parsed, VoteInfo);\n      case \"authorize\":\n        return renderDetails<AuthorizeInfo>(props, parsed, AuthorizeInfo);\n      case \"withdraw\":\n        return renderDetails<WithdrawInfo>(props, parsed, WithdrawInfo);\n      case \"updateValidator\":\n        return renderDetails<UpdateValidatorInfo>(\n          props,\n          parsed,\n          UpdateValidatorInfo\n        );\n      case \"updateCommission\":\n        return renderDetails<UpdateCommissionInfo>(\n          props,\n          parsed,\n          UpdateCommissionInfo\n        );\n      case \"voteSwitch\":\n        return renderDetails<VoteSwitchInfo>(props, parsed, VoteSwitchInfo);\n    }\n  } catch (error) {\n    reportError(error, {\n      url,\n    });\n  }\n\n  return <UnknownDetailsCard {...props} />;\n}\n\nfunction renderDetails<T>(\n  props: InstructionDetailsProps,\n  parsed: ParsedInfo,\n  struct: Struct<T>\n) {\n  const info = create(parsed.info, struct);\n  const attributes: JSX.Element[] = [];\n\n  for (let [key, value] of Object.entries(info)) {\n    if (value instanceof PublicKey) {\n      value = <Address pubkey={value} alignRight link />;\n    }\n\n    if (key === \"vote\") {\n      attributes.push(\n        <tr key=\"vote-hash\">\n          <td>Vote Hash</td>\n          <td className=\"text-lg-end\">\n            <pre className=\"d-inline-block text-start mb-0\">{value.hash}</pre>\n          </td>\n        </tr>\n      );\n\n      if (value.timestamp) {\n        attributes.push(\n          <tr key=\"timestamp\">\n            <td>Timestamp</td>\n            <td className=\"text-lg-end font-monospace\">\n              {displayTimestamp(value.timestamp * 1000)}\n            </td>\n          </tr>\n        );\n      }\n\n      attributes.push(\n        <tr key=\"vote-slots\">\n          <td>Slots</td>\n          <td className=\"text-lg-end font-monospace\">\n            <pre className=\"d-inline-block text-start mb-0\">\n              {value.slots.join(\"\\n\")}\n            </pre>\n          </td>\n        </tr>\n      );\n    } else {\n      attributes.push(\n        <tr key={key}>\n          <td>{camelToTitleCase(key)} </td>\n          <td className=\"text-lg-end\">{value}</td>\n        </tr>\n      );\n    }\n  }\n\n  return (\n    <InstructionCard\n      {...props}\n      title={`Vote: ${camelToTitleCase(parsed.type)}`}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={props.ix.programId} alignRight link />\n        </td>\n      </tr>\n      {attributes}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { ParsedInstruction, PublicKey, SignatureResult } from \"@solana/web3.js\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { Address } from \"components/common/Address\";\n\nexport function AssociatedTokenDetailsCard({\n  ix,\n  index,\n  result,\n  innerCards,\n  childIndex,\n}: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const info = ix.parsed.info;\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Associated Token Program: Create\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={ix.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={new PublicKey(info.account)} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Mint</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={new PublicKey(info.mint)} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Wallet</td>\n        <td className=\"text-lg-end\">\n          <Address pubkey={new PublicKey(info.wallet)} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","// @ts-nocheck\nimport {\n  Config,\n  GroupConfig,\n  MangoInstructionLayout,\n  PerpMarket,\n  PerpMarketConfig,\n  PerpMarketLayout,\n  SpotMarketConfig,\n} from \"@blockworks-foundation/mango-client\";\nimport { Market } from \"@project-serum/serum\";\nimport {\n  AccountInfo,\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\n// note: mainnet.1 suffices since its a superset of mainnet.0\nconst mangoGroups = Config.ids().groups.filter(\n  (group) => group.name !== \"mainnet.0\"\n);\n\n// caching of account info's by public keys\nlet accountInfoCache: Record<string, Promise<AccountInfo<Buffer> | null>> = {};\nfunction getAccountInfo(\n  clusterUrl: string,\n  publicKey: PublicKey\n): Promise<AccountInfo<Buffer> | null> {\n  if (publicKey.toBase58() in accountInfoCache) {\n    return accountInfoCache[publicKey.toBase58()];\n  }\n  const connection = new Connection(clusterUrl);\n  const accountInfoPromise = connection.getAccountInfo(publicKey);\n  accountInfoCache[publicKey.toBase58()] = accountInfoPromise;\n  return accountInfoPromise;\n}\n\nfunction findGroupConfig(programId: PublicKey): GroupConfig | undefined {\n  const filtered = mangoGroups.filter((group) =>\n    group.mangoProgramId.equals(programId)\n  );\n  if (filtered.length) {\n    return filtered[0];\n  }\n}\n\nexport const isMangoInstruction = (instruction: TransactionInstruction) => {\n  return mangoGroups\n    .map((group) => group.mangoProgramId.toBase58())\n    .includes(instruction.programId.toBase58());\n};\n\nexport const parseMangoInstructionTitle = (\n  instruction: TransactionInstruction\n): string => {\n  let decodedInstruction = MangoInstructionLayout.decode(instruction.data, 0);\n  return Object.keys(decodedInstruction)[0];\n};\n\nexport type Deposit = {\n  quantity: number;\n};\n\nexport const decodeDeposit = (ix: TransactionInstruction): Deposit => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const deposit: Deposit = {\n    quantity: decoded.Deposit.quantity.toNumber(),\n  };\n  return deposit;\n};\n\nexport type AddToBasket = {\n  marketIndex: number;\n};\n\nexport const decodeAddToBasket = (ix: TransactionInstruction): AddToBasket => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const addToBasket: AddToBasket = {\n    marketIndex: decoded.AddToBasket.marketIndex.toNumber(),\n  };\n  return addToBasket;\n};\n\nexport type Withdraw = {\n  quantity: number;\n  allowBorrow: String;\n};\n\nexport const decodeWithdraw = (ix: TransactionInstruction): Withdraw => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const withdraw: Withdraw = {\n    quantity: decoded.Withdraw.quantity.toNumber(),\n    allowBorrow: decoded.Withdraw.allowBorrow.toString(),\n  };\n  return withdraw;\n};\n\nexport type PlaceSpotOrder = {\n  side: String;\n  limitPrice: number;\n  maxBaseQuantity: number;\n  maxQuoteQuantity: number;\n  selfTradeBehavior: String;\n  orderType: String;\n  clientId: String;\n  limit: String;\n};\n\nexport const decodePlaceSpotOrder = (\n  ix: TransactionInstruction\n): PlaceSpotOrder => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const placeSpotOrder: PlaceSpotOrder = {\n    side: decoded.PlaceSpotOrder.side.toString(),\n    limitPrice: decoded.PlaceSpotOrder.limitPrice.toNumber(),\n    maxBaseQuantity: decoded.PlaceSpotOrder.maxBaseQuantity.toNumber(),\n    maxQuoteQuantity: decoded.PlaceSpotOrder.maxQuoteQuantity.toNumber(),\n    selfTradeBehavior: decoded.PlaceSpotOrder.selfTradeBehavior,\n    orderType: decoded.PlaceSpotOrder.orderType.toString(),\n    clientId: decoded.PlaceSpotOrder.clientId.toString(),\n    limit: decoded.PlaceSpotOrder.limit.toString(),\n  };\n\n  return placeSpotOrder;\n};\n\nexport type CancelSpotOrder = {\n  orderId: String;\n  side: String;\n};\n\nexport const decodeCancelSpotOrder = (\n  ix: TransactionInstruction\n): CancelSpotOrder => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const cancelSpotOrder: CancelSpotOrder = {\n    orderId: decoded.CancelSpotOrder.orderId.toString(),\n    side: decoded.CancelSpotOrder.side.toString(),\n  };\n  return cancelSpotOrder;\n};\n\nexport type PlacePerpOrder = {\n  price: number;\n  quantity: number;\n  clientOrderId: String;\n  side: String;\n  orderType: String;\n  reduceOnly: String;\n};\n\nexport const decodePlacePerpOrder = (\n  ix: TransactionInstruction\n): PlacePerpOrder => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const placePerpOrder: PlacePerpOrder = {\n    price: decoded.PlacePerpOrder.price.toNumber(),\n    quantity: decoded.PlacePerpOrder.quantity.toNumber(),\n    clientOrderId: decoded.PlacePerpOrder.clientOrderId.toString(),\n    side: decoded.PlacePerpOrder.side.toString(),\n    orderType: decoded.PlacePerpOrder.orderType.toString(),\n    reduceOnly: decoded.PlacePerpOrder.reduceOnly.toString(),\n  };\n\n  return placePerpOrder;\n};\n\nexport type CancelPerpOrder = {\n  orderId: String;\n  invalidIdOk: String;\n};\n\nexport const decodeCancelPerpOrder = (\n  ix: TransactionInstruction\n): CancelPerpOrder => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const cancelPerpOrder: CancelPerpOrder = {\n    orderId: decoded.CancelPerpOrder.orderId.toString(),\n    invalidIdOk: decoded.CancelPerpOrder.invalidIdOk.toString(),\n  };\n  return cancelPerpOrder;\n};\n\nexport type ChangePerpMarketParams = {\n  maintLeverageOption: Boolean;\n  maintLeverage: number;\n  initLeverageOption: Boolean;\n  initLeverage: number;\n  liquidationFeeOption: Boolean;\n  liquidationFee: number;\n  makerFeeOption: Boolean;\n  makerFee: number;\n  takerFeeOption: Boolean;\n  takerFee: number;\n  rateOption: Boolean;\n  rate: number;\n  maxDepthBpsOption: Boolean;\n  maxDepthBps: number;\n  targetPeriodLengthOption: Boolean;\n  targetPeriodLength: number;\n  mngoPerPeriodOption: Boolean;\n  mngoPerPeriod: number;\n};\n\nexport const decodeChangePerpMarketParams = (\n  ix: TransactionInstruction\n): ChangePerpMarketParams => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const changePerpMarketParams: ChangePerpMarketParams = {\n    maintLeverageOption: decoded.ChangePerpMarketParams.maintLeverageOption,\n    maintLeverage: decoded.ChangePerpMarketParams.maintLeverage.toString(),\n    initLeverageOption: decoded.ChangePerpMarketParams.initLeverageOption,\n    initLeverage: decoded.ChangePerpMarketParams.initLeverage.toString(),\n    liquidationFeeOption: decoded.ChangePerpMarketParams.liquidationFeeOption,\n    liquidationFee: decoded.ChangePerpMarketParams.liquidationFee.toString(),\n    makerFeeOption: decoded.ChangePerpMarketParams.makerFeeOption,\n    makerFee: decoded.ChangePerpMarketParams.makerFee.toString(),\n    takerFeeOption: decoded.ChangePerpMarketParams.takerFeeOption,\n    takerFee: decoded.ChangePerpMarketParams.takerFee.toString(),\n    rateOption: decoded.ChangePerpMarketParams.rateOption,\n    rate: decoded.ChangePerpMarketParams.rate.toString(),\n    maxDepthBpsOption: decoded.ChangePerpMarketParams.maxDepthBpsOption,\n    maxDepthBps: decoded.ChangePerpMarketParams.maxDepthBps.toString(),\n    targetPeriodLengthOption:\n      decoded.ChangePerpMarketParams.targetPeriodLengthOption,\n    targetPeriodLength:\n      decoded.ChangePerpMarketParams.targetPeriodLength.toString(),\n    mngoPerPeriodOption: decoded.ChangePerpMarketParams.mngoPerPeriodOption,\n    mngoPerPeriod: decoded.ChangePerpMarketParams.mngoPerPeriod.toString(),\n  };\n  return changePerpMarketParams;\n};\n\nexport type AddSpotMarket = {\n  marketIndex: number;\n  maintLeverage: number;\n  initLeverage: number;\n  liquidationFee: number;\n  optimalUtil: number;\n  optimalRate: number;\n  maxRate: number;\n};\n\nexport const decodeAddSpotMarket = (\n  ix: TransactionInstruction\n): AddSpotMarket => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const addSpotMarket: AddSpotMarket = {\n    marketIndex: decoded.AddSpotMarket.marketIndex.toNumber(),\n    maintLeverage: decoded.AddSpotMarket.maintLeverage.toNumber(),\n    initLeverage: decoded.AddSpotMarket.initLeverage.toNumber(),\n    liquidationFee: decoded.AddSpotMarket.liquidationFee.toNumber(),\n    optimalUtil: decoded.AddSpotMarket.optimalUtil.toNumber(),\n    optimalRate: decoded.AddSpotMarket.optimalRate.toNumber(),\n    maxRate: decoded.AddSpotMarket.maxRate.toNumber(),\n  };\n  return addSpotMarket;\n};\n\nexport type AddPerpMarket = {\n  marketIndex: number;\n  maintLeverage: number;\n  initLeverage: number;\n  liquidationFee: number;\n  makerFee: number;\n  takerFee: number;\n  baseLotSize: number;\n  quoteLotSize: number;\n  rate: number;\n  maxDepthBps: number;\n  targetPeriodLength: number;\n  mngoPerPeriod: number;\n};\n\nexport const decodeAddPerpMarket = (\n  ix: TransactionInstruction\n): AddPerpMarket => {\n  const decoded = MangoInstructionLayout.decode(ix.data, 0);\n  const addPerpMarket: AddPerpMarket = {\n    marketIndex: decoded.AddPerpMarket.marketIndex.toNumber(),\n    maintLeverage: decoded.AddPerpMarket.maintLeverage.toNumber(),\n    initLeverage: decoded.AddPerpMarket.initLeverage.toNumber(),\n    liquidationFee: decoded.AddPerpMarket.liquidationFee.toNumber(),\n    makerFee: decoded.AddPerpMarket.makerFee.toNumber(),\n    takerFee: decoded.AddPerpMarket.takerFee.toNumber(),\n    baseLotSize: decoded.AddPerpMarket.baseLotSize.toNumber(),\n    quoteLotSize: decoded.AddPerpMarket.quoteLotSize.toNumber(),\n    rate: decoded.AddPerpMarket.rate.toNumber(),\n    maxDepthBps: decoded.AddPerpMarket.maxDepthBps.toNumber(),\n    targetPeriodLength: decoded.AddPerpMarket.targetPeriodLength.toNumber(),\n    mngoPerPeriod: decoded.AddPerpMarket.mngoPerPeriod.toNumber(),\n  };\n  return addPerpMarket;\n};\n\nexport type OrderLotDetails = {\n  price: number;\n  size: number;\n};\n\n////\n\nexport function logAllKeys(keys: AccountMeta[]) {\n  keys.map((key) => console.log(key.pubkey.toBase58()));\n}\n\nexport function getSpotMarketFromInstruction(\n  ix: TransactionInstruction,\n  spotMarket: AccountMeta\n): SpotMarketConfig | undefined {\n  const groupConfig = findGroupConfig(ix.programId);\n  if (groupConfig === undefined) {\n    return;\n  }\n  const spotMarketConfigs = groupConfig.spotMarkets.filter((mangoSpotMarket) =>\n    spotMarket.pubkey.equals(mangoSpotMarket.publicKey)\n  );\n  if (spotMarketConfigs.length) {\n    return spotMarketConfigs[0];\n  }\n}\n\nexport async function getSpotMarketFromSpotMarketConfig(\n  programId: PublicKey,\n  clusterUrl: string,\n  mangoSpotMarketConfig: SpotMarketConfig\n): Promise<Market | undefined> {\n  const connection = new Connection(clusterUrl);\n  const groupConfig = findGroupConfig(programId);\n  if (groupConfig === undefined) {\n    return;\n  }\n  return await Market.load(\n    connection,\n    mangoSpotMarketConfig.publicKey,\n    undefined,\n    groupConfig.serumProgramId\n  );\n}\n\nexport function getPerpMarketFromInstruction(\n  ix: TransactionInstruction,\n  perpMarket: AccountMeta\n): PerpMarketConfig | undefined {\n  const groupConfig = findGroupConfig(ix.programId);\n  if (groupConfig === undefined) {\n    return;\n  }\n  const perpMarketConfigs = groupConfig.perpMarkets.filter((mangoPerpMarket) =>\n    perpMarket.pubkey.equals(mangoPerpMarket.publicKey)\n  );\n  if (perpMarketConfigs.length) {\n    return perpMarketConfigs[0];\n  }\n}\n\nexport async function getPerpMarketFromPerpMarketConfig(\n  clusterUrl: string,\n  mangoPerpMarketConfig: PerpMarketConfig\n): Promise<PerpMarket> {\n  const acc = await getAccountInfo(clusterUrl, mangoPerpMarketConfig.publicKey);\n  const decoded = PerpMarketLayout.decode(acc?.data);\n\n  return new PerpMarket(\n    mangoPerpMarketConfig.publicKey,\n    mangoPerpMarketConfig.baseDecimals,\n    mangoPerpMarketConfig.quoteDecimals,\n    decoded\n  );\n}\n\nexport function spotMarketFromIndex(\n  ix: TransactionInstruction,\n  marketIndex: number\n): String | undefined {\n  const groupConfig = findGroupConfig(ix.programId);\n  if (groupConfig === undefined) {\n    return;\n  }\n  const spotMarketConfigs = groupConfig.spotMarkets.filter(\n    (spotMarketConfig) => spotMarketConfig.marketIndex === marketIndex\n  );\n  if (!spotMarketConfigs.length) {\n    return \"UNKNOWN\";\n  }\n  return spotMarketConfigs[0].name;\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\n\nexport function AddOracleDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango Program: AddOracle\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    ></InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport moment from \"moment\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { AddPerpMarket } from \"./types\";\n\nexport function AddPerpMarketDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AddPerpMarket;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango Program: AddPerpMarket\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Market index</td>\n        <td className=\"text-lg-end\">{info.marketIndex}</td>\n      </tr>\n      <tr>\n        <td>Maintenance leverage</td>\n        <td className=\"text-lg-end\">{info.maintLeverage}</td>\n      </tr>\n      <tr>\n        <td>Initial leverage</td>\n        <td className=\"text-lg-end\">{info.initLeverage}</td>\n      </tr>\n      <tr>\n        <td>Liquidation fee</td>\n        <td className=\"text-lg-end\">{info.liquidationFee}</td>\n      </tr>\n      <tr>\n        <td>Maker fee</td>\n        <td className=\"text-lg-end\">{info.makerFee}</td>\n      </tr>\n      <tr>\n        <td>Taker fee</td>\n        <td className=\"text-lg-end\">{info.takerFee}</td>\n      </tr>\n      <tr>\n        <td>Base lot size</td>\n        <td className=\"text-lg-end\">{info.baseLotSize}</td>\n      </tr>\n      <tr>\n        <td>Quote lot size</td>\n        <td className=\"text-lg-end\">{info.quoteLotSize}</td>\n      </tr>\n      <tr>\n        <td>Rate</td>\n        <td className=\"text-lg-end\">{info.rate}</td>\n      </tr>\n      <tr>\n        <td>Max depth bps</td>\n        <td className=\"text-lg-end\">{info.maxDepthBps}</td>\n      </tr>\n      <tr>\n        <td>\n          MNGO per{\" \"}\n          {moment.duration(info.targetPeriodLength, \"seconds\").humanize()}\n        </td>\n        <td className=\"text-lg-end\">\n          {info.mngoPerPeriod} {}\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { AddSpotMarket, spotMarketFromIndex } from \"./types\";\n\nexport function AddSpotMarketDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AddSpotMarket;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango Program: AddSpotMarket\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      {spotMarketFromIndex(ix, info.marketIndex) !== \"UNKNOWN\" && (\n        <tr>\n          <td>Market</td>\n          <td className=\"text-lg-end\">\n            {spotMarketFromIndex(ix, info.marketIndex)}\n          </td>\n        </tr>\n      )}\n      <tr>\n        <td>Market index</td>\n        <td className=\"text-lg-end\">{info.marketIndex}</td>\n      </tr>\n      <tr>\n        <td>Maint leverage</td>\n        <td className=\"text-lg-end\">{info.maintLeverage}</td>\n      </tr>\n      <tr>\n        <td>Init leverage</td>\n        <td className=\"text-lg-end\">{info.initLeverage}</td>\n      </tr>\n      <tr>\n        <td>Liquidation fee</td>\n        <td className=\"text-lg-end\">{info.liquidationFee}</td>\n      </tr>\n      <tr>\n        <td>Optimal util</td>\n        <td className=\"text-lg-end\">{info.optimalUtil}</td>\n      </tr>\n      <tr>\n        <td>Optimal rate</td>\n        <td className=\"text-lg-end\">{info.optimalRate}</td>\n      </tr>\n      <tr>\n        <td>Max rate</td>\n        <td className=\"text-lg-end\">{info.maxRate}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { CancelPerpOrder, getPerpMarketFromInstruction } from \"./types\";\n\nexport function CancelPerpOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelPerpOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const mangoAccount = ix.keys[1];\n  const perpMarketAccountMeta = ix.keys[3];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango Program: CancelPerpOrder\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoPerpMarketConfig !== undefined && (\n        <tr>\n          <td>Perp market</td>\n          <td className=\"text-lg-end\">{mangoPerpMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Perp market address</td>\n        <td>\n          <Address pubkey={perpMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-end\">{info.orderId}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { CancelSpotOrder, getSpotMarketFromInstruction } from \"./types\";\n\nexport function CancelSpotOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelSpotOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const mangoAccount = ix.keys[2];\n  const spotMarketAccountMeta = ix.keys[4];\n  const mangoSpotMarketConfig = getSpotMarketFromInstruction(\n    ix,\n    spotMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango Program: CancelSpotOrder\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoSpotMarketConfig !== undefined && (\n        <tr>\n          <td>Spot market</td>\n          <td className=\"text-lg-end\">{mangoSpotMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Spot market address</td>\n        <td>\n          <Address pubkey={spotMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-end\">{info.orderId}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport moment from \"moment\";\nimport { useCluster } from \"providers/cluster\";\nimport { useEffect, useState } from \"react\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport {\n  ChangePerpMarketParams,\n  getPerpMarketFromInstruction,\n  getPerpMarketFromPerpMarketConfig,\n} from \"./types\";\n\nexport function ChangePerpMarketParamsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: ChangePerpMarketParams;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  const perpMarketAccountMeta = ix.keys[1];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  const cluster = useCluster();\n  const [targetPeriodLength, setTargetPeriodLength] = useState<number | null>(\n    null\n  );\n  useEffect(() => {\n    async function getTargetPeriodLength() {\n      if (mangoPerpMarketConfig === undefined) {\n        return;\n      }\n      const mangoPerpMarket = await getPerpMarketFromPerpMarketConfig(\n        cluster.url,\n        mangoPerpMarketConfig\n      );\n\n      setTargetPeriodLength(\n        mangoPerpMarket.liquidityMiningInfo.targetPeriodLength.toNumber()\n      );\n    }\n\n    getTargetPeriodLength();\n  }, [cluster.url, mangoPerpMarketConfig]);\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango Program: ChangePerpMarketParams\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      {info.initLeverageOption && (\n        <tr>\n          <td>Init leverage</td>\n          <td className=\"text-lg-end\">{info.initLeverage}</td>\n        </tr>\n      )}\n      {info.liquidationFeeOption && (\n        <tr>\n          <td>Liquidation fee</td>\n          <td className=\"text-lg-end\">{info.liquidationFee}</td>\n        </tr>\n      )}\n      {info.maintLeverageOption && (\n        <tr>\n          <td>Maint leverage</td>\n          <td className=\"text-lg-end\">{info.maintLeverage}</td>\n        </tr>\n      )}\n      {info.makerFeeOption && (\n        <tr>\n          <td>Maker fee</td>\n          <td className=\"text-lg-end\">{info.makerFee}</td>\n        </tr>\n      )}\n      {info.mngoPerPeriodOption && (\n        <tr>\n          <td>\n            MNGO per{\" \"}\n            {targetPeriodLength !== null &&\n              moment.duration(targetPeriodLength, \"seconds\").humanize()}\n          </td>\n          <td className=\"text-lg-end\">\n            {info.mngoPerPeriod} {}\n          </td>\n        </tr>\n      )}\n\n      {info.maxDepthBpsOption && (\n        <tr>\n          <td>Max depth bps</td>\n          <td className=\"text-lg-end\">{info.maxDepthBps}</td>\n        </tr>\n      )}\n      {info.rateOption && (\n        <tr>\n          <td>Rate</td>\n          <td className=\"text-lg-end\">{info.rate}</td>\n        </tr>\n      )}\n      {info.takerFeeOption && (\n        <tr>\n          <td>Taker fee</td>\n          <td className=\"text-lg-end\">{info.takerFee}</td>\n        </tr>\n      )}\n      {info.targetPeriodLengthOption && (\n        <tr>\n          <td>Target period length</td>\n          <td className=\"text-lg-end\">{info.targetPeriodLength}</td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { getPerpMarketFromInstruction } from \"./types\";\n\nexport function ConsumeEventsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, innerCards, childIndex } = props;\n\n  const perpMarketAccountMeta = ix.keys[2];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={\"Mango Program: ConsumeEvents\"}\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      {mangoPerpMarketConfig !== undefined && (\n        <tr>\n          <td>Perp market</td>\n          <td className=\"text-lg-end\">{mangoPerpMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Perp market address</td>\n        <td>\n          <Address pubkey={perpMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\n\nexport function GenericMngoAccountDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  mangoAccountKeyLocation: number;\n  title: String;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const {\n    ix,\n    index,\n    result,\n    mangoAccountKeyLocation,\n    title,\n    innerCards,\n    childIndex,\n  } = props;\n  const mangoAccount = ix.keys[mangoAccountKeyLocation];\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={\"Mango Program: \" + title}\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { getPerpMarketFromInstruction } from \"./types\";\n\nexport function GenericPerpMngoDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  mangoAccountKeyLocation: number;\n  perpMarketKeyLocation: number;\n  title: String;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const {\n    ix,\n    index,\n    result,\n    mangoAccountKeyLocation,\n    perpMarketKeyLocation,\n    title,\n    innerCards,\n    childIndex,\n  } = props;\n  const mangoAccount = ix.keys[mangoAccountKeyLocation];\n  const perpMarketAccountMeta = ix.keys[perpMarketKeyLocation];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={\"Mango Program: \" + title}\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoPerpMarketConfig !== undefined && (\n        <tr>\n          <td>Perp market</td>\n          <td className=\"text-lg-end\">{mangoPerpMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Perp market address</td>\n        <td>\n          <Address pubkey={perpMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { getSpotMarketFromInstruction } from \"./types\";\n\nexport function GenericSpotMngoDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  accountKeyLocation: number;\n  spotMarketkeyLocation: number;\n  title: String;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const {\n    ix,\n    index,\n    result,\n    accountKeyLocation,\n    spotMarketkeyLocation,\n    title,\n    innerCards,\n    childIndex,\n  } = props;\n  const mangoAccount = ix.keys[accountKeyLocation];\n  const spotMarketAccountMeta = ix.keys[spotMarketkeyLocation];\n  const mangoSpotMarketConfig = getSpotMarketFromInstruction(\n    ix,\n    spotMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={\"Mango Program: \" + title}\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoSpotMarketConfig !== undefined && (\n        <tr>\n          <td>Spot market</td>\n          <td className=\"text-lg-end\">{mangoSpotMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Spot market address</td>\n        <td>\n          <Address pubkey={spotMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { Address } from \"components/common/Address\";\nimport { useCluster } from \"providers/cluster\";\nimport { useEffect, useState } from \"react\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport {\n  getPerpMarketFromInstruction,\n  getPerpMarketFromPerpMarketConfig,\n  OrderLotDetails,\n  PlacePerpOrder,\n} from \"./types\";\n\nexport function PlacePerpOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: PlacePerpOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const mangoAccount = ix.keys[1];\n  const perpMarketAccountMeta = ix.keys[4];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  const cluster = useCluster();\n  const [orderLotDetails, setOrderLotDetails] =\n    useState<OrderLotDetails | null>(null);\n  useEffect(() => {\n    async function getOrderLotDetails() {\n      if (mangoPerpMarketConfig === undefined) {\n        return;\n      }\n      const mangoPerpMarket = await getPerpMarketFromPerpMarketConfig(\n        cluster.url,\n        mangoPerpMarketConfig\n      );\n      const maxBaseQuantity = mangoPerpMarket.baseLotsToNumber(\n        new BN(info.quantity.toString())\n      );\n      const limitPrice = mangoPerpMarket.priceLotsToNumber(\n        new BN(info.price.toString())\n      );\n      setOrderLotDetails({\n        price: limitPrice,\n        size: maxBaseQuantity,\n      } as OrderLotDetails);\n    }\n    getOrderLotDetails();\n  }, [cluster.url, info.quantity, info.price, mangoPerpMarketConfig]);\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango Program: PlacePerpOrder\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          {\" \"}\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoPerpMarketConfig !== undefined && (\n        <tr>\n          <td>Perp market</td>\n          <td className=\"text-lg-end\">{mangoPerpMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Perp market address</td>\n        <td>\n          <Address pubkey={perpMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {info.clientOrderId !== \"0\" && (\n        <tr>\n          <td>Client order Id</td>\n          <td className=\"text-lg-end\">{info.clientOrderId}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Order type</td>\n        <td className=\"text-lg-end\">{info.orderType}</td>\n      </tr>\n      <tr>\n        <td>side</td>\n        <td className=\"text-lg-end\">{info.side}</td>\n      </tr>\n\n      {orderLotDetails !== null && (\n        <tr>\n          <td>price</td>\n          <td className=\"text-lg-end\">{orderLotDetails?.price} USDC</td>\n        </tr>\n      )}\n\n      {orderLotDetails !== null && (\n        <tr>\n          <td>quantity</td>\n          <td className=\"text-lg-end\">{orderLotDetails?.size}</td>\n        </tr>\n      )}\n      <tr>\n        <td>Reduce only</td>\n        <td className=\"text-lg-end\">{info.reduceOnly}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { Address } from \"components/common/Address\";\nimport { useCluster } from \"providers/cluster\";\nimport { useEffect, useState } from \"react\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport {\n  getSpotMarketFromInstruction,\n  getSpotMarketFromSpotMarketConfig,\n  OrderLotDetails,\n  PlaceSpotOrder,\n} from \"./types\";\n\nexport function PlaceSpotOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: PlaceSpotOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const mangoAccount = ix.keys[1];\n  const spotMarketAccountMeta = ix.keys[5];\n  const mangoSpotMarketConfig = getSpotMarketFromInstruction(\n    ix,\n    spotMarketAccountMeta\n  );\n\n  const cluster = useCluster();\n  const [orderLotDetails, setOrderLotDetails] =\n    useState<OrderLotDetails | null>(null);\n  useEffect(() => {\n    async function getOrderLotDetails() {\n      if (mangoSpotMarketConfig === undefined) {\n        return;\n      }\n      const mangoSpotMarket = await getSpotMarketFromSpotMarketConfig(\n        ix.programId,\n        cluster.url,\n        mangoSpotMarketConfig\n      );\n      if (mangoSpotMarket === undefined) {\n        return;\n      }\n      const maxBaseQuantity = mangoSpotMarket.baseSizeLotsToNumber(\n        new BN(info.maxBaseQuantity.toString())\n      );\n      const limitPrice = mangoSpotMarket.priceLotsToNumber(\n        new BN(info.limitPrice.toString())\n      );\n      setOrderLotDetails({\n        price: limitPrice,\n        size: maxBaseQuantity,\n      } as OrderLotDetails);\n    }\n    getOrderLotDetails();\n  }, [\n    cluster.url,\n    info.maxBaseQuantity,\n    info.limitPrice,\n    ix.programId,\n    mangoSpotMarketConfig,\n  ]);\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango Program: PlaceSpotOrder\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          {\" \"}\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoSpotMarketConfig !== undefined && (\n        <tr>\n          <td>Spot market</td>\n          <td className=\"text-lg-end\">{mangoSpotMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Spot market address</td>\n        <td>\n          <Address pubkey={spotMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Order type</td>\n        <td className=\"text-lg-end\">{info.orderType}</td>\n      </tr>\n\n      {info.clientId !== \"0\" && (\n        <tr>\n          <td>Client Id</td>\n          <td className=\"text-lg-end\">{info.clientId}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-end\">{info.side}</td>\n      </tr>\n\n      {orderLotDetails !== null && (\n        <tr>\n          <td>Limit price</td>\n          {/* todo fix price */}\n          <td className=\"text-lg-end\">{orderLotDetails?.price} USDC</td>\n        </tr>\n      )}\n\n      {orderLotDetails !== null && (\n        <tr>\n          <td>Size</td>\n          <td className=\"text-lg-end\">{orderLotDetails?.size}</td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@solana/web3.js\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { AddOracleDetailsCard } from \"./mango/AddOracleDetailsCard\";\nimport { AddPerpMarketDetailsCard } from \"./mango/AddPerpMarketDetailsCard\";\nimport { AddSpotMarketDetailsCard } from \"./mango/AddSpotMarketDetailsCard\";\nimport { CancelPerpOrderDetailsCard } from \"./mango/CancelPerpOrderDetailsCard\";\nimport { CancelSpotOrderDetailsCard } from \"./mango/CancelSpotOrderDetailsCard\";\nimport { ChangePerpMarketParamsDetailsCard } from \"./mango/ChangePerpMarketParamsDetailsCard\";\nimport { ConsumeEventsDetailsCard } from \"./mango/ConsumeEventsDetailsCard\";\nimport { GenericMngoAccountDetailsCard } from \"./mango/GenericMngoAccountDetailsCard\";\nimport { GenericPerpMngoDetailsCard } from \"./mango/GenericPerpMngoDetailsCard\";\nimport { GenericSpotMngoDetailsCard } from \"./mango/GenericSpotMngoDetailsCard\";\nimport { PlacePerpOrderDetailsCard } from \"./mango/PlacePerpOrderDetailsCard\";\nimport { PlaceSpotOrderDetailsCard } from \"./mango/PlaceSpotOrderDetailsCard\";\nimport {\n  decodeAddPerpMarket,\n  decodeAddSpotMarket,\n  decodeCancelPerpOrder,\n  decodeCancelSpotOrder,\n  decodeChangePerpMarketParams,\n  decodePlacePerpOrder,\n  decodePlaceSpotOrder,\n  parseMangoInstructionTitle,\n} from \"./mango/types\";\n\nexport function MangoDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, signature, innerCards, childIndex } = props;\n\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseMangoInstructionTitle(ix);\n\n    switch (title) {\n      case \"InitMangoAccount\":\n        return (\n          <GenericMngoAccountDetailsCard\n            mangoAccountKeyLocation={1}\n            title={title}\n            {...props}\n          />\n        );\n      case \"Deposit\":\n        return (\n          <GenericMngoAccountDetailsCard\n            mangoAccountKeyLocation={1}\n            title={title}\n            {...props}\n          />\n        );\n      case \"Withdraw\":\n        return (\n          <GenericMngoAccountDetailsCard\n            mangoAccountKeyLocation={1}\n            title={title}\n            {...props}\n          />\n        );\n      case \"InitSpotOpenOrders\":\n        return (\n          <GenericMngoAccountDetailsCard\n            mangoAccountKeyLocation={1}\n            title={title}\n            {...props}\n          />\n        );\n      case \"PlaceSpotOrder\":\n        return (\n          <PlaceSpotOrderDetailsCard\n            info={decodePlaceSpotOrder(ix)}\n            {...props}\n          />\n        );\n      case \"CancelSpotOrder\":\n        return (\n          <CancelSpotOrderDetailsCard\n            info={decodeCancelSpotOrder(ix)}\n            {...props}\n          />\n        );\n      case \"AddPerpMarket\":\n        return (\n          <AddPerpMarketDetailsCard info={decodeAddPerpMarket(ix)} {...props} />\n        );\n      case \"PlacePerpOrder\":\n        return (\n          <PlacePerpOrderDetailsCard\n            info={decodePlacePerpOrder(ix)}\n            {...props}\n          />\n        );\n      case \"ConsumeEvents\":\n        return <ConsumeEventsDetailsCard {...props} />;\n      case \"CancelPerpOrder\":\n        return (\n          <CancelPerpOrderDetailsCard\n            info={decodeCancelPerpOrder(ix)}\n            {...props}\n          />\n        );\n      case \"SettleFunds\":\n        return (\n          <GenericSpotMngoDetailsCard\n            accountKeyLocation={2}\n            spotMarketkeyLocation={5}\n            title={title}\n            {...props}\n          />\n        );\n      case \"RedeemMngo\":\n        return (\n          <GenericPerpMngoDetailsCard\n            mangoAccountKeyLocation={3}\n            perpMarketKeyLocation={4}\n            title={title}\n            {...props}\n          />\n        );\n      case \"ChangePerpMarketParams\":\n        return (\n          <ChangePerpMarketParamsDetailsCard\n            info={decodeChangePerpMarketParams(ix)}\n            {...props}\n          />\n        );\n      case \"AddOracle\":\n        return <AddOracleDetailsCard {...props} />;\n      case \"AddSpotMarket\":\n        return (\n          <AddSpotMarketDetailsCard info={decodeAddSpotMarket(ix)} {...props} />\n        );\n    }\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Mango Program: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport {\n  ParsedInnerInstruction,\n  ParsedInstruction,\n  ParsedTransaction,\n  PartiallyDecodedInstruction,\n  PublicKey,\n  SignatureResult,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport { BpfLoaderDetailsCard } from \"components/instruction/bpf-loader/BpfLoaderDetailsCard\";\nimport { MemoDetailsCard } from \"components/instruction/MemoDetailsCard\";\nimport { SerumDetailsCard } from \"components/instruction/SerumDetailsCard\";\nimport { StakeDetailsCard } from \"components/instruction/stake/StakeDetailsCard\";\nimport { SystemDetailsCard } from \"components/instruction/system/SystemDetailsCard\";\nimport { TokenDetailsCard } from \"components/instruction/token/TokenDetailsCard\";\nimport { TokenLendingDetailsCard } from \"components/instruction/TokenLendingDetailsCard\";\nimport { TokenSwapDetailsCard } from \"components/instruction/TokenSwapDetailsCard\";\nimport { WormholeDetailsCard } from \"components/instruction/WormholeDetailsCard\";\nimport { UnknownDetailsCard } from \"components/instruction/UnknownDetailsCard\";\nimport { BonfidaBotDetailsCard } from \"components/instruction/BonfidaBotDetails\";\nimport {\n  SignatureProps,\n  INNER_INSTRUCTIONS_START_SLOT,\n} from \"pages/TransactionDetailsPage\";\nimport { intoTransactionInstruction } from \"utils/tx\";\nimport { isSerumInstruction } from \"components/instruction/serum/types\";\nimport { isTokenLendingInstruction } from \"components/instruction/token-lending/types\";\nimport { isTokenSwapInstruction } from \"components/instruction/token-swap/types\";\nimport { isBonfidaBotInstruction } from \"components/instruction/bonfida-bot/types\";\nimport { useFetchTransactionDetails } from \"providers/transactions/parsed\";\nimport {\n  useTransactionDetails,\n  useTransactionStatus,\n} from \"providers/transactions\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport { BpfUpgradeableLoaderDetailsCard } from \"components/instruction/bpf-upgradeable-loader/BpfUpgradeableLoaderDetailsCard\";\nimport { VoteDetailsCard } from \"components/instruction/vote/VoteDetailsCard\";\nimport { isWormholeInstruction } from \"components/instruction/wormhole/types\";\nimport { AssociatedTokenDetailsCard } from \"components/instruction/AssociatedTokenDetailsCard\";\nimport { isMangoInstruction } from \"components/instruction/mango/types\";\nimport { MangoDetailsCard } from \"components/instruction/MangoDetails\";\n\nexport type InstructionDetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function InstructionsSection({ signature }: SignatureProps) {\n  const status = useTransactionStatus(signature);\n  const details = useTransactionDetails(signature);\n  const { cluster } = useCluster();\n  const fetchDetails = useFetchTransactionDetails();\n  const refreshDetails = () => fetchDetails(signature);\n\n  if (!status?.data?.info || !details?.data?.transaction) return null;\n\n  const { transaction } = details.data.transaction;\n  const { meta } = details.data.transaction;\n\n  if (transaction.message.instructions.length === 0) {\n    return <ErrorCard retry={refreshDetails} text=\"No instructions found\" />;\n  }\n\n  const innerInstructions: {\n    [index: number]: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  } = {};\n\n  if (\n    meta?.innerInstructions &&\n    (cluster !== Cluster.MainnetBeta ||\n      details.data.transaction.slot >= INNER_INSTRUCTIONS_START_SLOT)\n  ) {\n    meta.innerInstructions.forEach((parsed: ParsedInnerInstruction) => {\n      if (!innerInstructions[parsed.index]) {\n        innerInstructions[parsed.index] = [];\n      }\n\n      parsed.instructions.forEach((ix) => {\n        innerInstructions[parsed.index].push(ix);\n      });\n    });\n  }\n\n  const result = status.data.info.result;\n  const instructionDetails = transaction.message.instructions.map(\n    (instruction, index) => {\n      let innerCards: JSX.Element[] = [];\n\n      if (index in innerInstructions) {\n        innerInstructions[index].forEach((ix, childIndex) => {\n          if (typeof ix.programId === \"string\") {\n            ix.programId = new PublicKey(ix.programId);\n          }\n\n          let res = renderInstructionCard({\n            index,\n            ix,\n            result,\n            signature,\n            tx: transaction,\n            childIndex,\n          });\n\n          innerCards.push(res);\n        });\n      }\n\n      return renderInstructionCard({\n        index,\n        ix: instruction,\n        result,\n        signature,\n        tx: transaction,\n        innerCards,\n      });\n    }\n  );\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body\">\n            <h3 className=\"mb-0\">Instruction(s)</h3>\n          </div>\n        </div>\n      </div>\n      {instructionDetails}\n    </>\n  );\n}\n\nfunction renderInstructionCard({\n  ix,\n  tx,\n  result,\n  index,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: ParsedInstruction | PartiallyDecodedInstruction;\n  tx: ParsedTransaction;\n  result: SignatureResult;\n  index: number;\n  signature: TransactionSignature;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const key = `${index}-${childIndex}`;\n\n  if (\"parsed\" in ix) {\n    const props = {\n      tx,\n      ix,\n      result,\n      index,\n      innerCards,\n      childIndex,\n      key,\n    };\n\n    switch (ix.program) {\n      case \"spl-token\":\n        return <TokenDetailsCard {...props} />;\n      case \"bpf-loader\":\n        return <BpfLoaderDetailsCard {...props} />;\n      case \"bpf-upgradeable-loader\":\n        return <BpfUpgradeableLoaderDetailsCard {...props} />;\n      case \"system\":\n        return <SystemDetailsCard {...props} />;\n      case \"stake\":\n        return <StakeDetailsCard {...props} />;\n      case \"spl-memo\":\n        return <MemoDetailsCard {...props} />;\n      case \"spl-associated-token-account\":\n        return <AssociatedTokenDetailsCard {...props} />;\n      case \"vote\":\n        return <VoteDetailsCard {...props} />;\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  }\n\n  const transactionIx = intoTransactionInstruction(tx, ix);\n\n  if (!transactionIx) {\n    return (\n      <ErrorCard\n        key={key}\n        text=\"Could not display this instruction, please report\"\n      />\n    );\n  }\n\n  const props = {\n    ix: transactionIx,\n    result,\n    index,\n    signature,\n    innerCards,\n    childIndex,\n  };\n\n  if (isBonfidaBotInstruction(transactionIx)) {\n    return <BonfidaBotDetailsCard key={key} {...props} />;\n  } else if (isMangoInstruction(transactionIx)) {\n    return <MangoDetailsCard key={key} {...props} />;\n  } else if (isSerumInstruction(transactionIx)) {\n    return <SerumDetailsCard key={key} {...props} />;\n  } else if (isTokenSwapInstruction(transactionIx)) {\n    return <TokenSwapDetailsCard key={key} {...props} />;\n  } else if (isTokenLendingInstruction(transactionIx)) {\n    return <TokenLendingDetailsCard key={key} {...props} />;\n  } else if (isWormholeInstruction(transactionIx)) {\n    return <WormholeDetailsCard key={key} {...props} />;\n  } else {\n    return <UnknownDetailsCard key={key} {...props} />;\n  }\n}\n","import React from \"react\";\nimport { SignatureProps } from \"pages/TransactionDetailsPage\";\nimport { useTransactionDetails } from \"providers/transactions\";\nimport { ProgramLogsCardBody } from \"components/ProgramLogsCardBody\";\nimport { prettyProgramLogs } from \"utils/program-logs\";\nimport { useCluster } from \"providers/cluster\";\n\nexport function ProgramLogSection({ signature }: SignatureProps) {\n  const { cluster } = useCluster();\n  const details = useTransactionDetails(signature);\n\n  const transaction = details?.data?.transaction;\n  if (!transaction) return null;\n  const message = transaction.transaction.message;\n\n  const logMessages = transaction.meta?.logMessages || null;\n  const err = transaction.meta?.err || null;\n\n  let prettyLogs = null;\n  if (logMessages !== null) {\n    prettyLogs = prettyProgramLogs(logMessages, err, cluster);\n  }\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title\">Program Logs</h3>\n        </div>\n        {prettyLogs !== null ? (\n          <ProgramLogsCardBody\n            message={message}\n            logs={prettyLogs}\n            cluster={cluster}\n          />\n        ) : (\n          <div className=\"card-body\">\n            Logs not supported for this transaction\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport bs58 from \"bs58\";\nimport {\n  useFetchTransactionStatus,\n  useTransactionStatus,\n  useTransactionDetails,\n} from \"providers/transactions\";\nimport { useFetchTransactionDetails } from \"providers/transactions/parsed\";\nimport { useCluster, ClusterStatus } from \"providers/cluster\";\nimport {\n  TransactionSignature,\n  SystemProgram,\n  SystemInstruction,\n} from \"@solana/web3.js\";\nimport { SolBalance } from \"utils\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { displayTimestamp } from \"utils/date\";\nimport { InfoTooltip } from \"components/common/InfoTooltip\";\nimport { Address } from \"components/common/Address\";\nimport { Signature } from \"components/common/Signature\";\nimport { intoTransactionInstruction } from \"utils/tx\";\nimport { FetchStatus } from \"providers/cache\";\nimport { Slot } from \"components/common/Slot\";\nimport { BigNumber } from \"bignumber.js\";\nimport { BalanceDelta } from \"components/common/BalanceDelta\";\nimport { TokenBalancesCard } from \"components/transaction/TokenBalancesCard\";\nimport { InstructionsSection } from \"components/transaction/InstructionsSection\";\nimport { ProgramLogSection } from \"components/transaction/ProgramLogSection\";\nimport { clusterPath } from \"utils/url\";\nimport { useCustomAddressLabels } from \"../amman\";\n\nconst AUTO_REFRESH_INTERVAL = 2000;\nconst ZERO_CONFIRMATION_BAILOUT = 5;\nexport const INNER_INSTRUCTIONS_START_SLOT = 46915769;\n\nexport type SignatureProps = {\n  signature: TransactionSignature;\n};\n\nexport const SignatureContext = React.createContext(\"\");\n\nenum AutoRefresh {\n  Active,\n  Inactive,\n  BailedOut,\n}\n\ntype AutoRefreshProps = {\n  autoRefresh: AutoRefresh;\n};\n\nexport function TransactionDetailsPage({ signature: raw }: SignatureProps) {\n  let signature: TransactionSignature | undefined;\n\n  try {\n    const decoded = bs58.decode(raw);\n    if (decoded.length === 64) {\n      signature = raw;\n    }\n  } catch (err) {}\n\n  const status = useTransactionStatus(signature);\n  const [zeroConfirmationRetries, setZeroConfirmationRetries] =\n    React.useState(0);\n\n  let autoRefresh = AutoRefresh.Inactive;\n\n  if (zeroConfirmationRetries >= ZERO_CONFIRMATION_BAILOUT) {\n    autoRefresh = AutoRefresh.BailedOut;\n  } else if (status?.data?.info && status.data.info.confirmations !== \"max\") {\n    autoRefresh = AutoRefresh.Active;\n  }\n\n  React.useEffect(() => {\n    if (\n      status?.status === FetchStatus.Fetched &&\n      status.data?.info &&\n      status.data.info.confirmations === 0\n    ) {\n      setZeroConfirmationRetries((retries) => retries + 1);\n    }\n  }, [status]);\n\n  React.useEffect(() => {\n    if (\n      status?.status === FetchStatus.Fetching &&\n      autoRefresh === AutoRefresh.BailedOut\n    ) {\n      setZeroConfirmationRetries(0);\n    }\n  }, [status, autoRefresh, setZeroConfirmationRetries]);\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h6 className=\"header-pretitle\">Details</h6>\n          <h2 className=\"header-title\">Transaction</h2>\n        </div>\n      </div>\n      {signature === undefined ? (\n        <ErrorCard text={`Signature \"${raw}\" is not valid`} />\n      ) : (\n        <SignatureContext.Provider value={signature}>\n          <StatusCard signature={signature} autoRefresh={autoRefresh} />\n          <DetailsSection signature={signature} />\n        </SignatureContext.Provider>\n      )}\n    </div>\n  );\n}\n\nfunction StatusCard({\n  signature,\n  autoRefresh,\n}: SignatureProps & AutoRefreshProps) {\n  const fetchStatus = useFetchTransactionStatus();\n  const status = useTransactionStatus(signature);\n  const details = useTransactionDetails(signature);\n  const { clusterInfo, status: clusterStatus } = useCluster();\n  const [customAddressLabels] = useCustomAddressLabels();\n\n  // Fetch transaction on load\n  React.useEffect(() => {\n    if (!status && clusterStatus === ClusterStatus.Connected) {\n      fetchStatus(signature);\n    }\n  }, [signature, clusterStatus]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Effect to set and clear interval for auto-refresh\n  React.useEffect(() => {\n    if (autoRefresh === AutoRefresh.Active) {\n      let intervalHandle: NodeJS.Timeout = setInterval(\n        () => fetchStatus(signature),\n        AUTO_REFRESH_INTERVAL\n      );\n\n      return () => {\n        clearInterval(intervalHandle);\n      };\n    }\n  }, [autoRefresh, fetchStatus, signature]);\n\n  if (\n    !status ||\n    (status.status === FetchStatus.Fetching &&\n      autoRefresh === AutoRefresh.Inactive)\n  ) {\n    return <LoadingCard />;\n  } else if (status.status === FetchStatus.FetchFailed) {\n    return (\n      <ErrorCard retry={() => fetchStatus(signature)} text=\"Fetch Failed\" />\n    );\n  } else if (!status.data?.info) {\n    if (clusterInfo && clusterInfo.firstAvailableBlock > 0) {\n      return (\n        <ErrorCard\n          retry={() => fetchStatus(signature)}\n          text=\"Not Found\"\n          subtext={`Note: Transactions processed before block ${clusterInfo.firstAvailableBlock} are not available at this time`}\n        />\n      );\n    }\n    return <ErrorCard retry={() => fetchStatus(signature)} text=\"Not Found\" />;\n  }\n\n  const { info } = status.data;\n\n  const renderResult = () => {\n    let statusClass = \"success\";\n    let statusText = \"Success\";\n    if (info.result.err) {\n      statusClass = \"warning\";\n      statusText = \"Error\";\n    }\n\n    return (\n      <h3 className=\"mb-0\">\n        <span className={`badge bg-${statusClass}-soft`}>{statusText}</span>\n      </h3>\n    );\n  };\n\n  const fee = details?.data?.transaction?.meta?.fee;\n  const transaction = details?.data?.transaction?.transaction;\n  const blockhash = transaction?.message.recentBlockhash;\n  const isNonce = (() => {\n    if (!transaction || transaction.message.instructions.length < 1) {\n      return false;\n    }\n\n    const ix = intoTransactionInstruction(\n      transaction,\n      transaction.message.instructions[0]\n    );\n    return (\n      ix &&\n      SystemProgram.programId.equals(ix.programId) &&\n      SystemInstruction.decodeInstructionType(ix) === \"AdvanceNonceAccount\"\n    );\n  })();\n\n  const addressLabel = customAddressLabels.get(signature);\n  const truncate = addressLabel != null;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Overview</h3>\n        <Link\n          to={clusterPath(`/tx/${signature}/inspect`)}\n          className=\"btn btn-white btn-sm me-2\"\n        >\n          <span className=\"fe fe-settings me-2\"></span>\n          Inspect\n        </Link>\n        {autoRefresh === AutoRefresh.Active ? (\n          <span className=\"spinner-grow spinner-grow-sm\"></span>\n        ) : (\n          <button\n            className=\"btn btn-white btn-sm\"\n            onClick={() => fetchStatus(signature)}\n          >\n            <span className=\"fe fe-refresh-cw me-2\"></span>\n            Refresh\n          </button>\n        )}\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Signature</td>\n          <td className=\"text-lg-end\">\n            <Signature\n              signature={signature}\n              addressLabel={addressLabel}\n              truncate={truncate}\n              alignRight\n            />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Result</td>\n          <td className=\"text-lg-end\">{renderResult()}</td>\n        </tr>\n\n        <tr>\n          <td>Timestamp</td>\n          <td className=\"text-lg-end\">\n            {info.timestamp !== \"unavailable\" ? (\n              <span className=\"font-monospace\">\n                {displayTimestamp(info.timestamp * 1000)}\n              </span>\n            ) : (\n              <InfoTooltip\n                bottom\n                right\n                text=\"Timestamps are only available for confirmed blocks\"\n              >\n                Unavailable\n              </InfoTooltip>\n            )}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Confirmation Status</td>\n          <td className=\"text-lg-end text-uppercase\">\n            {info.confirmationStatus || \"Unknown\"}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Confirmations</td>\n          <td className=\"text-lg-end text-uppercase\">{info.confirmations}</td>\n        </tr>\n\n        <tr>\n          <td>Block</td>\n          <td className=\"text-lg-end\">\n            <Slot slot={info.slot} link />\n          </td>\n        </tr>\n\n        {blockhash && (\n          <tr>\n            <td>\n              {isNonce ? (\n                \"Nonce\"\n              ) : (\n                <InfoTooltip text=\"Transactions use a previously confirmed blockhash as a nonce to prevent double spends\">\n                  Recent Blockhash\n                </InfoTooltip>\n              )}\n            </td>\n            <td className=\"text-lg-end\">{blockhash}</td>\n          </tr>\n        )}\n\n        {fee && (\n          <tr>\n            <td>Fee (SOL)</td>\n            <td className=\"text-lg-end\">\n              <SolBalance lamports={fee} />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction DetailsSection({ signature }: SignatureProps) {\n  const details = useTransactionDetails(signature);\n  const fetchDetails = useFetchTransactionDetails();\n  const status = useTransactionStatus(signature);\n  const transaction = details?.data?.transaction?.transaction;\n  const message = transaction?.message;\n  const { status: clusterStatus } = useCluster();\n  const refreshDetails = () => fetchDetails(signature);\n\n  // Fetch details on load\n  React.useEffect(() => {\n    if (\n      !details &&\n      clusterStatus === ClusterStatus.Connected &&\n      status?.status === FetchStatus.Fetched\n    ) {\n      fetchDetails(signature);\n    }\n  }, [signature, clusterStatus, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!status?.data?.info) {\n    return null;\n  } else if (!details) {\n    return <LoadingCard />;\n  } else if (details.status === FetchStatus.FetchFailed) {\n    return <ErrorCard retry={refreshDetails} text=\"Failed to fetch details\" />;\n  } else if (!details.data?.transaction || !message) {\n    return <ErrorCard text=\"Details are not available\" />;\n  }\n\n  return (\n    <>\n      <AccountsCard signature={signature} />\n      <TokenBalancesCard signature={signature} />\n      <InstructionsSection signature={signature} />\n      <ProgramLogSection signature={signature} />\n    </>\n  );\n}\n\nfunction AccountsCard({ signature }: SignatureProps) {\n  const details = useTransactionDetails(signature);\n\n  if (!details?.data?.transaction) {\n    return null;\n  }\n\n  const { meta, transaction } = details.data.transaction;\n  const { message } = transaction;\n\n  if (!meta) {\n    return <ErrorCard text=\"Transaction metadata is missing\" />;\n  }\n\n  const accountRows = message.accountKeys.map((account, index) => {\n    const pre = meta.preBalances[index];\n    const post = meta.postBalances[index];\n    const pubkey = account.pubkey;\n    const key = account.pubkey.toBase58();\n    const delta = new BigNumber(post).minus(new BigNumber(pre));\n\n    return (\n      <tr key={key}>\n        <td>{index + 1}</td>\n        <td>\n          <Address pubkey={pubkey} link />\n        </td>\n        <td>\n          <BalanceDelta delta={delta} isSol />\n        </td>\n        <td>\n          <SolBalance lamports={post} />\n        </td>\n        <td>\n          {index === 0 && (\n            <span className=\"badge bg-info-soft me-1\">Fee Payer</span>\n          )}\n          {account.writable && (\n            <span className=\"badge bg-info-soft me-1\">Writable</span>\n          )}\n          {account.signer && (\n            <span className=\"badge bg-info-soft me-1\">Signer</span>\n          )}\n          {message.instructions.find((ix) => ix.programId.equals(pubkey)) && (\n            <span className=\"badge bg-info-soft me-1\">Program</span>\n          )}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Account Input(s)</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">#</th>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Change (SOL)</th>\n              <th className=\"text-muted\">Post Balance (SOL)</th>\n              <th className=\"text-muted\">Details</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{accountRows}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","import { create } from \"superstruct\";\nimport {\n  IX_TITLES,\n  TokenInstructionType,\n} from \"components/instruction/token/types\";\nimport { ParsedInfo } from \"validators\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  ConfirmedSignatureInfo,\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n} from \"@solana/web3.js\";\nimport { intoTransactionInstruction } from \"utils/tx\";\nimport {\n  isTokenSwapInstruction,\n  parseTokenSwapInstructionTitle,\n} from \"components/instruction/token-swap/types\";\nimport {\n  isTokenLendingInstruction,\n  parseTokenLendingInstructionTitle,\n} from \"components/instruction/token-lending/types\";\nimport {\n  isSerumInstruction,\n  parseSerumInstructionTitle,\n} from \"components/instruction/serum/types\";\nimport {\n  isBonfidaBotInstruction,\n  parseBonfidaBotInstructionTitle,\n} from \"components/instruction/bonfida-bot/types\";\nimport { TOKEN_PROGRAM_ID } from \"providers/accounts/tokens\";\n\nexport type InstructionType = {\n  name: string;\n  innerInstructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport interface InstructionItem {\n  instruction: ParsedInstruction | PartiallyDecodedInstruction;\n  inner: (ParsedInstruction | PartiallyDecodedInstruction)[];\n}\n\nexport class InstructionContainer {\n  readonly instructions: InstructionItem[];\n\n  static create(parsedTransaction: ParsedConfirmedTransaction) {\n    return new InstructionContainer(parsedTransaction);\n  }\n\n  constructor(parsedTransaction: ParsedConfirmedTransaction) {\n    this.instructions = parsedTransaction.transaction.message.instructions.map(\n      (instruction) => {\n        if (\"parsed\" in instruction) {\n          if (typeof instruction.parsed === \"object\") {\n            instruction.parsed = create(instruction.parsed, ParsedInfo);\n          } else if (typeof instruction.parsed !== \"string\") {\n            throw new Error(\"Unexpected parsed response\");\n          }\n        }\n\n        return {\n          instruction,\n          inner: [],\n        };\n      }\n    );\n\n    if (parsedTransaction.meta?.innerInstructions) {\n      for (let inner of parsedTransaction.meta.innerInstructions) {\n        this.instructions[inner.index].inner.push(...inner.instructions);\n      }\n    }\n  }\n}\n\nexport function getTokenProgramInstructionName(\n  ix: ParsedInstruction,\n  signatureInfo: ConfirmedSignatureInfo\n): string {\n  try {\n    const parsed = create(ix.parsed, ParsedInfo);\n    const { type: rawType } = parsed;\n    const type = create(rawType, TokenInstructionType);\n    return IX_TITLES[type];\n  } catch (err) {\n    reportError(err, { signature: signatureInfo.signature });\n    return \"Unknown\";\n  }\n}\n\nexport function getTokenInstructionName(\n  transaction: ParsedConfirmedTransaction,\n  ix: ParsedInstruction | PartiallyDecodedInstruction,\n  signatureInfo: ConfirmedSignatureInfo\n) {\n  let name = \"Unknown\";\n\n  let transactionInstruction;\n  if (transaction?.transaction) {\n    transactionInstruction = intoTransactionInstruction(\n      transaction.transaction,\n      ix\n    );\n  }\n\n  if (\"parsed\" in ix) {\n    if (ix.program === \"spl-token\") {\n      name = getTokenProgramInstructionName(ix, signatureInfo);\n    } else {\n      return undefined;\n    }\n  } else if (\n    transactionInstruction &&\n    isBonfidaBotInstruction(transactionInstruction)\n  ) {\n    try {\n      name = parseBonfidaBotInstructionTitle(transactionInstruction);\n    } catch (error) {\n      reportError(error, { signature: signatureInfo.signature });\n      return undefined;\n    }\n  } else if (\n    transactionInstruction &&\n    isSerumInstruction(transactionInstruction)\n  ) {\n    try {\n      name = parseSerumInstructionTitle(transactionInstruction);\n    } catch (error) {\n      reportError(error, { signature: signatureInfo.signature });\n      return undefined;\n    }\n  } else if (\n    transactionInstruction &&\n    isTokenSwapInstruction(transactionInstruction)\n  ) {\n    try {\n      name = parseTokenSwapInstructionTitle(transactionInstruction);\n    } catch (error) {\n      reportError(error, { signature: signatureInfo.signature });\n      return undefined;\n    }\n  } else if (\n    transactionInstruction &&\n    isTokenLendingInstruction(transactionInstruction)\n  ) {\n    try {\n      name = parseTokenLendingInstructionTitle(transactionInstruction);\n    } catch (error) {\n      reportError(error, { signature: signatureInfo.signature });\n      return undefined;\n    }\n  } else {\n    if (\n      ix.accounts.findIndex((account) => account.equals(TOKEN_PROGRAM_ID)) >= 0\n    ) {\n      name = \"Unknown (Inner)\";\n    } else {\n      return undefined;\n    }\n  }\n\n  return name;\n}\n\nexport function getTokenInstructionType(\n  transaction: ParsedConfirmedTransaction,\n  ix: ParsedInstruction | PartiallyDecodedInstruction,\n  signatureInfo: ConfirmedSignatureInfo,\n  index: number\n): InstructionType | undefined {\n  const innerInstructions: (ParsedInstruction | PartiallyDecodedInstruction)[] =\n    [];\n\n  if (transaction.meta?.innerInstructions) {\n    transaction.meta.innerInstructions.forEach((ix) => {\n      if (ix.index === index) {\n        ix.instructions.forEach((inner) => {\n          innerInstructions.push(inner);\n        });\n      }\n    });\n  }\n\n  let name =\n    getTokenInstructionName(transaction, ix, signatureInfo) || \"Unknown\";\n\n  return {\n    name,\n    innerInstructions,\n  };\n}\n","import React from \"react\";\nimport {\n  PublicKey,\n  ConfirmedSignatureInfo,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n} from \"@solana/web3.js\";\nimport { CacheEntry, FetchStatus } from \"providers/cache\";\nimport {\n  useAccountHistories,\n  useFetchAccountHistory,\n} from \"providers/accounts/history\";\nimport {\n  useAccountOwnedTokens,\n  TokenInfoWithPubkey,\n  TOKEN_PROGRAM_ID,\n} from \"providers/accounts/tokens\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Signature } from \"components/common/Signature\";\nimport { Address } from \"components/common/Address\";\nimport { Slot } from \"components/common/Slot\";\nimport {\n  Details,\n  useFetchTransactionDetails,\n  useTransactionDetailsCache,\n} from \"providers/transactions/parsed\";\nimport { reportError } from \"utils/sentry\";\nimport { intoTransactionInstruction, displayAddress } from \"utils/tx\";\nimport {\n  isTokenSwapInstruction,\n  parseTokenSwapInstructionTitle,\n} from \"components/instruction/token-swap/types\";\nimport {\n  isTokenLendingInstruction,\n  parseTokenLendingInstructionTitle,\n} from \"components/instruction/token-lending/types\";\nimport {\n  isSerumInstruction,\n  parseSerumInstructionTitle,\n} from \"components/instruction/serum/types\";\nimport {\n  isBonfidaBotInstruction,\n  parseBonfidaBotInstructionTitle,\n} from \"components/instruction/bonfida-bot/types\";\nimport { INNER_INSTRUCTIONS_START_SLOT } from \"pages/TransactionDetailsPage\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { useQuery } from \"utils/url\";\nimport { TokenInfoMap } from \"@solana/spl-token-registry\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { getTokenProgramInstructionName } from \"utils/instruction\";\nimport {\n  isMangoInstruction,\n  parseMangoInstructionTitle,\n} from \"components/instruction/mango/types\";\n\nconst TRUNCATE_TOKEN_LENGTH = 10;\nconst ALL_TOKENS = \"\";\n\ntype InstructionType = {\n  name: string;\n  innerInstructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport function TokenHistoryCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const ownedTokens = useAccountOwnedTokens(address);\n\n  if (ownedTokens === undefined) {\n    return null;\n  }\n\n  const tokens = ownedTokens.data?.tokens;\n  if (tokens === undefined || tokens.length === 0) return null;\n\n  if (tokens.length > 25) {\n    return (\n      <ErrorCard text=\"Token transaction history is not available for accounts with over 25 token accounts\" />\n    );\n  }\n\n  return <TokenHistoryTable tokens={tokens} />;\n}\n\nconst useQueryFilter = (): string => {\n  const query = useQuery();\n  const filter = query.get(\"filter\");\n  return filter || \"\";\n};\n\ntype FilterProps = {\n  filter: string;\n  toggle: () => void;\n  show: boolean;\n  tokens: TokenInfoWithPubkey[];\n};\n\nfunction TokenHistoryTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const accountHistories = useAccountHistories();\n  const fetchAccountHistory = useFetchAccountHistory();\n  const transactionDetailsCache = useTransactionDetailsCache();\n  const [showDropdown, setDropdown] = React.useState(false);\n  const filter = useQueryFilter();\n\n  const filteredTokens = React.useMemo(\n    () =>\n      tokens.filter((token) => {\n        if (filter === ALL_TOKENS) {\n          return true;\n        }\n        return token.info.mint.toBase58() === filter;\n      }),\n    [tokens, filter]\n  );\n\n  const fetchHistories = React.useCallback(\n    (refresh?: boolean) => {\n      filteredTokens.forEach((token) => {\n        fetchAccountHistory(token.pubkey, refresh);\n      });\n    },\n    [filteredTokens, fetchAccountHistory]\n  );\n\n  // Fetch histories on load\n  React.useEffect(() => {\n    filteredTokens.forEach((token) => {\n      const address = token.pubkey.toBase58();\n      if (!accountHistories[address]) {\n        fetchAccountHistory(token.pubkey, true);\n      }\n    });\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const allFoundOldest = filteredTokens.every((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.data?.foundOldest === true;\n  });\n\n  const allFetchedSome = filteredTokens.every((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.data !== undefined;\n  });\n\n  // Find the oldest slot which we know we have the full history for\n  let oldestSlot: number | undefined = allFoundOldest ? 0 : undefined;\n\n  if (!allFoundOldest && allFetchedSome) {\n    filteredTokens.forEach((token) => {\n      const history = accountHistories[token.pubkey.toBase58()];\n      if (history?.data?.foundOldest === false) {\n        const earliest =\n          history.data.fetched[history.data.fetched.length - 1].slot;\n        if (!oldestSlot) oldestSlot = earliest;\n        oldestSlot = Math.max(oldestSlot, earliest);\n      }\n    });\n  }\n\n  const fetching = filteredTokens.some((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.status === FetchStatus.Fetching;\n  });\n\n  const failed = filteredTokens.some((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.status === FetchStatus.FetchFailed;\n  });\n\n  const sigSet = new Set();\n  const mintAndTxs = filteredTokens\n    .map((token) => ({\n      mint: token.info.mint,\n      history: accountHistories[token.pubkey.toBase58()],\n    }))\n    .filter(({ history }) => {\n      return history?.data?.fetched && history.data.fetched.length > 0;\n    })\n    .flatMap(({ mint, history }) =>\n      (history?.data?.fetched as ConfirmedSignatureInfo[]).map((tx) => ({\n        mint,\n        tx,\n      }))\n    )\n    .filter(({ tx }) => {\n      if (sigSet.has(tx.signature)) return false;\n      sigSet.add(tx.signature);\n      return true;\n    })\n    .filter(({ tx }) => {\n      return oldestSlot !== undefined && tx.slot >= oldestSlot;\n    });\n\n  React.useEffect(() => {\n    if (!fetching && mintAndTxs.length < 1 && !allFoundOldest) {\n      fetchHistories();\n    }\n  }, [fetching, mintAndTxs, allFoundOldest, fetchHistories]);\n\n  if (mintAndTxs.length === 0) {\n    if (fetching) {\n      return <LoadingCard message=\"Loading history\" />;\n    } else if (failed) {\n      return (\n        <ErrorCard\n          retry={() => fetchHistories(true)}\n          text=\"Failed to fetch transaction history\"\n        />\n      );\n    }\n    return (\n      <ErrorCard\n        retry={() => fetchHistories(true)}\n        retryText=\"Try again\"\n        text=\"No transaction history found\"\n      />\n    );\n  }\n\n  mintAndTxs.sort((a, b) => {\n    if (a.tx.slot > b.tx.slot) return -1;\n    if (a.tx.slot < b.tx.slot) return 1;\n    return 0;\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Token History</h3>\n        <FilterDropdown\n          filter={filter}\n          toggle={() => setDropdown((show) => !show)}\n          show={showDropdown}\n          tokens={tokens}\n        ></FilterDropdown>\n        <button\n          className=\"btn btn-white btn-sm\"\n          disabled={fetching}\n          onClick={() => fetchHistories(true)}\n        >\n          {fetching ? (\n            <>\n              <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n              Loading\n            </>\n          ) : (\n            <>\n              <span className=\"fe fe-refresh-cw me-2\"></span>\n              Refresh\n            </>\n          )}\n        </button>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted w-1\">Slot</th>\n              <th className=\"text-muted\">Result</th>\n              <th className=\"text-muted\">Token</th>\n              <th className=\"text-muted\">Instruction Type</th>\n              <th className=\"text-muted\">Transaction Signature</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {mintAndTxs.map(({ mint, tx }) => (\n              <TokenTransactionRow\n                key={tx.signature}\n                mint={mint}\n                tx={tx}\n                details={transactionDetailsCache[tx.signature]}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"card-footer\">\n        {allFoundOldest ? (\n          <div className=\"text-muted text-center\">Fetched full history</div>\n        ) : (\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() => fetchHistories()}\n            disabled={fetching}\n          >\n            {fetching ? (\n              <>\n                <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n                Loading\n              </>\n            ) : (\n              \"Load More\"\n            )}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst FilterDropdown = ({ filter, toggle, show, tokens }: FilterProps) => {\n  const { cluster } = useCluster();\n  const { tokenRegistry } = useTokenRegistry();\n\n  const buildLocation = (location: Location, filter: string) => {\n    const params = new URLSearchParams(location.search);\n    if (filter === ALL_TOKENS) {\n      params.delete(\"filter\");\n    } else {\n      params.set(\"filter\", filter);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const filterOptions: string[] = [ALL_TOKENS];\n  const nameLookup: Map<string, string> = new Map();\n\n  tokens.forEach((token) => {\n    const address = token.info.mint.toBase58();\n    if (!nameLookup.has(address)) {\n      filterOptions.push(address);\n      nameLookup.set(address, formatTokenName(address, cluster, tokenRegistry));\n    }\n  });\n\n  return (\n    <div className=\"dropdown me-2\">\n      <small className=\"me-2\">Filter:</small>\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {filter === ALL_TOKENS ? \"All Tokens\" : nameLookup.get(filter)}\n      </button>\n      <div\n        className={`token-filter dropdown-menu-end dropdown-menu${\n          show ? \" show\" : \"\"\n        }`}\n      >\n        {filterOptions.map((filterOption) => {\n          return (\n            <Link\n              key={filterOption}\n              to={(location: Location) => buildLocation(location, filterOption)}\n              className={`dropdown-item${\n                filterOption === filter ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {filterOption === ALL_TOKENS\n                ? \"All Tokens\"\n                : formatTokenName(filterOption, cluster, tokenRegistry)}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst TokenTransactionRow = React.memo(\n  ({\n    mint,\n    tx,\n    details,\n  }: {\n    mint: PublicKey;\n    tx: ConfirmedSignatureInfo;\n    details: CacheEntry<Details> | undefined;\n  }) => {\n    const fetchDetails = useFetchTransactionDetails();\n    const { cluster } = useCluster();\n\n    // Fetch details on load\n    React.useEffect(() => {\n      if (!details) fetchDetails(tx.signature);\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    let statusText: string;\n    let statusClass: string;\n    if (tx.err) {\n      statusClass = \"warning\";\n      statusText = \"Failed\";\n    } else {\n      statusClass = \"success\";\n      statusText = \"Success\";\n    }\n\n    const instructions =\n      details?.data?.transaction?.transaction.message.instructions;\n    if (!instructions)\n      return (\n        <tr key={tx.signature}>\n          <td className=\"w-1\">\n            <Slot slot={tx.slot} link />\n          </td>\n\n          <td>\n            <span className={`badge bg-${statusClass}-soft`}>{statusText}</span>\n          </td>\n\n          <td>\n            <Address pubkey={mint} link truncate />\n          </td>\n\n          <td>\n            <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n            Loading\n          </td>\n\n          <td>\n            <Signature signature={tx.signature} link />\n          </td>\n        </tr>\n      );\n\n    let tokenInstructionNames: InstructionType[] = [];\n\n    if (details?.data?.transaction) {\n      const transaction = details.data.transaction;\n\n      tokenInstructionNames = instructions\n        .map((ix, index): InstructionType | undefined => {\n          let name = \"Unknown\";\n\n          const innerInstructions: (\n            | ParsedInstruction\n            | PartiallyDecodedInstruction\n          )[] = [];\n\n          if (\n            transaction.meta?.innerInstructions &&\n            (cluster !== Cluster.MainnetBeta ||\n              transaction.slot >= INNER_INSTRUCTIONS_START_SLOT)\n          ) {\n            transaction.meta.innerInstructions.forEach((ix) => {\n              if (ix.index === index) {\n                ix.instructions.forEach((inner) => {\n                  innerInstructions.push(inner);\n                });\n              }\n            });\n          }\n\n          let transactionInstruction;\n          if (transaction?.transaction) {\n            transactionInstruction = intoTransactionInstruction(\n              transaction.transaction,\n              ix\n            );\n          }\n\n          if (\"parsed\" in ix) {\n            if (ix.program === \"spl-token\") {\n              name = getTokenProgramInstructionName(ix, tx);\n            } else {\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isSerumInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseSerumInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isTokenSwapInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseTokenSwapInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isTokenLendingInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseTokenLendingInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isBonfidaBotInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseBonfidaBotInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isMangoInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseMangoInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else {\n            if (\n              ix.accounts.findIndex((account) =>\n                account.equals(TOKEN_PROGRAM_ID)\n              ) >= 0\n            ) {\n              name = \"Unknown (Inner)\";\n            } else {\n              return undefined;\n            }\n          }\n\n          return {\n            name,\n            innerInstructions,\n          };\n        })\n        .filter((name) => name !== undefined) as InstructionType[];\n    }\n\n    return (\n      <>\n        {tokenInstructionNames.map((instructionType, index) => {\n          return (\n            <tr key={index}>\n              <td className=\"w-1\">\n                <Slot slot={tx.slot} link />\n              </td>\n\n              <td>\n                <span className={`badge bg-${statusClass}-soft`}>\n                  {statusText}\n                </span>\n              </td>\n\n              <td className=\"forced-truncate\">\n                <Address pubkey={mint} link truncateUnknown />\n              </td>\n\n              <td>\n                <InstructionDetails instructionType={instructionType} tx={tx} />\n              </td>\n\n              <td className=\"forced-truncate\">\n                <Signature signature={tx.signature} link truncate />\n              </td>\n            </tr>\n          );\n        })}\n      </>\n    );\n  }\n);\n\nfunction InstructionDetails({\n  instructionType,\n  tx,\n}: {\n  instructionType: InstructionType;\n  tx: ConfirmedSignatureInfo;\n}) {\n  const [expanded, setExpanded] = React.useState(false);\n\n  let instructionTypes = instructionType.innerInstructions\n    .map((ix) => {\n      if (\"parsed\" in ix && ix.program === \"spl-token\") {\n        return getTokenProgramInstructionName(ix, tx);\n      }\n      return undefined;\n    })\n    .filter((type) => type !== undefined);\n\n  return (\n    <>\n      <p className=\"tree\">\n        {instructionTypes.length > 0 && (\n          <span\n            onClick={(e) => {\n              e.preventDefault();\n              setExpanded(!expanded);\n            }}\n            className={`c-pointer fe me-2 ${\n              expanded ? \"fe-minus-square\" : \"fe-plus-square\"\n            }`}\n          ></span>\n        )}\n        {instructionType.name}\n      </p>\n      {expanded && (\n        <ul className=\"tree\">\n          {instructionTypes.map((type, index) => {\n            return <li key={index}>{type}</li>;\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n\nfunction formatTokenName(\n  pubkey: string,\n  cluster: Cluster,\n  tokenRegistry: TokenInfoMap\n): string {\n  let display = displayAddress(pubkey, cluster, tokenRegistry);\n\n  if (display === pubkey) {\n    display = display.slice(0, TRUNCATE_TOKEN_LENGTH) + \"\\u2026\";\n  }\n\n  return display;\n}\n","import React from \"react\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport {\n  PublicKey,\n  Connection,\n  TokenAccountBalancePair,\n  ParsedAccountData,\n} from \"@solana/web3.js\";\nimport { TokenAccountInfo, TokenAccount } from \"validators/accounts/token\";\nimport { ParsedInfo } from \"validators\";\nimport { create } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\n\ntype LargestAccounts = {\n  largest: TokenAccountBalancePairWithOwner[];\n};\n\ntype State = Cache.State<LargestAccounts>;\ntype Dispatch = Cache.Dispatch<LargestAccounts>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function LargestAccountsProvider({ children }: ProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<LargestAccounts>(url);\n\n  // Clear cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\ntype OptionalOwner = {\n  owner?: PublicKey;\n};\n\nexport type TokenAccountBalancePairWithOwner = TokenAccountBalancePair &\n  OptionalOwner;\n\nasync function fetchLargestAccounts(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: pubkey.toBase58(),\n    status: Cache.FetchStatus.Fetching,\n    url,\n  });\n\n  let data;\n  let fetchStatus;\n  try {\n    data = {\n      largest: (\n        await new Connection(url, \"confirmed\").getTokenLargestAccounts(pubkey)\n      ).value,\n    };\n\n    data.largest = await Promise.all(\n      data.largest.map(\n        async (account): Promise<TokenAccountBalancePairWithOwner> => {\n          try {\n            const accountInfo = (\n              await new Connection(url, \"confirmed\").getParsedAccountInfo(\n                account.address\n              )\n            ).value;\n            if (accountInfo && \"parsed\" in accountInfo.data) {\n              const info = createParsedAccountInfo(accountInfo.data);\n              return {\n                ...account,\n                owner: info.owner,\n              };\n            }\n          } catch (error) {\n            if (cluster !== Cluster.Custom) {\n              reportError(error, { url });\n            }\n          }\n          return account;\n        }\n      )\n    );\n\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    data,\n    key: pubkey.toBase58(),\n    url,\n  });\n}\n\nexport function useFetchTokenLargestAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTokenLargestAccounts must be used within a MintsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchLargestAccounts(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n\nexport function useTokenLargestTokens(\n  address: string\n): Cache.CacheEntry<LargestAccounts> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTokenLargestTokens must be used within a MintsProvider`\n    );\n  }\n\n  return context.entries[address];\n}\n\nfunction createParsedAccountInfo(\n  parsedData: ParsedAccountData\n): TokenAccountInfo {\n  try {\n    const data = create(parsedData.parsed, ParsedInfo);\n    const parsed = create(data, TokenAccount);\n    return create(parsed.info, TokenAccountInfo);\n  } catch (error) {\n    throw error;\n  }\n}\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Address } from \"components/common/Address\";\nimport {\n  useTokenLargestTokens,\n  useFetchTokenLargestAccounts,\n  TokenAccountBalancePairWithOwner,\n} from \"providers/mints/largest\";\nimport { FetchStatus } from \"providers/cache\";\nimport { useMintAccountInfo } from \"providers/accounts\";\nimport { normalizeTokenAmount } from \"utils\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport BigNumber from \"bignumber.js\";\n\nexport function TokenLargestAccountsCard({ pubkey }: { pubkey: PublicKey }) {\n  const mintAddress = pubkey.toBase58();\n  const mintInfo = useMintAccountInfo(mintAddress);\n  const largestAccounts = useTokenLargestTokens(mintAddress);\n  const fetchLargestAccounts = useFetchTokenLargestAccounts();\n  const refreshLargest = React.useCallback(\n    () => fetchLargestAccounts(pubkey),\n    [pubkey, fetchLargestAccounts]\n  );\n  const { tokenRegistry } = useTokenRegistry();\n  const unit = tokenRegistry.get(mintAddress)?.symbol;\n  const unitLabel = unit ? `(${unit})` : \"\";\n\n  React.useEffect(() => {\n    if (mintInfo) refreshLargest();\n  }, [mintInfo, refreshLargest]);\n\n  // Largest accounts hasn't started fetching\n  if (largestAccounts === undefined) return null;\n\n  // This is not a mint account\n  if (mintInfo === undefined) return null;\n\n  if (largestAccounts?.data === undefined) {\n    if (largestAccounts.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading largest accounts\" />;\n    }\n\n    return (\n      <ErrorCard\n        retry={refreshLargest}\n        text=\"Failed to fetch largest accounts\"\n      />\n    );\n  } else if (largestAccounts.status === FetchStatus.Fetching) {\n    return <LoadingCard message=\"Refreshing largest accounts\" />;\n  }\n\n  const accounts = largestAccounts.data.largest;\n  if (accounts.length === 0) {\n    return <ErrorCard text=\"No holders found\" />;\n  }\n\n  // Find largest fixed point in accounts array\n  const balanceFixedPoint = accounts.reduce(\n    (prev: number, current: TokenAccountBalancePairWithOwner) => {\n      const amount = `${current.uiAmountString}`;\n      const length = amount.length;\n      const decimalIndex = amount.indexOf(\".\");\n      if (decimalIndex >= 0 && length - decimalIndex - 1 > prev) {\n        return length - decimalIndex - 1;\n      }\n      return prev;\n    },\n    0\n  );\n\n  const supplyTotal = normalizeTokenAmount(mintInfo.supply, mintInfo.decimals);\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Largest Accounts</h4>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm card-table\">\n            <thead>\n              <tr>\n                <th className=\"text-muted\">Rank</th>\n                <th className=\"text-muted\">Address</th>\n                <th className=\"text-muted\">Owner</th>\n                <th className=\"text-muted text-end\">Balance {unitLabel}</th>\n                <th className=\"text-muted text-end\">% of Total Supply</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {accounts.map((account, index) =>\n                renderAccountRow(account, index, balanceFixedPoint, supplyTotal)\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (\n  account: TokenAccountBalancePairWithOwner,\n  index: number,\n  balanceFixedPoint: number,\n  supply: number\n) => {\n  let percent = \"-\";\n  if (supply > 0 && account.uiAmountString) {\n    let uiAmountPercent = new BigNumber(account.uiAmountString)\n      .times(100)\n      .dividedBy(supply);\n\n    percent = `${uiAmountPercent.toFormat(3)}%`;\n\n    if (\n      parseFloat(percent) === 0 &&\n      new BigNumber(account.uiAmountString).gt(0)\n    ) {\n      percent = `~${percent}`;\n    }\n  }\n  return (\n    <tr key={index}>\n      <td>\n        <span className=\"badge bg-gray-soft badge-pill\">{index + 1}</span>\n      </td>\n      <td className=\"td\">\n        <Address pubkey={account.address} link truncate />\n      </td>\n      <td>\n        {account.owner && <Address pubkey={account.owner} link truncate />}\n      </td>\n      <td className=\"text-end font-monospace\">\n        {account.uiAmountString &&\n          new BigNumber(account.uiAmountString).toFormat(balanceFixedPoint)}\n      </td>\n      <td className=\"text-end font-monospace\">{percent}</td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { Address } from \"./Address\";\nimport { Account } from \"providers/accounts\";\nimport { SolBalance } from \"utils\";\n\ntype AccountHeaderProps = {\n  title: string;\n  refresh: Function;\n};\n\ntype AccountProps = {\n  account: Account;\n};\n\nexport function AccountHeader({ title, refresh }: AccountHeaderProps) {\n  return (\n    <div className=\"card-header align-items-center\">\n      <h3 className=\"card-header-title\">{title}</h3>\n      <button className=\"btn btn-white btn-sm\" onClick={() => refresh()}>\n        <span className=\"fe fe-refresh-cw me-2\"></span>\n        Refresh\n      </button>\n    </div>\n  );\n}\n\nexport function AccountAddressRow({ account }: AccountProps) {\n  return (\n    <tr>\n      <td>Address</td>\n      <td className=\"text-lg-end\">\n        <Address pubkey={account.pubkey} alignRight raw />\n      </td>\n    </tr>\n  );\n}\n\nexport function AccountBalanceRow({ account }: AccountProps) {\n  const { lamports } = account;\n  return (\n    <tr>\n      <td>Balance (SOL)</td>\n      <td className=\"text-lg-end text-uppercase\">\n        <SolBalance lamports={lamports} />\n      </td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { VoteAccount } from \"validators/accounts/vote\";\nimport { displayTimestamp } from \"utils/date\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\nimport { Slot } from \"components/common/Slot\";\n\nexport function VoteAccountSection({\n  account,\n  voteAccount,\n}: {\n  account: Account;\n  voteAccount: VoteAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  const rootSlot = voteAccount.info.rootSlot;\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Vote Account\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>\n            Authorized Voter\n            {voteAccount.info.authorizedVoters.length > 1 ? \"s\" : \"\"}\n          </td>\n          <td className=\"text-lg-end\">\n            {voteAccount.info.authorizedVoters.map((voter) => {\n              return (\n                <Address\n                  pubkey={voter.authorizedVoter}\n                  key={voter.authorizedVoter.toString()}\n                  alignRight\n                  raw\n                  link\n                />\n              );\n            })}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Authorized Withdrawer</td>\n          <td className=\"text-lg-end\">\n            <Address\n              pubkey={voteAccount.info.authorizedWithdrawer}\n              alignRight\n              raw\n              link\n            />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Last Timestamp</td>\n          <td className=\"text-lg-end font-monospace\">\n            {displayTimestamp(voteAccount.info.lastTimestamp.timestamp * 1000)}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Commission</td>\n          <td className=\"text-lg-end\">{voteAccount.info.commission + \"%\"}</td>\n        </tr>\n\n        <tr>\n          <td>Root Slot</td>\n          <td className=\"text-lg-end\">\n            {rootSlot !== null ? <Slot slot={rootSlot} link /> : \"N/A\"}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { NonceAccount } from \"validators/accounts/nonce\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\n\nexport function NonceAccountSection({\n  account,\n  nonceAccount,\n}: {\n  account: Account;\n  nonceAccount: NonceAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Nonce Account\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Authority</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={nonceAccount.info.authority} alignRight raw link />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Blockhash</td>\n          <td className=\"text-lg-end\">\n            <code>{nonceAccount.info.blockhash}</code>\n          </td>\n        </tr>\n\n        <tr>\n          <td>Fee</td>\n          <td className=\"text-lg-end\">\n            {nonceAccount.info.feeCalculator.lamportsPerSignature} lamports per\n            signature\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import { Slot } from \"components/common/Slot\";\nimport React from \"react\";\nimport { VoteAccount, Vote } from \"validators/accounts/vote\";\n\nexport function VotesCard({ voteAccount }: { voteAccount: VoteAccount }) {\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Vote History</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Slot</th>\n                <th className=\"text-muted\">Confirmation Count</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {voteAccount.info.votes.length > 0 &&\n                voteAccount.info.votes\n                  .reverse()\n                  .map((vote: Vote, index) => renderAccountRow(vote, index))}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {voteAccount.info.votes.length > 0 ? \"\" : \"No votes found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (vote: Vote, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 font-monospace\">\n        <Slot slot={vote.slot} link />\n      </td>\n      <td className=\"font-monospace\">{vote.confirmationCount}</td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport {\n  SysvarAccount,\n  SysvarClockAccount,\n  SysvarEpochScheduleAccount,\n  SysvarFeesAccount,\n  SysvarRecentBlockhashesAccount,\n  SysvarRentAccount,\n  SysvarRewardsAccount,\n  SysvarSlotHashesAccount,\n  SysvarSlotHistoryAccount,\n  SysvarStakeHistoryAccount,\n} from \"validators/accounts/sysvar\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\nimport { displayTimestamp } from \"utils/date\";\nimport { Slot } from \"components/common/Slot\";\nimport { Epoch } from \"components/common/Epoch\";\n\nexport function SysvarAccountSection({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarAccount;\n}) {\n  switch (sysvarAccount.type) {\n    case \"clock\":\n      return (\n        <SysvarAccountClockCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"rent\":\n      return (\n        <SysvarAccountRentCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"rewards\":\n      return (\n        <SysvarAccountRewardsCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"epochSchedule\":\n      return (\n        <SysvarAccountEpochScheduleCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"fees\":\n      return (\n        <SysvarAccountFeesCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"recentBlockhashes\":\n      return (\n        <SysvarAccountRecentBlockhashesCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"slotHashes\":\n      return (\n        <SysvarAccountSlotHashes\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"slotHistory\":\n      return (\n        <SysvarAccountSlotHistory\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"stakeHistory\":\n      return (\n        <SysvarAccountStakeHistory\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n  }\n}\n\nfunction SysvarAccountRecentBlockhashesCard({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRecentBlockhashesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Recent Blockhashes\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountSlotHashes({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarSlotHashesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Slot Hashes\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountSlotHistory({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarSlotHistoryAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  const history = Array.from(\n    {\n      length: 100,\n    },\n    (v, k) => sysvarAccount.info.nextSlot - k\n  );\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Slot History\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td className=\"align-top\">\n            Slot History{\" \"}\n            <span className=\"text-muted\">(previous 100 slots)</span>\n          </td>\n          <td className=\"text-lg-end font-monospace\">\n            {history.map((val) => (\n              <p key={val} className=\"mb-0\">\n                <Slot slot={val} link />\n              </p>\n            ))}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountStakeHistory({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarStakeHistoryAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Stake History\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountFeesCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarFeesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Fees\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Lamports Per Signature</td>\n          <td className=\"text-lg-end\">\n            {sysvarAccount.info.feeCalculator.lamportsPerSignature}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountEpochScheduleCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarEpochScheduleAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Epoch Schedule\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Slots Per Epoch</td>\n          <td className=\"text-lg-end\">{sysvarAccount.info.slotsPerEpoch}</td>\n        </tr>\n\n        <tr>\n          <td>Leader Schedule Slot Offset</td>\n          <td className=\"text-lg-end\">\n            {sysvarAccount.info.leaderScheduleSlotOffset}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Epoch Warmup Enabled</td>\n          <td className=\"text-lg-end\">\n            <code>{sysvarAccount.info.warmup ? \"true\" : \"false\"}</code>\n          </td>\n        </tr>\n\n        <tr>\n          <td>First Normal Epoch</td>\n          <td className=\"text-lg-end\">{sysvarAccount.info.firstNormalEpoch}</td>\n        </tr>\n\n        <tr>\n          <td>First Normal Slot</td>\n          <td className=\"text-lg-end\">\n            <Slot slot={sysvarAccount.info.firstNormalSlot} />\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountClockCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarClockAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Clock\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Timestamp</td>\n          <td className=\"text-lg-end font-monospace\">\n            {displayTimestamp(sysvarAccount.info.unixTimestamp * 1000)}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Epoch</td>\n          <td className=\"text-lg-end\">\n            <Epoch epoch={sysvarAccount.info.epoch} link />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Leader Schedule Epoch</td>\n          <td className=\"text-lg-end\">\n            <Epoch epoch={sysvarAccount.info.leaderScheduleEpoch} link />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Slot</td>\n          <td className=\"text-lg-end\">\n            <Slot slot={sysvarAccount.info.slot} link />\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountRentCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRentAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Rent\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Burn Percent</td>\n          <td className=\"text-lg-end\">\n            {sysvarAccount.info.burnPercent + \"%\"}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Exemption Threshold</td>\n          <td className=\"text-lg-end\">\n            {sysvarAccount.info.exemptionThreshold} years\n          </td>\n        </tr>\n\n        <tr>\n          <td>Lamports Per Byte Year</td>\n          <td className=\"text-lg-end\">\n            {sysvarAccount.info.lamportsPerByteYear}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountRewardsCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRewardsAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  const validatorPointValueFormatted = new Intl.NumberFormat(\"en-US\", {\n    maximumSignificantDigits: 20,\n  }).format(sysvarAccount.info.validatorPointValue);\n\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Rewards\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Validator Point Value</td>\n          <td className=\"text-lg-end font-monospace\">\n            {validatorPointValueFormatted} lamports\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import { Slot } from \"components/common/Slot\";\nimport React from \"react\";\nimport {\n  SysvarAccount,\n  SlotHashesInfo,\n  SlotHashEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function SlotHashesCard({\n  sysvarAccount,\n}: {\n  sysvarAccount: SysvarAccount;\n}) {\n  const slotHashes = sysvarAccount.info as SlotHashesInfo;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <div className=\"row align-items-center\">\n          <div className=\"col\">\n            <h3 className=\"card-header-title\">Slot Hashes</h3>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"w-1 text-muted\">Slot</th>\n              <th className=\"text-muted\">Blockhash</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {slotHashes.length > 0 &&\n              slotHashes.map((entry: SlotHashEntry, index) => {\n                return renderAccountRow(entry, index);\n              })}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"card-footer\">\n        <div className=\"text-muted text-center\">\n          {slotHashes.length > 0 ? \"\" : \"No hashes found\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst renderAccountRow = (entry: SlotHashEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 font-monospace\">\n        <Slot slot={entry.slot} link />\n      </td>\n      <td className=\"font-monospace\">{entry.hash}</td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { SolBalance } from \"utils\";\nimport { Epoch } from \"components/common/Epoch\";\nimport {\n  SysvarAccount,\n  StakeHistoryInfo,\n  StakeHistoryEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function StakeHistoryCard({\n  sysvarAccount,\n}: {\n  sysvarAccount: SysvarAccount;\n}) {\n  const stakeHistory = sysvarAccount.info as StakeHistoryInfo;\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Stake History</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Epoch</th>\n                <th className=\"text-muted\">Effective (SOL)</th>\n                <th className=\"text-muted\">Activating (SOL)</th>\n                <th className=\"text-muted\">Deactivating (SOL)</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {stakeHistory.length > 0 &&\n                stakeHistory.map((entry: StakeHistoryEntry, index) => {\n                  return renderAccountRow(entry, index);\n                })}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {stakeHistory.length > 0 ? \"\" : \"No stake history found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (entry: StakeHistoryEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 font-monospace\">\n        <Epoch epoch={entry.epoch} link />\n      </td>\n      <td className=\"font-monospace\">\n        <SolBalance lamports={entry.stakeHistory.effective} />\n      </td>\n      <td className=\"font-monospace\">\n        <SolBalance lamports={entry.stakeHistory.activating} />\n      </td>\n      <td className=\"font-monospace\">\n        <SolBalance lamports={entry.stakeHistory.deactivating} />\n      </td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport {\n  RecentBlockhashesInfo,\n  RecentBlockhashesEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function BlockhashesCard({\n  blockhashes,\n}: {\n  blockhashes: RecentBlockhashesInfo;\n}) {\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Blockhashes</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Recency</th>\n                <th className=\"w-1 text-muted\">Blockhash</th>\n                <th className=\"text-muted\">Fee Calculator</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {blockhashes.length > 0 &&\n                blockhashes.map((entry: RecentBlockhashesEntry, index) => {\n                  return renderAccountRow(entry, index);\n                })}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {blockhashes.length > 0 ? \"\" : \"No blockhashes found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (entry: RecentBlockhashesEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1\">{index + 1}</td>\n      <td className=\"w-1 font-monospace\">{entry.blockhash}</td>\n      <td className=\"\">\n        {entry.feeCalculator.lamportsPerSignature} lamports per signature\n      </td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport {\n  ConfigAccount,\n  StakeConfigInfoAccount,\n  ValidatorInfoAccount,\n} from \"validators/accounts/config\";\nimport {\n  AccountAddressRow,\n  AccountBalanceRow,\n  AccountHeader,\n} from \"components/common/Account\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\n\nconst MAX_SLASH_PENALTY = Math.pow(2, 8);\n\nexport function ConfigAccountSection({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: ConfigAccount;\n}) {\n  switch (configAccount.type) {\n    case \"stakeConfig\":\n      return (\n        <StakeConfigCard account={account} configAccount={configAccount} />\n      );\n    case \"validatorInfo\":\n      return (\n        <ValidatorInfoCard account={account} configAccount={configAccount} />\n      );\n  }\n}\n\nfunction StakeConfigCard({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: StakeConfigInfoAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  const warmupCooldownFormatted = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    maximumFractionDigits: 2,\n  }).format(configAccount.info.warmupCooldownRate);\n\n  const slashPenaltyFormatted = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    maximumFractionDigits: 2,\n  }).format(configAccount.info.slashPenalty / MAX_SLASH_PENALTY);\n\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Stake Config\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Warmup / Cooldown Rate</td>\n          <td className=\"text-lg-end\">{warmupCooldownFormatted}</td>\n        </tr>\n\n        <tr>\n          <td>Slash Penalty</td>\n          <td className=\"text-lg-end\">{slashPenaltyFormatted}</td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction ValidatorInfoCard({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: ValidatorInfoAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Validator Info\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        {configAccount.info.configData.name && (\n          <tr>\n            <td>Name</td>\n            <td className=\"text-lg-end\">\n              {configAccount.info.configData.name}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.keybaseUsername && (\n          <tr>\n            <td>Keybase Username</td>\n            <td className=\"text-lg-end\">\n              {configAccount.info.configData.keybaseUsername}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.website && (\n          <tr>\n            <td>Website</td>\n            <td className=\"text-lg-end\">\n              <a\n                href={configAccount.info.configData.website}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {configAccount.info.configData.website}\n              </a>\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.details && (\n          <tr>\n            <td>Details</td>\n            <td className=\"text-lg-end\">\n              {configAccount.info.configData.details}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.keys && configAccount.info.keys.length > 1 && (\n          <tr>\n            <td>Signer</td>\n            <td className=\"text-lg-end\">\n              <Address\n                pubkey={new PublicKey(configAccount.info.keys[1].pubkey)}\n                link\n                alignRight\n              />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import { VerifiableBuild } from \"utils/program-verification\";\n\nexport function VerifiedBadge({\n  verifiableBuild,\n  deploySlot,\n}: {\n  verifiableBuild: VerifiableBuild;\n  deploySlot: number;\n}) {\n  if (verifiableBuild && verifiableBuild.verified_slot === deploySlot) {\n    return (\n      <h3 className=\"mb-0\">\n        <a\n          className=\"c-pointer badge bg-success-soft rank\"\n          href={verifiableBuild.url}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {verifiableBuild.label}: Verified\n        </a>\n      </h3>\n    );\n  } else {\n    return (\n      <h3 className=\"mb-0\">\n        <span className=\"badge bg-warning-soft rank\">\n          {verifiableBuild.label}: Unverified\n        </span>\n      </h3>\n    );\n  }\n}\n\nexport function CheckingBadge() {\n  return (\n    <h3 className=\"mb-0\">\n      <span className=\"badge bg-dark rank\">Checking</span>\n    </h3>\n  );\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\n\nexport type VerifiableBuild =\n  | {\n      label: string;\n      id: number;\n      verified_slot: number;\n      url: string;\n    }\n  | {\n      label: string;\n      verified_slot: null;\n    };\n\nexport function useVerifiableBuilds(programAddress: PublicKey) {\n  const { loading: loadingAnchor, verifiableBuild: verifiedBuildAnchor } =\n    useAnchorVerifiableBuild(programAddress);\n\n  return {\n    loading: loadingAnchor,\n    verifiableBuilds: [verifiedBuildAnchor],\n  };\n}\n\n// ANCHOR\n\nconst defaultAnchorBuild = {\n  label: \"Anchor\",\n  verified_slot: null,\n};\n\nexport function useAnchorVerifiableBuild(programAddress: PublicKey) {\n  const [loading, setLoading] = useState(true);\n  const [verifiableBuild, setVerifiableBuild] =\n    useState<VerifiableBuild>(defaultAnchorBuild);\n\n  useEffect(() => {\n    setLoading(true);\n    getAnchorVerifiableBuild(programAddress)\n      .then(setVerifiableBuild)\n      .catch((error) => {\n        console.log(error);\n        setVerifiableBuild(defaultAnchorBuild);\n      })\n      .finally(() => setLoading(false));\n  }, [programAddress, setVerifiableBuild, setLoading]);\n\n  return {\n    loading,\n    verifiableBuild,\n  };\n}\n\nexport interface AnchorBuild {\n  aborted: boolean;\n  address: string;\n  created_at: string;\n  updated_at: string;\n  descriptor: string[];\n  docker: string;\n  id: number;\n  name: string;\n  sha256: string;\n  upgrade_authority: string;\n  verified: string;\n  verified_slot: number;\n  state: string;\n}\n\n/**\n * Returns a verified build from the anchor registry. null if no such\n * verified build exists, e.g., if the program has been upgraded since the\n * last verified build.\n */\nexport async function getAnchorVerifiableBuild(\n  programId: PublicKey,\n  limit: number = 5\n): Promise<VerifiableBuild> {\n  const url = `https://anchor.projectserum.com/api/v0/program/${programId.toString()}/latest?limit=${limit}`;\n  const latestBuildsResp = await fetch(url);\n\n  // Filter out all non successful builds.\n  const latestBuilds = (await latestBuildsResp.json()).filter(\n    (b: AnchorBuild) =>\n      !b.aborted && b.state === \"Built\" && b.verified === \"Verified\"\n  ) as AnchorBuild[];\n\n  if (latestBuilds.length === 0) {\n    return defaultAnchorBuild;\n  }\n\n  // Get the latest build.\n  const { verified_slot, id } = latestBuilds[0];\n  return {\n    ...defaultAnchorBuild,\n    verified_slot,\n    id,\n    url: `https://anchor.projectserum.com/build/${id}`,\n  };\n}\n\n// END ANCHOR\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { SolBalance } from \"utils\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { Address } from \"components/common/Address\";\nimport {\n  ProgramAccountInfo,\n  ProgramBufferAccountInfo,\n  ProgramDataAccountInfo,\n  UpgradeableLoaderAccount,\n} from \"validators/accounts/upgradeable-program\";\nimport { Slot } from \"components/common/Slot\";\nimport { addressLabel } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { UnknownAccountCard } from \"components/account/UnknownAccountCard\";\nimport { Downloadable } from \"components/common/Downloadable\";\nimport { CheckingBadge, VerifiedBadge } from \"components/common/VerifiedBadge\";\nimport { InfoTooltip } from \"components/common/InfoTooltip\";\nimport { useVerifiableBuilds } from \"utils/program-verification\";\n\nexport function UpgradeableLoaderAccountSection({\n  account,\n  parsedData,\n  programData,\n}: {\n  account: Account;\n  parsedData: UpgradeableLoaderAccount;\n  programData: ProgramDataAccountInfo | undefined;\n}) {\n  switch (parsedData.type) {\n    case \"program\": {\n      if (programData === undefined) {\n        return <ErrorCard text=\"Invalid Upgradeable Program account\" />;\n      }\n      return (\n        <UpgradeableProgramSection\n          account={account}\n          programAccount={parsedData.info}\n          programData={programData}\n        />\n      );\n    }\n    case \"programData\": {\n      return (\n        <UpgradeableProgramDataSection\n          account={account}\n          programData={parsedData.info}\n        />\n      );\n    }\n    case \"buffer\": {\n      return (\n        <UpgradeableProgramBufferSection\n          account={account}\n          programBuffer={parsedData.info}\n        />\n      );\n    }\n    case \"uninitialized\": {\n      return <UnknownAccountCard account={account} />;\n    }\n  }\n}\n\nexport function UpgradeableProgramSection({\n  account,\n  programAccount,\n  programData,\n}: {\n  account: Account;\n  programAccount: ProgramAccountInfo;\n  programData: ProgramDataAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  const { cluster } = useCluster();\n  const label = addressLabel(account.pubkey.toBase58(), cluster);\n  const { loading, verifiableBuilds } = useVerifiableBuilds(account.pubkey);\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Program Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw me-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {label && (\n          <tr>\n            <td>Address Label</td>\n            <td className=\"text-lg-end\">{label}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Balance (SOL)</td>\n          <td className=\"text-lg-end text-uppercase\">\n            <SolBalance lamports={account.lamports || 0} />\n          </td>\n        </tr>\n        <tr>\n          <td>Executable</td>\n          <td className=\"text-lg-end\">Yes</td>\n        </tr>\n        <tr>\n          <td>Executable Data</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={programAccount.programData} alignRight link />\n          </td>\n        </tr>\n        <tr>\n          <td>Upgradeable</td>\n          <td className=\"text-lg-end\">\n            {programData.authority !== null ? \"Yes\" : \"No\"}\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <LastVerifiedBuildLabel />\n          </td>\n          <td className=\"text-lg-end\">\n            {loading ? (\n              <CheckingBadge />\n            ) : (\n              <>\n                {verifiableBuilds.map((b, i) => (\n                  <VerifiedBadge\n                    key={i}\n                    verifiableBuild={b}\n                    deploySlot={programData.slot}\n                  />\n                ))}\n              </>\n            )}\n          </td>\n        </tr>\n        <tr>\n          <td>Last Deployed Slot</td>\n          <td className=\"text-lg-end\">\n            <Slot slot={programData.slot} link />\n          </td>\n        </tr>\n        {programData.authority !== null && (\n          <tr>\n            <td>Upgrade Authority</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={programData.authority} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction LastVerifiedBuildLabel() {\n  return (\n    <InfoTooltip text=\"Indicates whether the program currently deployed on-chain is verified to match the associated published source code, when it is available.\">\n      Verifiable Build Status\n    </InfoTooltip>\n  );\n}\n\nexport function UpgradeableProgramDataSection({\n  account,\n  programData,\n}: {\n  account: Account;\n  programData: ProgramDataAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Program Executable Data Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw me-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Balance (SOL)</td>\n          <td className=\"text-lg-end text-uppercase\">\n            <SolBalance lamports={account.lamports || 0} />\n          </td>\n        </tr>\n        {account.details?.space !== undefined && (\n          <tr>\n            <td>Data (Bytes)</td>\n            <td className=\"text-lg-end\">\n              <Downloadable\n                data={programData.data[0]}\n                filename={`${account.pubkey.toString()}.bin`}\n              >\n                <span className=\"me-2\">{account.details.space}</span>\n              </Downloadable>\n            </td>\n          </tr>\n        )}\n        <tr>\n          <td>Upgradeable</td>\n          <td className=\"text-lg-end\">\n            {programData.authority !== null ? \"Yes\" : \"No\"}\n          </td>\n        </tr>\n        <tr>\n          <td>Last Deployed Slot</td>\n          <td className=\"text-lg-end\">\n            <Slot slot={programData.slot} link />\n          </td>\n        </tr>\n        {programData.authority !== null && (\n          <tr>\n            <td>Upgrade Authority</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={programData.authority} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nexport function UpgradeableProgramBufferSection({\n  account,\n  programBuffer,\n}: {\n  account: Account;\n  programBuffer: ProgramBufferAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Program Deploy Buffer Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw me-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-end\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Balance (SOL)</td>\n          <td className=\"text-lg-end text-uppercase\">\n            <SolBalance lamports={account.lamports || 0} />\n          </td>\n        </tr>\n        {account.details?.space !== undefined && (\n          <tr>\n            <td>Data (Bytes)</td>\n            <td className=\"text-lg-end\">{account.details.space}</td>\n          </tr>\n        )}\n        {programBuffer.authority !== null && (\n          <tr>\n            <td>Deploy Authority</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={programBuffer.authority} alignRight link />\n            </td>\n          </tr>\n        )}\n        {account.details && (\n          <tr>\n            <td>Owner</td>\n            <td className=\"text-lg-end\">\n              <Address pubkey={account.details.owner} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ConfirmedSignatureInfo, TransactionError } from \"@solana/web3.js\";\n\nexport type TransactionRow = {\n  slot: number;\n  signature: string;\n  err: TransactionError | null;\n  blockTime: number | null | undefined;\n  statusClass: string;\n  statusText: string;\n  signatureInfo: ConfirmedSignatureInfo;\n};\n\nexport function HistoryCardHeader({\n  title,\n  refresh,\n  fetching,\n}: {\n  title: string;\n  refresh: Function;\n  fetching: boolean;\n}) {\n  return (\n    <div className=\"card-header align-items-center\">\n      <h3 className=\"card-header-title\">{title}</h3>\n      <button\n        className=\"btn btn-white btn-sm\"\n        disabled={fetching}\n        onClick={() => refresh()}\n      >\n        {fetching ? (\n          <>\n            <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n            Loading\n          </>\n        ) : (\n          <>\n            <span className=\"fe fe-refresh-cw me-2\"></span>\n            Refresh\n          </>\n        )}\n      </button>\n    </div>\n  );\n}\n\nexport function HistoryCardFooter({\n  fetching,\n  foundOldest,\n  loadMore,\n}: {\n  fetching: boolean;\n  foundOldest: boolean;\n  loadMore: Function;\n}) {\n  return (\n    <div className=\"card-footer\">\n      {foundOldest ? (\n        <div className=\"text-muted text-center\">Fetched full history</div>\n      ) : (\n        <button\n          className=\"btn btn-primary w-100\"\n          onClick={() => loadMore()}\n          disabled={fetching}\n        >\n          {fetching ? (\n            <>\n              <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n              Loading\n            </>\n          ) : (\n            \"Load More\"\n          )}\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport function getTransactionRows(\n  transactions: ConfirmedSignatureInfo[]\n): TransactionRow[] {\n  const transactionRows: TransactionRow[] = [];\n  for (var i = 0; i < transactions.length; i++) {\n    const slot = transactions[i].slot;\n    const slotTransactions = [transactions[i]];\n    while (i + 1 < transactions.length) {\n      const nextSlot = transactions[i + 1].slot;\n      if (nextSlot !== slot) break;\n      slotTransactions.push(transactions[++i]);\n    }\n\n    for (let slotTransaction of slotTransactions) {\n      let statusText;\n      let statusClass;\n      if (slotTransaction.err) {\n        statusClass = \"warning\";\n        statusText = \"Failed\";\n      } else {\n        statusClass = \"success\";\n        statusText = \"Success\";\n      }\n      transactionRows.push({\n        slot,\n        signature: slotTransaction.signature,\n        err: slotTransaction.err,\n        blockTime: slotTransaction.blockTime,\n        statusClass,\n        statusText,\n        signatureInfo: slotTransaction,\n      });\n    }\n  }\n\n  return transactionRows;\n}\n","import React from \"react\";\nimport { Signature } from \"components/common/Signature\";\nimport { Slot } from \"components/common/Slot\";\nimport Moment from \"react-moment\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  useAccountHistory,\n  useFetchAccountHistory,\n} from \"providers/accounts/history\";\nimport {\n  getTransactionRows,\n  HistoryCardFooter,\n  HistoryCardHeader,\n} from \"../HistoryCardComponents\";\nimport { FetchStatus } from \"providers/cache\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { useCustomAddressLabels } from \"../../../amman\";\n\nexport function TransactionHistoryCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const history = useAccountHistory(address);\n  const fetchAccountHistory = useFetchAccountHistory();\n  const refresh = () => fetchAccountHistory(pubkey, false, true);\n  const loadMore = () => fetchAccountHistory(pubkey, false);\n  const [customAddressLabels] = useCustomAddressLabels();\n\n  const transactionRows = React.useMemo(() => {\n    if (history?.data?.fetched) {\n      return getTransactionRows(history.data.fetched);\n    }\n    return [];\n  }, [history]);\n\n  React.useEffect(() => {\n    if (!history) {\n      refresh();\n    }\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!history) {\n    return null;\n  }\n\n  if (history?.data === undefined) {\n    if (history.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading history\" />;\n    }\n\n    return (\n      <ErrorCard retry={refresh} text=\"Failed to fetch transaction history\" />\n    );\n  }\n\n  const hasTimestamps = transactionRows.some((element) => element.blockTime);\n  const detailsList: React.ReactNode[] = transactionRows.map(\n    ({ slot, signature, blockTime, statusClass, statusText }) => {\n      const addressLabel = customAddressLabels.get(signature);\n      return (\n        <tr key={signature}>\n          <td>\n            <Signature\n              signature={signature}\n              addressLabel={addressLabel}\n              link\n              truncate\n            />\n          </td>\n\n          <td className=\"w-1\">\n            <Slot slot={slot} link />\n          </td>\n\n          {hasTimestamps && (\n            <td className=\"text-muted\">\n              {blockTime ? <Moment date={blockTime * 1000} fromNow /> : \"---\"}\n            </td>\n          )}\n\n          <td>\n            <span className={`badge bg-${statusClass}-soft`}>{statusText}</span>\n          </td>\n        </tr>\n      );\n    }\n  );\n\n  const fetching = history.status === FetchStatus.Fetching;\n  return (\n    <div className=\"card\">\n      <HistoryCardHeader\n        fetching={fetching}\n        refresh={() => refresh()}\n        title=\"Transaction History\"\n      />\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted w-1\">Transaction Signature</th>\n              <th className=\"text-muted w-1\">Slot</th>\n              {hasTimestamps && <th className=\"text-muted w-1\">Age</th>}\n              <th className=\"text-muted\">Result</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{detailsList}</tbody>\n        </table>\n      </div>\n      <HistoryCardFooter\n        fetching={fetching}\n        foundOldest={history.data.foundOldest}\n        loadMore={() => loadMore()}\n      />\n    </div>\n  );\n}\n","import { ParsedConfirmedTransaction } from \"@solana/web3.js\";\n\nexport type MintDetails = {\n  decimals: number;\n  mint: string;\n};\n\nexport function extractMintDetails(\n  parsedTransaction: ParsedConfirmedTransaction,\n  mintMap: Map<string, MintDetails>\n) {\n  if (parsedTransaction.meta?.preTokenBalances) {\n    parsedTransaction.meta.preTokenBalances.forEach((balance) => {\n      const account =\n        parsedTransaction.transaction.message.accountKeys[balance.accountIndex];\n      mintMap.set(account.pubkey.toBase58(), {\n        decimals: balance.uiTokenAmount.decimals,\n        mint: balance.mint,\n      });\n    });\n  }\n\n  if (parsedTransaction.meta?.postTokenBalances) {\n    parsedTransaction.meta.postTokenBalances.forEach((balance) => {\n      const account =\n        parsedTransaction.transaction.message.accountKeys[balance.accountIndex];\n      mintMap.set(account.pubkey.toBase58(), {\n        decimals: balance.uiTokenAmount.decimals,\n        mint: balance.mint,\n      });\n    });\n  }\n}\n","import React from \"react\";\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { useAccountHistory } from \"providers/accounts\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { create } from \"superstruct\";\nimport {\n  TokenInstructionType,\n  Transfer,\n  TransferChecked,\n} from \"components/instruction/token/types\";\nimport { InstructionContainer } from \"utils/instruction\";\nimport { Signature } from \"components/common/Signature\";\nimport { Address } from \"components/common/Address\";\nimport { normalizeTokenAmount } from \"utils\";\nimport {\n  getTransactionRows,\n  HistoryCardFooter,\n  HistoryCardHeader,\n} from \"../HistoryCardComponents\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { useFetchAccountHistory } from \"providers/accounts/history\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { FetchStatus } from \"providers/cache\";\nimport Moment from \"react-moment\";\nimport { extractMintDetails, MintDetails } from \"./common\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\n\ntype IndexedTransfer = {\n  index: number;\n  childIndex?: number;\n  transfer: Transfer | TransferChecked;\n};\n\nexport function TokenTransfersCard({ pubkey }: { pubkey: PublicKey }) {\n  const { cluster } = useCluster();\n  const address = pubkey.toBase58();\n  const history = useAccountHistory(address);\n  const fetchAccountHistory = useFetchAccountHistory();\n  const refresh = () => fetchAccountHistory(pubkey, true, true);\n  const loadMore = () => fetchAccountHistory(pubkey, true);\n\n  const { tokenRegistry } = useTokenRegistry();\n\n  const mintDetails = React.useMemo(\n    () => tokenRegistry.get(address),\n    [address, tokenRegistry]\n  );\n\n  const transactionRows = React.useMemo(() => {\n    if (history?.data?.fetched) {\n      return getTransactionRows(history.data.fetched);\n    }\n    return [];\n  }, [history]);\n\n  React.useEffect(() => {\n    if (!history || !history.data?.transactionMap?.size) {\n      refresh();\n    }\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const { hasTimestamps, detailsList } = React.useMemo(() => {\n    const detailedHistoryMap =\n      history?.data?.transactionMap ||\n      new Map<string, ParsedConfirmedTransaction>();\n    const hasTimestamps = transactionRows.some((element) => element.blockTime);\n    const detailsList: React.ReactNode[] = [];\n    const mintMap = new Map<string, MintDetails>();\n\n    transactionRows.forEach(\n      ({ signature, blockTime, statusText, statusClass }) => {\n        const parsed = detailedHistoryMap.get(signature);\n        if (!parsed) return;\n\n        // Extract mint information from token deltas\n        // (used to filter out non-checked tokens transfers not belonging to this mint)\n        extractMintDetails(parsed, mintMap);\n\n        // Extract all transfers from transaction\n        let transfers: IndexedTransfer[] = [];\n        InstructionContainer.create(parsed).instructions.forEach(\n          ({ instruction, inner }, index) => {\n            const transfer = getTransfer(instruction, cluster, signature);\n            if (transfer) {\n              transfers.push({\n                transfer,\n                index,\n              });\n            }\n            inner.forEach((instruction, childIndex) => {\n              const transfer = getTransfer(instruction, cluster, signature);\n              if (transfer) {\n                transfers.push({\n                  transfer,\n                  index,\n                  childIndex,\n                });\n              }\n            });\n          }\n        );\n\n        // Filter out transfers not belonging to this mint\n        transfers = transfers.filter(({ transfer }) => {\n          const sourceKey = transfer.source.toBase58();\n          const destinationKey = transfer.destination.toBase58();\n\n          if (\"tokenAmount\" in transfer && transfer.mint.equals(pubkey)) {\n            return true;\n          } else if (\n            mintMap.has(sourceKey) &&\n            mintMap.get(sourceKey)?.mint === address\n          ) {\n            return true;\n          } else if (\n            mintMap.has(destinationKey) &&\n            mintMap.get(destinationKey)?.mint === address\n          ) {\n            return true;\n          }\n\n          return false;\n        });\n\n        transfers.forEach(({ transfer, index, childIndex }) => {\n          let units = \"Tokens\";\n          let amountString = \"\";\n\n          if (mintDetails?.symbol) {\n            units = mintDetails.symbol;\n          }\n\n          if (\"tokenAmount\" in transfer) {\n            amountString = transfer.tokenAmount.uiAmountString;\n          } else {\n            let decimals = 0;\n\n            if (mintDetails?.decimals) {\n              decimals = mintDetails.decimals;\n            } else if (mintMap.has(transfer.source.toBase58())) {\n              decimals = mintMap.get(transfer.source.toBase58())?.decimals || 0;\n            } else if (mintMap.has(transfer.destination.toBase58())) {\n              decimals =\n                mintMap.get(transfer.destination.toBase58())?.decimals || 0;\n            }\n\n            amountString = new Intl.NumberFormat(\"en-US\", {\n              minimumFractionDigits: decimals,\n              maximumFractionDigits: decimals,\n            }).format(normalizeTokenAmount(transfer.amount, decimals));\n          }\n\n          detailsList.push(\n            <tr key={signature + index + (childIndex || \"\")}>\n              <td>\n                <Signature signature={signature} link truncateChars={24} />\n              </td>\n\n              {hasTimestamps && (\n                <td className=\"text-muted\">\n                  {blockTime && <Moment date={blockTime * 1000} fromNow />}\n                </td>\n              )}\n\n              <td>\n                <Address pubkey={transfer.source} link truncateChars={16} />\n              </td>\n\n              <td>\n                <Address\n                  pubkey={transfer.destination}\n                  link\n                  truncateChars={16}\n                />\n              </td>\n\n              <td>\n                {amountString} {units}\n              </td>\n\n              <td>\n                <span className={`badge bg-${statusClass}-soft`}>\n                  {statusText}\n                </span>\n              </td>\n            </tr>\n          );\n        });\n      }\n    );\n\n    return {\n      hasTimestamps,\n      detailsList,\n    };\n  }, [history, transactionRows, mintDetails, pubkey, address, cluster]);\n\n  if (!history) {\n    return null;\n  }\n\n  if (history?.data === undefined) {\n    if (history.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading token transfers\" />;\n    }\n\n    return <ErrorCard retry={refresh} text=\"Failed to fetch token transfers\" />;\n  }\n\n  const fetching = history.status === FetchStatus.Fetching;\n  return (\n    <div className=\"card\">\n      <HistoryCardHeader\n        fetching={fetching}\n        refresh={() => refresh()}\n        title=\"Token Transfers\"\n      />\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Transaction Signature</th>\n              {hasTimestamps && <th className=\"text-muted\">Age</th>}\n              <th className=\"text-muted\">Source</th>\n              <th className=\"text-muted\">Destination</th>\n              <th className=\"text-muted\">Amount</th>\n              <th className=\"text-muted\">Result</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{detailsList}</tbody>\n        </table>\n      </div>\n      <HistoryCardFooter\n        fetching={fetching}\n        foundOldest={history.data.foundOldest}\n        loadMore={() => loadMore()}\n      />\n    </div>\n  );\n}\n\nfunction getTransfer(\n  instruction: ParsedInstruction | PartiallyDecodedInstruction,\n  cluster: Cluster,\n  signature: string\n): Transfer | TransferChecked | undefined {\n  if (\"parsed\" in instruction && instruction.program === \"spl-token\") {\n    try {\n      const { type: rawType } = instruction.parsed;\n      const type = create(rawType, TokenInstructionType);\n\n      if (type === \"transferChecked\") {\n        return create(instruction.parsed.info, TransferChecked);\n      } else if (type === \"transfer\") {\n        return create(instruction.parsed.info, Transfer);\n      }\n    } catch (error) {\n      if (cluster === Cluster.MainnetBeta) {\n        reportError(error, {\n          signature,\n        });\n      }\n    }\n  }\n  return undefined;\n}\n","import React from \"react\";\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { useAccountHistory } from \"providers/accounts\";\nimport { Signature } from \"components/common/Signature\";\nimport {\n  getTokenInstructionName,\n  InstructionContainer,\n} from \"utils/instruction\";\nimport { Address } from \"components/common/Address\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { FetchStatus } from \"providers/cache\";\nimport { useFetchAccountHistory } from \"providers/accounts/history\";\nimport {\n  getTransactionRows,\n  HistoryCardFooter,\n  HistoryCardHeader,\n} from \"../HistoryCardComponents\";\nimport { extractMintDetails, MintDetails } from \"./common\";\nimport Moment from \"react-moment\";\n\nexport function TokenInstructionsCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const history = useAccountHistory(address);\n  const fetchAccountHistory = useFetchAccountHistory();\n  const refresh = () => fetchAccountHistory(pubkey, true, true);\n  const loadMore = () => fetchAccountHistory(pubkey, true);\n\n  const transactionRows = React.useMemo(() => {\n    if (history?.data?.fetched) {\n      return getTransactionRows(history.data.fetched);\n    }\n    return [];\n  }, [history]);\n\n  React.useEffect(() => {\n    if (!history || !history.data?.transactionMap?.size) {\n      refresh();\n    }\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const { hasTimestamps, detailsList } = React.useMemo(() => {\n    const detailedHistoryMap =\n      history?.data?.transactionMap ||\n      new Map<string, ParsedConfirmedTransaction>();\n    const hasTimestamps = transactionRows.some((element) => element.blockTime);\n    const detailsList: React.ReactNode[] = [];\n    const mintMap = new Map<string, MintDetails>();\n\n    transactionRows.forEach(\n      ({ signatureInfo, signature, blockTime, statusClass, statusText }) => {\n        const parsed = detailedHistoryMap.get(signature);\n        if (!parsed) return;\n\n        extractMintDetails(parsed, mintMap);\n\n        let instructions: (ParsedInstruction | PartiallyDecodedInstruction)[] =\n          [];\n\n        InstructionContainer.create(parsed).instructions.forEach(\n          ({ instruction, inner }, index) => {\n            if (isRelevantInstruction(pubkey, address, mintMap, instruction)) {\n              instructions.push(instruction);\n            }\n            instructions.push(\n              ...inner.filter((instruction) =>\n                isRelevantInstruction(pubkey, address, mintMap, instruction)\n              )\n            );\n          }\n        );\n\n        instructions.forEach((ix, index) => {\n          const programId = ix.programId;\n\n          const instructionName = getTokenInstructionName(\n            parsed,\n            ix,\n            signatureInfo\n          );\n\n          if (instructionName) {\n            detailsList.push(\n              <tr key={signature + index}>\n                <td>\n                  <Signature signature={signature} link truncateChars={48} />\n                </td>\n\n                {hasTimestamps && (\n                  <td className=\"text-muted\">\n                    {blockTime && <Moment date={blockTime * 1000} fromNow />}\n                  </td>\n                )}\n\n                <td>{instructionName}</td>\n\n                <td>\n                  <Address\n                    pubkey={programId}\n                    link\n                    truncate\n                    truncateChars={16}\n                  />\n                </td>\n\n                <td>\n                  <span className={`badge bg-${statusClass}-soft`}>\n                    {statusText}\n                  </span>\n                </td>\n              </tr>\n            );\n          }\n        });\n      }\n    );\n\n    return {\n      hasTimestamps,\n      detailsList,\n    };\n  }, [history, transactionRows, address, pubkey]);\n\n  if (!history) {\n    return null;\n  }\n\n  if (history?.data === undefined) {\n    if (history.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading token instructions\" />;\n    }\n\n    return (\n      <ErrorCard retry={refresh} text=\"Failed to fetch token instructions\" />\n    );\n  }\n\n  const fetching = history.status === FetchStatus.Fetching;\n  return (\n    <div className=\"card\">\n      <HistoryCardHeader\n        fetching={fetching}\n        refresh={() => refresh()}\n        title=\"Token Instructions\"\n      />\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted w-1\">Transaction Signature</th>\n              {hasTimestamps && <th className=\"text-muted\">Age</th>}\n              <th className=\"text-muted\">Instruction</th>\n              <th className=\"text-muted\">Program</th>\n              <th className=\"text-muted\">Result</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{detailsList}</tbody>\n        </table>\n      </div>\n      <HistoryCardFooter\n        fetching={fetching}\n        foundOldest={history.data.foundOldest}\n        loadMore={() => loadMore()}\n      />\n    </div>\n  );\n}\n\nfunction isRelevantInstruction(\n  pubkey: PublicKey,\n  address: string,\n  mintMap: Map<string, MintDetails>,\n  instruction: ParsedInstruction | PartiallyDecodedInstruction\n) {\n  if (\"accounts\" in instruction) {\n    return instruction.accounts.some(\n      (account) =>\n        account.equals(pubkey) ||\n        mintMap.get(account.toBase58())?.mint === address\n    );\n  } else if (\n    typeof instruction.parsed === \"object\" &&\n    \"info\" in instruction.parsed\n  ) {\n    return Object.entries(instruction.parsed.info).some(\n      ([key, value]) =>\n        value === address ||\n        (typeof value === \"string\" && mintMap.get(value)?.mint === address)\n    );\n  }\n  return false;\n}\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useFetchRewards, useRewards } from \"providers/accounts/rewards\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { FetchStatus } from \"providers/cache\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Slot } from \"components/common/Slot\";\nimport { lamportsToSolString } from \"utils\";\nimport { useAccountInfo } from \"providers/accounts\";\nimport BN from \"bn.js\";\nimport { Epoch } from \"components/common/Epoch\";\n\nconst MAX_EPOCH = new BN(2).pow(new BN(64)).sub(new BN(1));\n\nexport function RewardsCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = React.useMemo(() => pubkey.toBase58(), [pubkey]);\n  const info = useAccountInfo(address);\n  const account = info?.data;\n  const data = account?.details?.data?.parsed.info;\n\n  const highestEpoch = React.useMemo(() => {\n    if (data.stake && !data.stake.delegation.deactivationEpoch.eq(MAX_EPOCH)) {\n      return data.stake.delegation.deactivationEpoch.toNumber();\n    }\n  }, [data]);\n\n  const rewards = useRewards(address);\n  const fetchRewards = useFetchRewards();\n  const loadMore = () => fetchRewards(pubkey, highestEpoch);\n\n  React.useEffect(() => {\n    if (!rewards) {\n      fetchRewards(pubkey, highestEpoch);\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!rewards) {\n    return null;\n  }\n\n  if (rewards?.data === undefined) {\n    if (rewards.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading rewards\" />;\n    }\n\n    return <ErrorCard retry={loadMore} text=\"Failed to fetch rewards\" />;\n  }\n\n  const rewardsList = rewards.data.rewards.map((reward) => {\n    if (!reward) {\n      return null;\n    }\n\n    return (\n      <tr key={reward.epoch}>\n        <td>\n          <Epoch epoch={reward.epoch} link />\n        </td>\n        <td>\n          <Slot slot={reward.effectiveSlot} link />\n        </td>\n        <td>{lamportsToSolString(reward.amount)}</td>\n        <td>{lamportsToSolString(reward.postBalance)}</td>\n      </tr>\n    );\n  });\n  const rewardsFound = rewardsList.some((r) => r);\n  const { foundOldest, lowestFetchedEpoch, highestFetchedEpoch } = rewards.data;\n  const fetching = rewards.status === FetchStatus.Fetching;\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Rewards</h3>\n            </div>\n          </div>\n        </div>\n\n        {rewardsFound ? (\n          <div className=\"table-responsive mb-0\">\n            <table className=\"table table-sm table-nowrap card-table\">\n              <thead>\n                <tr>\n                  <th className=\"w-1 text-muted\">Epoch</th>\n                  <th className=\"text-muted\">Effective Slot</th>\n                  <th className=\"text-muted\">Reward Amount</th>\n                  <th className=\"text-muted\">Post Balance</th>\n                </tr>\n              </thead>\n              <tbody className=\"list\">{rewardsList}</tbody>\n            </table>\n          </div>\n        ) : (\n          <div className=\"card-body\">\n            No rewards issued between epochs {lowestFetchedEpoch} and{\" \"}\n            {highestFetchedEpoch}\n          </div>\n        )}\n\n        <div className=\"card-footer\">\n          {foundOldest ? (\n            <div className=\"text-muted text-center\">\n              Fetched full reward history\n            </div>\n          ) : (\n            <button\n              className=\"btn btn-primary w-100\"\n              onClick={() => loadMore()}\n              disabled={fetching}\n            >\n              {fetching ? (\n                <>\n                  <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n                  Loading\n                </>\n              ) : (\n                \"Load More\"\n              )}\n            </button>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","import { NFTData } from \"providers/accounts\";\nimport ReactJson from \"react-json-view\";\n\nexport function MetaplexMetadataCard({ nftData }: { nftData: NFTData }) {\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Metaplex Metadata</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"card metadata-json-viewer m-4\">\n          <ReactJson\n            src={nftData.metadata}\n            theme={\"solarized\"}\n            style={{ padding: 25 }}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { Stream, StreamPlayerApi } from \"@cloudflare/stream-react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  programs,\n  MetadataJson,\n  MetaDataJsonCategory,\n  MetadataJsonFile,\n} from \"@metaplex/js\";\nimport ContentLoader from \"react-content-loader\";\nimport ErrorLogo from \"img/logos-solana/dark-solana-logo.svg\";\nimport { getLast } from \"utils\";\n\nconst MAX_TIME_LOADING_IMAGE = 5000; /* 5 seconds */\n\nconst LoadingPlaceholder = () => (\n  <ContentLoader\n    viewBox=\"0 0 212 200\"\n    height={150}\n    width={150}\n    backgroundColor=\"transparent\"\n  >\n    <circle cx=\"86\" cy=\"100\" r=\"8\" />\n    <circle cx=\"106\" cy=\"100\" r=\"8\" />\n    <circle cx=\"126\" cy=\"100\" r=\"8\" />\n  </ContentLoader>\n);\n\nconst ErrorPlaceHolder = () => (\n  <img src={ErrorLogo} width=\"120\" height=\"120\" alt=\"Solana Logo\" />\n);\n\nconst ViewOriginalArtContentLink = ({ src }: { src: string }) => {\n  if (!src) {\n    return null;\n  }\n\n  return (\n    <h6 className={\"header-pretitle d-flex justify-content-center mt-2\"}>\n      <a href={src}>VIEW ORIGINAL</a>\n    </h6>\n  );\n};\n\nconst CachedImageContent = ({ uri }: { uri?: string }) => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [showError, setShowError] = useState<boolean>(false);\n  const [timeout, setTimeout] = useState<NodeJS.Timeout | undefined>(undefined);\n\n  useEffect(() => {\n    // Set the timeout if we don't have a valid uri\n    if (!uri && !timeout) {\n      setTimeout(setInterval(() => setShowError(true), MAX_TIME_LOADING_IMAGE));\n    }\n\n    // We have a uri - clear the timeout\n    if (uri && timeout) {\n      clearInterval(timeout);\n    }\n\n    return () => {\n      if (timeout) {\n        clearInterval(timeout);\n      }\n    };\n  }, [uri, setShowError, timeout, setTimeout]);\n\n  const { cachedBlob } = useCachedImage(uri || \"\");\n\n  return (\n    <>\n      {showError ? (\n        <div className={\"art-error-image-placeholder\"}>\n          <ErrorPlaceHolder />\n          <h6 className={\"header-pretitle mt-2\"}>Error Loading Image</h6>\n        </div>\n      ) : (\n        <>\n          {isLoading && <LoadingPlaceholder />}\n          <div className={`${isLoading ? \"d-none\" : \"d-block\"}`}>\n            <img\n              className={`rounded mx-auto ${isLoading ? \"d-none\" : \"d-block\"}`}\n              src={cachedBlob}\n              alt={\"nft\"}\n              style={{\n                width: 150,\n                maxHeight: 200,\n              }}\n              onLoad={() => {\n                setIsLoading(false);\n              }}\n              onError={() => {\n                setShowError(true);\n              }}\n            />\n            {uri && <ViewOriginalArtContentLink src={uri} />}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nconst VideoArtContent = ({\n  files,\n  uri,\n  animationURL,\n  active,\n}: {\n  files?: (MetadataJsonFile | string)[];\n  uri?: string;\n  animationURL?: string;\n  active?: boolean;\n}) => {\n  const [playerApi, setPlayerApi] = useState<StreamPlayerApi>();\n  const playerRef = useCallback(\n    (ref) => {\n      setPlayerApi(ref);\n    },\n    [setPlayerApi]\n  );\n\n  useEffect(() => {\n    if (playerApi) {\n      playerApi.currentTime = 0;\n    }\n  }, [active, playerApi]);\n\n  const likelyVideo = (files || []).filter((f, index, arr) => {\n    if (typeof f !== \"string\") {\n      return false;\n    }\n\n    // TODO: filter by fileType\n    return arr.length >= 2 ? index === 1 : index === 0;\n  })?.[0] as string;\n\n  const content =\n    likelyVideo &&\n    likelyVideo.startsWith(\"https://watch.videodelivery.net/\") ? (\n      <div className={\"d-block\"}>\n        <Stream\n          // @ts-ignore\n          streamRef={(e: any) => playerRef(e)}\n          src={likelyVideo.replace(\"https://watch.videodelivery.net/\", \"\")}\n          loop={true}\n          height=\"180\"\n          width=\"320\"\n          controls={false}\n          style={{ borderRadius: 12 }}\n          videoDimensions={{\n            videoWidth: 320,\n            videoHeight: 180,\n          }}\n          autoplay={true}\n          muted={true}\n        />\n        <ViewOriginalArtContentLink\n          src={likelyVideo.replace(\"https://watch.videodelivery.net/\", \"\")}\n        />\n      </div>\n    ) : (\n      <div className={\"d-block\"}>\n        <video\n          playsInline={true}\n          autoPlay={true}\n          muted={true}\n          controls={true}\n          controlsList=\"nodownload\"\n          style={{ borderRadius: 12, width: 320, height: 180 }}\n          loop={true}\n          poster={uri}\n        >\n          {likelyVideo && <source src={likelyVideo} type=\"video/mp4\" />}\n          {animationURL && <source src={animationURL} type=\"video/mp4\" />}\n          {files\n            ?.filter((f) => typeof f !== \"string\")\n            .map((f: any, index: number) => (\n              <source key={index} src={f.uri} type={f.type} />\n            ))}\n        </video>\n        {(likelyVideo || animationURL) && (\n          <ViewOriginalArtContentLink src={(likelyVideo || animationURL)!} />\n        )}\n      </div>\n    );\n\n  return content;\n};\n\nconst HTMLContent = ({\n  animationUrl,\n  files,\n}: {\n  animationUrl?: string;\n  files?: (MetadataJsonFile | string)[];\n}) => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [showError, setShowError] = useState<boolean>(false);\n  const htmlURL =\n    files && files.length > 0 && typeof files[0] === \"string\"\n      ? files[0]\n      : animationUrl;\n\n  return (\n    <>\n      {showError ? (\n        <div className={\"art-error-image-placeholder\"}>\n          <ErrorPlaceHolder />\n          <h6 className={\"header-pretitle mt-2\"}>Error Loading Image</h6>\n        </div>\n      ) : (\n        <>\n          {!isLoading && <LoadingPlaceholder />}\n          <div className={`${isLoading ? \"d-block\" : \"d-none\"}`}>\n            <iframe\n              allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n              title={\"html-content\"}\n              sandbox=\"allow-scripts\"\n              frameBorder=\"0\"\n              src={htmlURL}\n              style={{ width: 320, height: 180, borderRadius: 12 }}\n              onLoad={() => {\n                setIsLoading(true);\n              }}\n              onError={() => {\n                setShowError(true);\n              }}\n            ></iframe>\n            {htmlURL && <ViewOriginalArtContentLink src={htmlURL} />}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport const ArtContent = ({\n  metadata,\n  category,\n  active,\n  pubkey,\n  uri,\n  animationURL,\n  files,\n  data,\n}: {\n  metadata: programs.metadata.MetadataData;\n  category?: MetaDataJsonCategory;\n  active?: boolean;\n  pubkey?: PublicKey | string;\n  uri?: string;\n  animationURL?: string;\n  files?: (MetadataJsonFile | string)[];\n  data: MetadataJson | undefined;\n}) => {\n  if (pubkey && data) {\n    uri = data.image;\n    animationURL = data.animation_url;\n  }\n\n  if (pubkey && data?.properties) {\n    files = data.properties.files;\n    category = data.properties.category;\n  }\n\n  animationURL = animationURL || \"\";\n\n  const animationUrlExt = new URLSearchParams(\n    getLast(animationURL.split(\"?\"))\n  ).get(\"ext\");\n\n  const content =\n    category === \"video\" ? (\n      <VideoArtContent\n        files={files}\n        uri={uri}\n        animationURL={animationURL}\n        active={active}\n      />\n    ) : category === \"html\" || animationUrlExt === \"html\" ? (\n      <HTMLContent animationUrl={animationURL} files={files} />\n    ) : (\n      <CachedImageContent uri={uri} />\n    );\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      {content}\n    </div>\n  );\n};\n\nenum ArtFetchStatus {\n  ReadyToFetch,\n  Fetching,\n  FetchFailed,\n  FetchSucceeded,\n}\n\nconst cachedImages = new Map<string, string>();\nexport const useCachedImage = (uri: string) => {\n  const [cachedBlob, setCachedBlob] = useState<string | undefined>(undefined);\n  const [fetchStatus, setFetchStatus] = useState<ArtFetchStatus>(\n    ArtFetchStatus.ReadyToFetch\n  );\n\n  useEffect(() => {\n    if (!uri) {\n      return;\n    }\n\n    if (fetchStatus === ArtFetchStatus.FetchFailed) {\n      setCachedBlob(uri);\n      return;\n    }\n\n    const result = cachedImages.get(uri);\n    if (result) {\n      setCachedBlob(result);\n      return;\n    }\n\n    if (fetchStatus === ArtFetchStatus.ReadyToFetch) {\n      (async () => {\n        setFetchStatus(ArtFetchStatus.Fetching);\n        let response: Response;\n        try {\n          response = await fetch(uri, { cache: \"force-cache\" });\n        } catch {\n          try {\n            response = await fetch(uri, { cache: \"reload\" });\n          } catch {\n            if (uri?.startsWith(\"http\")) {\n              setCachedBlob(uri);\n            }\n            setFetchStatus(ArtFetchStatus.FetchFailed);\n            return;\n          }\n        }\n\n        const blob = await response.blob();\n        const blobURI = URL.createObjectURL(blob);\n        cachedImages.set(uri, blobURI);\n        setCachedBlob(blobURI);\n        setFetchStatus(ArtFetchStatus.FetchSucceeded);\n      })();\n    }\n  }, [uri, setCachedBlob, fetchStatus, setFetchStatus]);\n\n  return { cachedBlob };\n};\n","export default __webpack_public_path__ + \"static/media/dark-solana-logo.fa522d66.svg\";","import \"bootstrap/dist/js/bootstrap.min.js\";\nimport { NFTData } from \"providers/accounts\";\nimport { programs } from \"@metaplex/js\";\nimport { ArtContent } from \"components/common/NFTArt\";\nimport { InfoTooltip } from \"components/common/InfoTooltip\";\nimport { clusterPath } from \"utils/url\";\nimport { Link } from \"react-router-dom\";\nimport { EditionInfo } from \"providers/accounts/utils/getEditionInfo\";\n\nexport function NFTHeader({\n  nftData,\n  address,\n}: {\n  nftData: NFTData;\n  address: string;\n}) {\n  const metadata = nftData.metadata;\n  const data = nftData.json;\n  return (\n    <div className=\"row\">\n      <div className=\"col-auto ms-2 d-flex align-items-center\">\n        <ArtContent metadata={metadata} pubkey={address} data={data} />\n      </div>\n      <div className=\"col mb-3 ms-0.5 mt-3\">\n        {<h6 className=\"header-pretitle ms-1\">Metaplex NFT</h6>}\n        <div className=\"d-flex align-items-center\">\n          <h2 className=\"header-title ms-1 align-items-center no-overflow-with-ellipsis\">\n            {metadata.data.name !== \"\"\n              ? metadata.data.name\n              : \"No NFT name was found\"}\n          </h2>\n          {getEditionPill(nftData.editionInfo)}\n        </div>\n        <h4 className=\"header-pretitle ms-1 mt-1 no-overflow-with-ellipsis\">\n          {metadata.data.symbol !== \"\"\n            ? metadata.data.symbol\n            : \"No Symbol was found\"}\n        </h4>\n        <div className=\"mb-2 mt-2\">\n          {getSaleTypePill(metadata.primarySaleHappened)}\n        </div>\n        <div className=\"mb-3 mt-2\">{getIsMutablePill(metadata.isMutable)}</div>\n        <div className=\"btn-group\">\n          <button\n            className=\"btn btn-dark btn-sm dropdown-toggle creators-dropdown-button-width\"\n            type=\"button\"\n            data-bs-toggle=\"dropdown\"\n            aria-haspopup=\"true\"\n            aria-expanded=\"false\"\n          >\n            Creators\n          </button>\n          <div className=\"dropdown-menu mt-2\">\n            {getCreatorDropdownItems(metadata.data.creators)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\ntype Creator = programs.metadata.Creator;\nfunction getCreatorDropdownItems(creators: Creator[] | null) {\n  const CreatorHeader = () => {\n    const creatorTooltip =\n      \"Verified creators signed the metadata associated with this NFT when it was created.\";\n\n    const shareTooltip =\n      \"The percentage of the proceeds a creator receives when this NFT is sold.\";\n\n    return (\n      <div\n        className={\n          \"d-flex align-items-center dropdown-header creator-dropdown-entry\"\n        }\n      >\n        <div className=\"d-flex font-monospace creator-dropdown-header\">\n          <span>Creator Address</span>\n          <InfoTooltip bottom text={creatorTooltip} />\n        </div>\n        <div className=\"d-flex font-monospace\">\n          <span className=\"font-monospace\">Royalty</span>\n          <InfoTooltip bottom text={shareTooltip} />\n        </div>\n      </div>\n    );\n  };\n\n  const getVerifiedIcon = (isVerified: boolean) => {\n    const className = isVerified ? \"fe fe-check\" : \"fe fe-alert-octagon\";\n    return <i className={`ms-3 ${className}`}></i>;\n  };\n\n  const CreatorEntry = (creator: Creator) => {\n    return (\n      <div\n        className={\n          \"d-flex align-items-center font-monospace creator-dropdown-entry ms-3 me-3\"\n        }\n      >\n        {getVerifiedIcon(creator.verified)}\n        <Link\n          className=\"dropdown-item font-monospace creator-dropdown-entry-address\"\n          to={clusterPath(`/address/${creator.address}`)}\n        >\n          {creator.address}\n        </Link>\n        <div className=\"me-3\"> {`${creator.share}%`}</div>\n      </div>\n    );\n  };\n\n  if (creators && creators.length > 0) {\n    let listOfCreators: JSX.Element[] = [];\n\n    listOfCreators.push(<CreatorHeader key={\"header\"} />);\n    creators.forEach((creator) => {\n      listOfCreators.push(<CreatorEntry key={creator.address} {...creator} />);\n    });\n\n    return listOfCreators;\n  }\n\n  return (\n    <div className={\"dropdown-item font-monospace\"}>\n      <div className=\"me-3\">No creators are associated with this NFT.</div>\n    </div>\n  );\n}\n\nfunction getEditionPill(editionInfo: EditionInfo) {\n  const masterEdition = editionInfo.masterEdition;\n  const edition = editionInfo.edition;\n\n  return (\n    <div className={\"d-inline-flex ms-2\"}>\n      <span className=\"badge badge-pill bg-dark\">{`${\n        edition && masterEdition\n          ? `Edition ${edition.edition.toNumber()} / ${masterEdition.supply.toNumber()}`\n          : masterEdition\n          ? \"Master Edition\"\n          : \"No Master Edition Information\"\n      }`}</span>\n    </div>\n  );\n}\n\nfunction getSaleTypePill(hasPrimarySaleHappened: boolean) {\n  const primaryMarketTooltip =\n    \"Creator(s) split 100% of the proceeds when this NFT is sold.\";\n\n  const secondaryMarketTooltip =\n    \"Creator(s) split the Seller Fee when this NFT is sold. The owner receives the remaining proceeds.\";\n\n  return (\n    <div className={\"d-inline-flex align-items-center\"}>\n      <span className=\"badge badge-pill bg-dark\">{`${\n        hasPrimarySaleHappened ? \"Secondary Market\" : \"Primary Market\"\n      }`}</span>\n      <InfoTooltip\n        bottom\n        text={\n          hasPrimarySaleHappened ? secondaryMarketTooltip : primaryMarketTooltip\n        }\n      />\n    </div>\n  );\n}\n\nfunction getIsMutablePill(isMutable: boolean) {\n  return (\n    <span className=\"badge badge-pill bg-dark\">{`${\n      isMutable ? \"Mutable\" : \"Immutable\"\n    }`}</span>\n  );\n}\n","import { PublicKey, Connection } from \"@solana/web3.js\";\nimport {\n  getHashedName,\n  getNameAccountKey,\n  NameRegistryState,\n  getFilteredProgramAccounts,\n  NAME_PROGRAM_ID,\n} from \"@bonfida/spl-name-service\";\nimport BN from \"bn.js\";\nimport { useState, useEffect } from \"react\";\nimport { Cluster, useCluster } from \"providers/cluster\";\n\n// Name auctionning Program ID\nexport const PROGRAM_ID = new PublicKey(\n  \"jCebN34bUfdeUYJT13J1yG16XWQpt5PDx6Mse9GUqhR\"\n);\n\nexport interface DomainInfo {\n  name: string;\n  address: PublicKey;\n  class: PublicKey;\n}\n\nasync function getDomainKey(\n  name: string,\n  nameClass?: PublicKey,\n  nameParent?: PublicKey\n) {\n  const hashedDomainName = await getHashedName(name);\n  const nameKey = await getNameAccountKey(\n    hashedDomainName,\n    nameClass,\n    nameParent\n  );\n  return nameKey;\n}\n\nexport async function findOwnedNameAccountsForUser(\n  connection: Connection,\n  userAccount: PublicKey\n): Promise<PublicKey[]> {\n  const filters = [\n    {\n      memcmp: {\n        offset: 32,\n        bytes: userAccount.toBase58(),\n      },\n    },\n  ];\n  const accounts = await getFilteredProgramAccounts(\n    connection,\n    NAME_PROGRAM_ID,\n    filters\n  );\n  return accounts.map((a) => a.publicKey);\n}\n\nexport async function performReverseLookup(\n  connection: Connection,\n  nameAccounts: PublicKey[]\n): Promise<DomainInfo[]> {\n  let [centralState] = await PublicKey.findProgramAddress(\n    [PROGRAM_ID.toBuffer()],\n    PROGRAM_ID\n  );\n\n  const reverseLookupAccounts = await Promise.all(\n    nameAccounts.map((name) => getDomainKey(name.toBase58(), centralState))\n  );\n\n  let names = await NameRegistryState.retrieveBatch(\n    connection,\n    reverseLookupAccounts\n  );\n\n  return names\n    .map((name) => {\n      if (!name?.data) {\n        return undefined;\n      }\n      const nameLength = new BN(name!.data.slice(0, 4), \"le\").toNumber();\n      return {\n        name: name.data.slice(4, 4 + nameLength).toString() + \".sol\",\n        address: name.owner,\n        class: name.class,\n      };\n    })\n    .filter((e) => !!e) as DomainInfo[];\n}\n\nexport const useUserDomains = (\n  address: PublicKey\n): [DomainInfo[] | null, boolean] => {\n  const { url, cluster } = useCluster();\n  const [result, setResult] = useState<DomainInfo[] | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const resolve = async () => {\n      // Allow only mainnet and custom\n      if (![Cluster.MainnetBeta, Cluster.Custom].includes(cluster)) return;\n      const connection = new Connection(url, \"confirmed\");\n      try {\n        setLoading(true);\n        const domains = await findOwnedNameAccountsForUser(connection, address);\n        let names = await performReverseLookup(connection, domains);\n        names.sort((a, b) => {\n          return a.name.localeCompare(b.name);\n        });\n        setResult(names);\n      } catch (err) {\n        console.log(`Error fetching user domains ${err}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    resolve();\n  }, [address, url]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return [result, loading];\n};\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useUserDomains, DomainInfo } from \"../../utils/name-service\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Address } from \"components/common/Address\";\n\nexport function DomainsCard({ pubkey }: { pubkey: PublicKey }) {\n  const [domains, domainsLoading] = useUserDomains(pubkey);\n\n  if (domainsLoading && (!domains || domains.length === 0)) {\n    return <LoadingCard message=\"Loading domains\" />;\n  } else if (!domains) {\n    return <ErrorCard text=\"Failed to fetch domains\" />;\n  }\n\n  if (domains.length === 0) {\n    return <ErrorCard text=\"No domain name found\" />;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Domain Names Owned</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Domain name</th>\n              <th className=\"text-muted\">Domain Address</th>\n              <th className=\"text-muted\">Domain Class Address</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {domains.map((domain) => (\n              <RenderDomainRow\n                key={domain.address.toBase58()}\n                domainInfo={domain}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction RenderDomainRow({ domainInfo }: { domainInfo: DomainInfo }) {\n  return (\n    <tr>\n      <td>{domainInfo.name}</td>\n      <td>\n        <Address pubkey={domainInfo.address} link />\n      </td>\n      <td>\n        <Address pubkey={domainInfo.class} link />\n      </td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { CacheEntry, FetchStatus } from \"providers/cache\";\nimport {\n  useFetchAccountInfo,\n  useAccountInfo,\n  Account,\n  ProgramData,\n  TokenProgramData,\n  useMintAccountInfo,\n} from \"providers/accounts\";\nimport { StakeAccountSection } from \"components/account/StakeAccountSection\";\nimport { TokenAccountSection } from \"components/account/TokenAccountSection\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { useCluster, ClusterStatus } from \"providers/cluster\";\nimport { NavLink, Redirect, useLocation } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\nimport { UnknownAccountCard } from \"components/account/UnknownAccountCard\";\nimport { OwnedTokensCard } from \"components/account/OwnedTokensCard\";\nimport { TokenHistoryCard } from \"components/account/TokenHistoryCard\";\nimport { TokenLargestAccountsCard } from \"components/account/TokenLargestAccountsCard\";\nimport { VoteAccountSection } from \"components/account/VoteAccountSection\";\nimport { NonceAccountSection } from \"components/account/NonceAccountSection\";\nimport { VotesCard } from \"components/account/VotesCard\";\nimport { SysvarAccountSection } from \"components/account/SysvarAccountSection\";\nimport { SlotHashesCard } from \"components/account/SlotHashesCard\";\nimport { StakeHistoryCard } from \"components/account/StakeHistoryCard\";\nimport { BlockhashesCard } from \"components/account/BlockhashesCard\";\nimport { ConfigAccountSection } from \"components/account/ConfigAccountSection\";\nimport { useFlaggedAccounts } from \"providers/accounts/flagged-accounts\";\nimport { UpgradeableLoaderAccountSection } from \"components/account/UpgradeableLoaderAccountSection\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { Identicon } from \"components/common/Identicon\";\nimport { TransactionHistoryCard } from \"components/account/history/TransactionHistoryCard\";\nimport { TokenTransfersCard } from \"components/account/history/TokenTransfersCard\";\nimport { TokenInstructionsCard } from \"components/account/history/TokenInstructionsCard\";\nimport { RewardsCard } from \"components/account/RewardsCard\";\nimport { MetaplexMetadataCard } from \"components/account/MetaplexMetadataCard\";\nimport { NFTHeader } from \"components/account/MetaplexNFTHeader\";\nimport { DomainsCard } from \"components/account/DomainsCard\";\nimport isMetaplexNFT from \"providers/accounts/utils/isMetaplexNFT\";\n\nconst IDENTICON_WIDTH = 64;\n\nconst TABS_LOOKUP: { [id: string]: Tab[] } = {\n  \"spl-token:mint\": [\n    {\n      slug: \"transfers\",\n      title: \"Transfers\",\n      path: \"/transfers\",\n    },\n    {\n      slug: \"instructions\",\n      title: \"Instructions\",\n      path: \"/instructions\",\n    },\n    {\n      slug: \"largest\",\n      title: \"Distribution\",\n      path: \"/largest\",\n    },\n  ],\n  \"spl-token:mint:metaplexNFT\": [\n    {\n      slug: \"metadata\",\n      title: \"Metadata\",\n      path: \"/metadata\",\n    },\n  ],\n  stake: [\n    {\n      slug: \"rewards\",\n      title: \"Rewards\",\n      path: \"/rewards\",\n    },\n  ],\n  vote: [\n    {\n      slug: \"vote-history\",\n      title: \"Vote History\",\n      path: \"/vote-history\",\n    },\n    {\n      slug: \"rewards\",\n      title: \"Rewards\",\n      path: \"/rewards\",\n    },\n  ],\n  \"sysvar:recentBlockhashes\": [\n    {\n      slug: \"blockhashes\",\n      title: \"Blockhashes\",\n      path: \"/blockhashes\",\n    },\n  ],\n  \"sysvar:slotHashes\": [\n    {\n      slug: \"slot-hashes\",\n      title: \"Slot Hashes\",\n      path: \"/slot-hashes\",\n    },\n  ],\n  \"sysvar:stakeHistory\": [\n    {\n      slug: \"stake-history\",\n      title: \"Stake History\",\n      path: \"/stake-history\",\n    },\n  ],\n};\n\nconst TOKEN_TABS_HIDDEN = [\n  \"spl-token:mint\",\n  \"config\",\n  \"vote\",\n  \"sysvar\",\n  \"config\",\n];\n\ntype Props = { address: string; tab?: string };\nexport function AccountDetailsPage({ address, tab }: Props) {\n  const fetchAccount = useFetchAccountInfo();\n  const { status } = useCluster();\n  const info = useAccountInfo(address);\n  let pubkey: PublicKey | undefined;\n\n  try {\n    pubkey = new PublicKey(address);\n  } catch (err) {}\n\n  // Fetch account on load\n  React.useEffect(() => {\n    if (!info && status === ClusterStatus.Connected && pubkey) {\n      fetchAccount(pubkey);\n    }\n  }, [address, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <AccountHeader address={address} info={info} />\n        </div>\n      </div>\n      {!pubkey ? (\n        <ErrorCard text={`Address \"${address}\" is not valid`} />\n      ) : (\n        <DetailsSections pubkey={pubkey} tab={tab} info={info} />\n      )}\n    </div>\n  );\n}\n\nexport function AccountHeader({\n  address,\n  info,\n}: {\n  address: string;\n  info?: CacheEntry<Account>;\n}) {\n  const { tokenRegistry } = useTokenRegistry();\n  const tokenDetails = tokenRegistry.get(address);\n  const mintInfo = useMintAccountInfo(address);\n  const account = info?.data;\n  const data = account?.details?.data;\n  const isToken = data?.program === \"spl-token\" && data?.parsed.type === \"mint\";\n\n  if (isMetaplexNFT(data, mintInfo)) {\n    return (\n      <NFTHeader\n        nftData={(data as TokenProgramData).nftData!}\n        address={address}\n      />\n    );\n  }\n\n  if (tokenDetails && isToken) {\n    return (\n      <div className=\"row align-items-end\">\n        <div className=\"col-auto\">\n          <div className=\"avatar avatar-lg header-avatar-top\">\n            {tokenDetails?.logoURI ? (\n              <img\n                src={tokenDetails.logoURI}\n                alt=\"token logo\"\n                className=\"avatar-img rounded-circle border border-4 border-body\"\n              />\n            ) : (\n              <Identicon\n                address={address}\n                className=\"avatar-img rounded-circle border border-body identicon-wrapper\"\n                style={{ width: IDENTICON_WIDTH }}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"col mb-3 ms-n3 ms-md-n2\">\n          <h6 className=\"header-pretitle\">Token</h6>\n          <h2 className=\"header-title\">\n            {tokenDetails?.name || \"Unknown Token\"}\n          </h2>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <h6 className=\"header-pretitle\">Details</h6>\n      <h2 className=\"header-title\">Account</h2>\n    </>\n  );\n}\n\nfunction DetailsSections({\n  pubkey,\n  tab,\n  info,\n}: {\n  pubkey: PublicKey;\n  tab?: string;\n  info?: CacheEntry<Account>;\n}) {\n  const fetchAccount = useFetchAccountInfo();\n  const address = pubkey.toBase58();\n  const location = useLocation();\n  const { flaggedAccounts } = useFlaggedAccounts();\n\n  if (!info || info.status === FetchStatus.Fetching) {\n    return <LoadingCard />;\n  } else if (\n    info.status === FetchStatus.FetchFailed ||\n    info.data?.lamports === undefined\n  ) {\n    return <ErrorCard retry={() => fetchAccount(pubkey)} text=\"Fetch Failed\" />;\n  }\n\n  const account = info.data;\n  const data = account?.details?.data;\n  const tabs = getTabs(data);\n\n  let moreTab: MoreTabs = \"history\";\n  if (tab && tabs.filter(({ slug }) => slug === tab).length === 0) {\n    return <Redirect to={{ ...location, pathname: `/address/${address}` }} />;\n  } else if (tab) {\n    moreTab = tab as MoreTabs;\n  }\n\n  return (\n    <>\n      {flaggedAccounts.has(address) && (\n        <div className=\"alert alert-danger alert-scam\" role=\"alert\">\n          Warning! This account has been flagged by the community as a scam\n          account. Please be cautious sending SOL to this account.\n        </div>\n      )}\n      {<InfoSection account={account} />}\n      {<MoreSection account={account} tab={moreTab} tabs={tabs} />}\n    </>\n  );\n}\n\nfunction InfoSection({ account }: { account: Account }) {\n  const data = account?.details?.data;\n\n  if (data && data.program === \"bpf-upgradeable-loader\") {\n    return (\n      <UpgradeableLoaderAccountSection\n        account={account}\n        parsedData={data.parsed}\n        programData={data.programData}\n      />\n    );\n  } else if (data && data.program === \"stake\") {\n    return (\n      <StakeAccountSection\n        account={account}\n        stakeAccount={data.parsed.info}\n        activation={data.activation}\n        stakeAccountType={data.parsed.type}\n      />\n    );\n  } else if (data && data.program === \"spl-token\") {\n    return <TokenAccountSection account={account} tokenAccount={data.parsed} />;\n  } else if (data && data.program === \"nonce\") {\n    return <NonceAccountSection account={account} nonceAccount={data.parsed} />;\n  } else if (data && data.program === \"vote\") {\n    return <VoteAccountSection account={account} voteAccount={data.parsed} />;\n  } else if (data && data.program === \"sysvar\") {\n    return (\n      <SysvarAccountSection account={account} sysvarAccount={data.parsed} />\n    );\n  } else if (data && data.program === \"config\") {\n    return (\n      <ConfigAccountSection account={account} configAccount={data.parsed} />\n    );\n  } else {\n    return <UnknownAccountCard account={account} />;\n  }\n}\n\ntype Tab = {\n  slug: MoreTabs;\n  title: string;\n  path: string;\n};\n\nexport type MoreTabs =\n  | \"history\"\n  | \"tokens\"\n  | \"largest\"\n  | \"vote-history\"\n  | \"slot-hashes\"\n  | \"stake-history\"\n  | \"blockhashes\"\n  | \"transfers\"\n  | \"instructions\"\n  | \"rewards\"\n  | \"metadata\"\n  | \"domains\";\n\nfunction MoreSection({\n  account,\n  tab,\n  tabs,\n}: {\n  account: Account;\n  tab: MoreTabs;\n  tabs: Tab[];\n}) {\n  const pubkey = account.pubkey;\n  const address = account.pubkey.toBase58();\n  const data = account?.details?.data;\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body pt-0\">\n            <ul className=\"nav nav-tabs nav-overflow header-tabs\">\n              {tabs.map(({ title, slug, path }) => (\n                <li key={slug} className=\"nav-item\">\n                  <NavLink\n                    className=\"nav-link\"\n                    to={clusterPath(`/address/${address}${path}`)}\n                    exact\n                  >\n                    {title}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n      {tab === \"tokens\" && (\n        <>\n          <OwnedTokensCard pubkey={pubkey} />\n          <TokenHistoryCard pubkey={pubkey} />\n        </>\n      )}\n      {tab === \"history\" && <TransactionHistoryCard pubkey={pubkey} />}\n      {tab === \"transfers\" && <TokenTransfersCard pubkey={pubkey} />}\n      {tab === \"instructions\" && <TokenInstructionsCard pubkey={pubkey} />}\n      {tab === \"largest\" && <TokenLargestAccountsCard pubkey={pubkey} />}\n      {tab === \"rewards\" && <RewardsCard pubkey={pubkey} />}\n      {tab === \"vote-history\" && data?.program === \"vote\" && (\n        <VotesCard voteAccount={data.parsed} />\n      )}\n      {tab === \"slot-hashes\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"slotHashes\" && (\n          <SlotHashesCard sysvarAccount={data.parsed} />\n        )}\n      {tab === \"stake-history\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"stakeHistory\" && (\n          <StakeHistoryCard sysvarAccount={data.parsed} />\n        )}\n      {tab === \"blockhashes\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"recentBlockhashes\" && (\n          <BlockhashesCard blockhashes={data.parsed.info} />\n        )}\n      {tab === \"metadata\" && (\n        <MetaplexMetadataCard\n          nftData={(account.details?.data as TokenProgramData).nftData!}\n        />\n      )}\n      {tab === \"domains\" && <DomainsCard pubkey={pubkey} />}\n    </>\n  );\n}\n\nfunction getTabs(data?: ProgramData): Tab[] {\n  const tabs: Tab[] = [\n    {\n      slug: \"history\",\n      title: \"History\",\n      path: \"\",\n    },\n  ];\n\n  let programTypeKey = \"\";\n  if (data && \"parsed\" in data && \"type\" in data.parsed) {\n    programTypeKey = `${data.program}:${data.parsed.type}`;\n  }\n\n  if (data && data.program in TABS_LOOKUP) {\n    tabs.push(...TABS_LOOKUP[data.program]);\n  }\n\n  if (data && programTypeKey in TABS_LOOKUP) {\n    tabs.push(...TABS_LOOKUP[programTypeKey]);\n  }\n\n  // Add the key for Metaplex NFTs\n  if (\n    data &&\n    programTypeKey === \"spl-token:mint\" &&\n    (data as TokenProgramData).nftData\n  ) {\n    tabs.push(...TABS_LOOKUP[`${programTypeKey}:metaplexNFT`]);\n  }\n\n  if (\n    !data ||\n    !(\n      TOKEN_TABS_HIDDEN.includes(data.program) ||\n      TOKEN_TABS_HIDDEN.includes(programTypeKey)\n    )\n  ) {\n    tabs.push({\n      slug: \"tokens\",\n      title: \"Tokens\",\n      path: \"/tokens\",\n    });\n    tabs.push({\n      slug: \"domains\",\n      title: \"Domains\",\n      path: \"/domains\",\n    });\n  }\n\n  return tabs;\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport * as nacl from \"tweetnacl\";\nimport { Message, PublicKey } from \"@solana/web3.js\";\nimport { Signature } from \"components/common/Signature\";\nimport { Address } from \"components/common/Address\";\n\nexport function TransactionSignatures({\n  signatures,\n  message,\n  rawMessage,\n}: {\n  signatures: (string | null)[];\n  message: Message;\n  rawMessage: Uint8Array;\n}) {\n  const signatureRows = React.useMemo(() => {\n    return signatures.map((signature, index) => {\n      const publicKey = message.accountKeys[index];\n\n      let verified;\n      if (signature) {\n        const key = publicKey.toBytes();\n        const rawSignature = bs58.decode(signature);\n        verified = verifySignature({\n          message: rawMessage,\n          signature: rawSignature,\n          key,\n        });\n      }\n\n      const props = {\n        index,\n        signature,\n        signer: publicKey,\n        verified,\n      };\n\n      return <SignatureRow key={publicKey.toBase58()} {...props} />;\n    });\n  }, [signatures, message, rawMessage]);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Signatures</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">#</th>\n              <th className=\"text-muted\">Signature</th>\n              <th className=\"text-muted\">Signer</th>\n              <th className=\"text-muted\">Validity</th>\n              <th className=\"text-muted\">Details</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{signatureRows}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction verifySignature({\n  message,\n  signature,\n  key,\n}: {\n  message: Uint8Array;\n  signature: Uint8Array;\n  key: Uint8Array;\n}): boolean {\n  return nacl.sign.detached.verify(message, signature, key);\n}\n\nfunction SignatureRow({\n  signature,\n  signer,\n  verified,\n  index,\n}: {\n  signature: string | null;\n  signer: PublicKey;\n  verified?: boolean;\n  index: number;\n}) {\n  return (\n    <tr>\n      <td>\n        <span className=\"badge bg-info-soft me-1\">{index + 1}</span>\n      </td>\n      <td>\n        {signature ? (\n          <Signature signature={signature} truncateChars={40} />\n        ) : (\n          \"Missing Signature\"\n        )}\n      </td>\n      <td>\n        <Address pubkey={signer} link />\n      </td>\n      <td>\n        {verified === undefined ? (\n          \"N/A\"\n        ) : verified ? (\n          <span className=\"badge bg-success-soft me-1\">Valid</span>\n        ) : (\n          <span className=\"badge bg-warning-soft me-1\">Invalid</span>\n        )}\n      </td>\n      <td>\n        {index === 0 && (\n          <span className=\"badge bg-info-soft me-1\">Fee Payer</span>\n        )}\n      </td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport {\n  Account,\n  useAccountInfo,\n  useFetchAccountInfo,\n} from \"providers/accounts\";\nimport { ClusterStatus, useCluster } from \"providers/cluster\";\nimport { addressLabel } from \"utils/tx\";\nimport { lamportsToSolString } from \"utils\";\n\ntype AccountValidator = (account: Account) => string | undefined;\n\nexport const createFeePayerValidator = (\n  feeLamports: number\n): AccountValidator => {\n  return (account: Account): string | undefined => {\n    if (account.details === undefined) return \"Account doesn't exist\";\n    if (!account.details.owner.equals(SystemProgram.programId))\n      return \"Only system-owned accounts can pay fees\";\n    // TODO: Actually nonce accounts can pay fees too\n    if (account.details.space > 0)\n      return \"Only unallocated accounts can pay fees\";\n    if (account.lamports < feeLamports) {\n      return \"Insufficient funds for fees\";\n    }\n    return;\n  };\n};\n\nexport const programValidator = (account: Account): string | undefined => {\n  if (account.details === undefined) return \"Account doesn't exist\";\n  if (!account.details.executable)\n    return \"Only executable accounts can be invoked\";\n  return;\n};\n\nexport function AddressWithContext({\n  pubkey,\n  validator,\n}: {\n  pubkey: PublicKey;\n  validator?: AccountValidator;\n}) {\n  return (\n    <div className=\"d-flex align-items-end flex-column\">\n      <Address pubkey={pubkey} link />\n      <AccountInfo pubkey={pubkey} validator={validator} />\n    </div>\n  );\n}\n\nfunction AccountInfo({\n  pubkey,\n  validator,\n}: {\n  pubkey: PublicKey;\n  validator?: AccountValidator;\n}) {\n  const address = pubkey.toBase58();\n  const fetchAccount = useFetchAccountInfo();\n  const info = useAccountInfo(address);\n  const { cluster, status } = useCluster();\n\n  // Fetch account on load\n  React.useEffect(() => {\n    if (!info && status === ClusterStatus.Connected && pubkey) {\n      fetchAccount(pubkey);\n    }\n  }, [address, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!info?.data)\n    return (\n      <span className=\"text-muted\">\n        <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n        Loading\n      </span>\n    );\n\n  const errorMessage = validator && validator(info.data);\n  if (errorMessage) return <span className=\"text-warning\">{errorMessage}</span>;\n\n  if (info.data.details?.executable) {\n    return <span className=\"text-muted\">Executable Program</span>;\n  }\n\n  const owner = info.data.details?.owner;\n  const ownerAddress = owner?.toBase58();\n  const ownerLabel = ownerAddress && addressLabel(ownerAddress, cluster);\n\n  return (\n    <span className=\"text-muted\">\n      {ownerAddress\n        ? `Owned by ${\n            ownerLabel || ownerAddress\n          }. Balance is ${lamportsToSolString(info.data.lamports)} SOL`\n        : \"Account doesn't exist\"}\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Message, PublicKey } from \"@solana/web3.js\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { AddressWithContext } from \"./AddressWithContext\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\n\nexport function AccountsCard({ message }: { message: Message }) {\n  const [expanded, setExpanded] = React.useState(true);\n\n  const { validMessage, error } = React.useMemo(() => {\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = message.header;\n\n    if (numReadonlySignedAccounts >= numRequiredSignatures) {\n      return { validMessage: undefined, error: \"Invalid header\" };\n    } else if (numReadonlyUnsignedAccounts >= message.accountKeys.length) {\n      return { validMessage: undefined, error: \"Invalid header\" };\n    } else if (message.accountKeys.length === 0) {\n      return { validMessage: undefined, error: \"Message has no accounts\" };\n    }\n\n    return {\n      validMessage: message,\n      error: undefined,\n    };\n  }, [message]);\n\n  const accountRows = React.useMemo(() => {\n    const message = validMessage;\n    if (!message) return;\n    return message.accountKeys.map((publicKey, accountIndex) => {\n      const {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      } = message.header;\n\n      let readOnly = false;\n      let signer = false;\n      if (accountIndex < numRequiredSignatures) {\n        signer = true;\n        if (accountIndex >= numRequiredSignatures - numReadonlySignedAccounts) {\n          readOnly = true;\n        }\n      } else if (\n        accountIndex >=\n        message.accountKeys.length - numReadonlyUnsignedAccounts\n      ) {\n        readOnly = true;\n      }\n\n      const props = {\n        accountIndex,\n        publicKey,\n        signer,\n        readOnly,\n      };\n\n      return <AccountRow key={accountIndex} {...props} />;\n    });\n  }, [validMessage]);\n\n  if (error) {\n    return <ErrorCard text={`Unable to display accounts. ${error}`} />;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">\n          {`Account List (${message.accountKeys.length})`}\n        </h3>\n        <button\n          className={`btn btn-sm d-flex ${\n            expanded ? \"btn-black active\" : \"btn-white\"\n          }`}\n          onClick={() => setExpanded((e) => !e)}\n        >\n          {expanded ? \"Collapse\" : \"Expand\"}\n        </button>\n      </div>\n      {expanded && <TableCardBody>{accountRows}</TableCardBody>}\n    </div>\n  );\n}\n\nfunction AccountRow({\n  accountIndex,\n  publicKey,\n  signer,\n  readOnly,\n}: {\n  accountIndex: number;\n  publicKey: PublicKey;\n  signer: boolean;\n  readOnly: boolean;\n}) {\n  return (\n    <tr>\n      <td>\n        <div className=\"d-flex align-items-start flex-column\">\n          Account #{accountIndex + 1}\n          <span className=\"mt-1\">\n            {signer && <span className=\"badge bg-info-soft me-1\">Signer</span>}\n            {!readOnly && (\n              <span className=\"badge bg-danger-soft\">Writable</span>\n            )}\n          </span>\n        </div>\n      </td>\n      <td className=\"text-lg-end\">\n        <AddressWithContext pubkey={publicKey} />\n      </td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport { Message } from \"@solana/web3.js\";\nimport type { TransactionData } from \"./InspectorPage\";\nimport { useQuery } from \"utils/url\";\nimport { useHistory, useLocation } from \"react-router\";\nimport base58 from \"bs58\";\n\nfunction deserializeTransaction(bytes: Uint8Array): {\n  message: Message;\n  signatures: string[];\n} | null {\n  const SIGNATURE_LENGTH = 64;\n  const signatures = [];\n  try {\n    const signaturesLen = bytes[0];\n    bytes = bytes.slice(1);\n    for (let i = 0; i < signaturesLen; i++) {\n      const rawSignature = bytes.slice(0, SIGNATURE_LENGTH);\n      bytes = bytes.slice(SIGNATURE_LENGTH);\n      signatures.push(base58.encode(rawSignature));\n    }\n\n    const requiredSignatures = bytes[0];\n    if (requiredSignatures !== signaturesLen) {\n      throw new Error(\"Signature length mismatch\");\n    }\n  } catch (err) {\n    // Errors above indicate that the bytes do not encode a transaction.\n    return null;\n  }\n\n  const message = Message.from(bytes);\n  return { message, signatures };\n}\n\nexport const MIN_MESSAGE_LENGTH =\n  3 + // header\n  1 + // accounts length\n  32 + // accounts, must have at least one address for fees\n  32 + // recent blockhash\n  1; // instructions length\n\nconst MIN_TRANSACTION_LENGTH =\n  1 + // signatures length\n  64 + // signatures, must have at least one for fees\n  MIN_MESSAGE_LENGTH;\n\nconst MAX_TRANSACTION_SIGNATURES =\n  Math.floor((1232 - MIN_TRANSACTION_LENGTH) / (64 + 32)) + 1;\n\nexport function RawInput({\n  value,\n  setTransactionData,\n}: {\n  value?: string;\n  setTransactionData: (param: TransactionData | undefined) => void;\n}) {\n  const rawTransactionInput = React.useRef<HTMLTextAreaElement>(null);\n  const [error, setError] = React.useState<string>();\n  const [rows, setRows] = React.useState(3);\n  const query = useQuery();\n  const history = useHistory();\n  const location = useLocation();\n\n  const onInput = React.useCallback(() => {\n    const base64 = rawTransactionInput.current?.value;\n    if (base64) {\n      // Clear url params when input is detected\n      if (query.get(\"message\")) {\n        query.delete(\"message\");\n        history.push({ ...location, search: query.toString() });\n      } else if (query.get(\"transaction\")) {\n        query.delete(\"transaction\");\n        history.push({ ...location, search: query.toString() });\n      }\n\n      // Dynamically expand height based on input length\n      setRows(Math.max(3, Math.min(10, Math.round(base64.length / 150))));\n\n      let buffer;\n      try {\n        buffer = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n      } catch (err) {\n        console.error(err);\n        setError(\"Input must be base64 encoded\");\n        return;\n      }\n\n      try {\n        if (buffer.length < MIN_MESSAGE_LENGTH) {\n          throw new Error(\"Input is not long enough to be valid.\");\n        } else if (buffer[0] > MAX_TRANSACTION_SIGNATURES) {\n          throw new Error(`Input starts with invalid byte: \"${buffer[0]}\"`);\n        }\n\n        const tx = deserializeTransaction(buffer);\n        if (tx) {\n          const message = tx.message;\n          const rawMessage = message.serialize();\n          setTransactionData({\n            rawMessage,\n            message,\n            signatures: tx.signatures,\n          });\n        } else {\n          const message = Message.from(buffer);\n          setTransactionData({\n            rawMessage: buffer,\n            message,\n          });\n        }\n\n        setError(undefined);\n        return;\n      } catch (err) {\n        if (err instanceof Error) setError(err.message);\n      }\n    } else {\n      setError(undefined);\n    }\n  }, [setTransactionData, history, query, location]);\n\n  React.useEffect(() => {\n    const input = rawTransactionInput.current;\n    if (input && value) {\n      input.value = value;\n      onInput();\n    }\n  }, [value]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const placeholder = \"Paste raw base64 encoded transaction message\";\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Encoded Transaction Message</h3>\n      </div>\n      <div className=\"card-body\">\n        <textarea\n          rows={rows}\n          onInput={onInput}\n          ref={rawTransactionInput}\n          className=\"form-control form-control-flush form-control-auto font-monospace\"\n          placeholder={placeholder}\n        ></textarea>\n        <div className=\"row align-items-center\">\n          <div className=\"col d-flex align-items-center\">\n            {error && (\n              <>\n                <span className=\"text-warning small me-2\">\n                  <i className=\"fe fe-alert-circle\"></i>\n                </span>\n\n                <span className=\"text-warning\">{error}</span>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"card-footer\">\n        <h3>Instructions</h3>\n        <ul>\n          <li className=\"mb-2\">\n            <strong>CLI: </strong>Use <code>--dump-transaction-message</code>{\" \"}\n            flag\n          </li>\n          <li className=\"mb-2\">\n            <strong>Rust: </strong>Add <code>base64</code> crate dependency and{\" \"}\n            <code>\n              println!(\"{}\", base64::encode(&transaction.message_data()));\n            </code>\n          </li>\n          <li>\n            <strong>JavaScript: </strong>Add{\" \"}\n            <code>console.log(tx.serializeMessage().toString(\"base64\"));</code>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport { CompiledInstruction, Message } from \"@solana/web3.js\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { AddressWithContext, programValidator } from \"./AddressWithContext\";\nimport { useCluster } from \"providers/cluster\";\nimport { programLabel } from \"utils/tx\";\nimport { HexData } from \"components/common/HexData\";\n\nexport function InstructionsSection({ message }: { message: Message }) {\n  return (\n    <>\n      {message.instructions.map((ix, index) => {\n        return <InstructionCard key={index} {...{ message, ix, index }} />;\n      })}\n    </>\n  );\n}\n\nfunction InstructionCard({\n  message,\n  ix,\n  index,\n}: {\n  message: Message;\n  ix: CompiledInstruction;\n  index: number;\n}) {\n  const [expanded, setExpanded] = React.useState(false);\n  const { cluster } = useCluster();\n  const programId = message.accountKeys[ix.programIdIndex];\n  const programName = programLabel(programId.toBase58(), cluster) || \"Unknown\";\n\n  return (\n    <div className=\"card\" id={`instruction-index-${index + 1}`} key={index}>\n      <div className={`card-header${!expanded ? \" border-bottom-none\" : \"\"}`}>\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          <span className={`badge bg-info-soft me-2`}>#{index + 1}</span>\n          {programName} Instruction\n        </h3>\n\n        <button\n          className={`btn btn-sm d-flex ${\n            expanded ? \"btn-black active\" : \"btn-white\"\n          }`}\n          onClick={() => setExpanded((e) => !e)}\n        >\n          {expanded ? \"Collapse\" : \"Expand\"}\n        </button>\n      </div>\n      {expanded && (\n        <TableCardBody>\n          <tr>\n            <td>Program</td>\n            <td className=\"text-lg-end\">\n              <AddressWithContext\n                pubkey={message.accountKeys[ix.programIdIndex]}\n                validator={programValidator}\n              />\n            </td>\n          </tr>\n          {ix.accounts.map((accountIndex, index) => {\n            return (\n              <tr key={index}>\n                <td>\n                  <div className=\"d-flex align-items-start flex-column\">\n                    Account #{index + 1}\n                    <span className=\"mt-1\">\n                      {accountIndex < message.header.numRequiredSignatures && (\n                        <span className=\"badge bg-info-soft me-2\">Signer</span>\n                      )}\n                      {message.isAccountWritable(accountIndex) && (\n                        <span className=\"badge bg-danger-soft me-2\">\n                          Writable\n                        </span>\n                      )}\n                    </span>\n                  </div>\n                </td>\n                <td className=\"text-lg-end\">\n                  <AddressWithContext\n                    pubkey={message.accountKeys[accountIndex]}\n                  />\n                </td>\n              </tr>\n            );\n          })}\n          <tr>\n            <td>\n              Instruction Data <span className=\"text-muted\">(Hex)</span>\n            </td>\n            <td className=\"text-lg-end\">\n              <HexData raw={bs58.decode(ix.data)} />\n            </td>\n          </tr>\n        </TableCardBody>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Message, PACKET_DATA_SIZE } from \"@solana/web3.js\";\n\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { SolBalance } from \"utils\";\nimport { useQuery } from \"utils/url\";\nimport { useHistory, useLocation } from \"react-router\";\nimport {\n  useFetchRawTransaction,\n  useRawTransactionDetails,\n} from \"providers/transactions/raw\";\nimport { FetchStatus } from \"providers/cache\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { TransactionSignatures } from \"./SignaturesCard\";\nimport { AccountsCard } from \"./AccountsCard\";\nimport {\n  AddressWithContext,\n  createFeePayerValidator,\n} from \"./AddressWithContext\";\nimport { SimulatorCard } from \"./SimulatorCard\";\nimport { MIN_MESSAGE_LENGTH, RawInput } from \"./RawInputCard\";\nimport { InstructionsSection } from \"./InstructionsSection\";\nimport base58 from \"bs58\";\n\nexport type TransactionData = {\n  rawMessage: Uint8Array;\n  message: Message;\n  signatures?: (string | null)[];\n};\n\n// Decode a url param and return the result. If decoding fails, return whether\n// the param should be deleted.\nfunction decodeParam(params: URLSearchParams, name: string): string | boolean {\n  const param = params.get(name);\n  if (param === null) return false;\n  try {\n    return decodeURIComponent(param);\n  } catch (err) {\n    return true;\n  }\n}\n\n// Decode a signatures param and throw an error on failure\nfunction decodeSignatures(signaturesParam: string): (string | null)[] {\n  let signatures;\n  try {\n    signatures = JSON.parse(signaturesParam);\n  } catch (err) {\n    throw new Error(\"Signatures param is not valid JSON\");\n  }\n\n  if (!Array.isArray(signatures)) {\n    throw new Error(\"Signatures param is not a JSON array\");\n  }\n\n  const validSignatures: (string | null)[] = [];\n  for (const signature of signatures) {\n    if (signature === null) {\n      validSignatures.push(signature);\n      continue;\n    }\n\n    if (typeof signature !== \"string\") {\n      throw new Error(\"Signature is not a string\");\n    }\n\n    try {\n      base58.decode(signature);\n      validSignatures.push(signature);\n    } catch (err) {\n      throw new Error(\"Signature is not valid base58\");\n    }\n  }\n\n  return validSignatures;\n}\n\n// Decodes url params into transaction data if possible. If decoding fails,\n// URL params are returned as a string that will prefill the transaction\n// message input field for debugging. Returns a tuple of [result, shouldRefreshUrl]\nfunction decodeUrlParams(\n  params: URLSearchParams\n): [TransactionData | string, boolean] {\n  const messageParam = decodeParam(params, \"message\");\n  const signaturesParam = decodeParam(params, \"signatures\");\n\n  let refreshUrl = false;\n  if (signaturesParam === true) {\n    params.delete(\"signatures\");\n    refreshUrl = true;\n  }\n\n  if (typeof messageParam === \"boolean\") {\n    if (messageParam) {\n      params.delete(\"message\");\n      params.delete(\"signatures\");\n      refreshUrl = true;\n    }\n    return [\"\", refreshUrl];\n  }\n\n  let signatures: (string | null)[] | undefined = undefined;\n  if (typeof signaturesParam === \"string\") {\n    try {\n      signatures = decodeSignatures(signaturesParam);\n    } catch (err) {\n      params.delete(\"signatures\");\n      refreshUrl = true;\n    }\n  }\n\n  try {\n    const buffer = Uint8Array.from(atob(messageParam), (c) => c.charCodeAt(0));\n\n    if (buffer.length < MIN_MESSAGE_LENGTH) {\n      throw new Error(\"message buffer is too short\");\n    }\n\n    const message = Message.from(buffer);\n    const data = {\n      message,\n      rawMessage: buffer,\n      signatures,\n    };\n    return [data, refreshUrl];\n  } catch (err) {\n    params.delete(\"message\");\n    refreshUrl = true;\n    return [messageParam, true];\n  }\n}\n\nexport function TransactionInspectorPage({\n  signature,\n}: {\n  signature?: string;\n}) {\n  const [transaction, setTransaction] = React.useState<TransactionData>();\n  const query = useQuery();\n  const history = useHistory();\n  const location = useLocation();\n  const [paramString, setParamString] = React.useState<string>();\n\n  // Sync message with url search params\n  React.useEffect(() => {\n    if (signature) return;\n    if (transaction) {\n      let shouldRefreshUrl = false;\n\n      if (transaction.signatures !== undefined) {\n        const signaturesParam = encodeURIComponent(\n          JSON.stringify(transaction.signatures)\n        );\n        if (query.get(\"signatures\") !== signaturesParam) {\n          shouldRefreshUrl = true;\n          query.set(\"signatures\", signaturesParam);\n        }\n      }\n\n      const base64 = btoa(\n        String.fromCharCode.apply(null, [...transaction.rawMessage])\n      );\n      const newParam = encodeURIComponent(base64);\n      if (query.get(\"message\") !== newParam) {\n        shouldRefreshUrl = true;\n        query.set(\"message\", newParam);\n      }\n\n      if (shouldRefreshUrl) {\n        history.push({ ...location, search: query.toString() });\n      }\n    }\n  }, [query, transaction, signature, history, location]);\n\n  const reset = React.useCallback(() => {\n    query.delete(\"message\");\n    history.push({ ...location, search: query.toString() });\n    setTransaction(undefined);\n  }, [query, location, history]);\n\n  // Decode the message url param whenever it changes\n  React.useEffect(() => {\n    if (transaction || signature) return;\n\n    const [result, refreshUrl] = decodeUrlParams(query);\n    if (refreshUrl) {\n      history.push({ ...location, search: query.toString() });\n    }\n\n    if (typeof result === \"string\") {\n      setParamString(result);\n    } else {\n      setTransaction(result);\n    }\n  }, [query, transaction, signature, history, location]);\n\n  return (\n    <div className=\"container mt-4\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h2 className=\"header-title\">Transaction Inspector</h2>\n        </div>\n      </div>\n      {signature ? (\n        <PermalinkView signature={signature} reset={reset} />\n      ) : transaction ? (\n        <LoadedView transaction={transaction} onClear={reset} />\n      ) : (\n        <RawInput value={paramString} setTransactionData={setTransaction} />\n      )}\n    </div>\n  );\n}\n\nfunction PermalinkView({\n  signature,\n}: {\n  signature: string;\n  reset: () => void;\n}) {\n  const details = useRawTransactionDetails(signature);\n  const fetchTransaction = useFetchRawTransaction();\n  const refreshTransaction = () => fetchTransaction(signature);\n  const history = useHistory();\n  const location = useLocation();\n  const transaction = details?.data?.raw;\n  const reset = React.useCallback(() => {\n    history.push({ ...location, pathname: \"/tx/inspector\" });\n  }, [history, location]);\n\n  // Fetch details on load\n  React.useEffect(() => {\n    if (!details) fetchTransaction(signature);\n  }, [signature, details, fetchTransaction]);\n\n  if (!details || details.status === FetchStatus.Fetching) {\n    return <LoadingCard />;\n  } else if (details.status === FetchStatus.FetchFailed) {\n    return (\n      <ErrorCard\n        retry={refreshTransaction}\n        text=\"Failed to fetch transaction\"\n      />\n    );\n  } else if (!transaction) {\n    return (\n      <ErrorCard\n        text=\"Transaction was not found\"\n        retry={reset}\n        retryText=\"Reset\"\n      />\n    );\n  }\n\n  const { message, signatures } = transaction;\n  const tx = { message, rawMessage: message.serialize(), signatures };\n\n  return <LoadedView transaction={tx} onClear={reset} />;\n}\n\nfunction LoadedView({\n  transaction,\n  onClear,\n}: {\n  transaction: TransactionData;\n  onClear: () => void;\n}) {\n  const { message, rawMessage, signatures } = transaction;\n\n  return (\n    <>\n      <OverviewCard message={message} raw={rawMessage} onClear={onClear} />\n      <SimulatorCard message={message} />\n      {signatures && (\n        <TransactionSignatures\n          message={message}\n          signatures={signatures}\n          rawMessage={rawMessage}\n        />\n      )}\n      <AccountsCard message={message} />\n      <InstructionsSection message={message} />\n    </>\n  );\n}\n\nconst DEFAULT_FEES = {\n  lamportsPerSignature: 5000,\n};\n\nfunction OverviewCard({\n  message,\n  raw,\n  onClear,\n}: {\n  message: Message;\n  raw: Uint8Array;\n  onClear: () => void;\n}) {\n  const fee =\n    message.header.numRequiredSignatures * DEFAULT_FEES.lamportsPerSignature;\n  const feePayerValidator = createFeePayerValidator(fee);\n\n  const size = React.useMemo(() => {\n    const sigBytes = 1 + 64 * message.header.numRequiredSignatures;\n    return sigBytes + raw.length;\n  }, [message, raw]);\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title\">Transaction Overview</h3>\n          <button className=\"btn btn-sm d-flex btn-white\" onClick={onClear}>\n            Clear\n          </button>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td>Serialized Size</td>\n            <td className=\"text-lg-end\">\n              <div className=\"d-flex align-items-end flex-column\">\n                {size} bytes\n                <span\n                  className={\n                    size <= PACKET_DATA_SIZE ? \"text-muted\" : \"text-warning\"\n                  }\n                >\n                  Max transaction size is {PACKET_DATA_SIZE} bytes\n                </span>\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td>Fees</td>\n            <td className=\"text-lg-end\">\n              <div className=\"d-flex align-items-end flex-column\">\n                <SolBalance lamports={fee} />\n                <span className=\"text-muted\">\n                  {`Each signature costs ${DEFAULT_FEES.lamportsPerSignature} lamports`}\n                </span>\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <div className=\"d-flex align-items-start flex-column\">\n                Fee payer\n                <span className=\"mt-1\">\n                  <span className=\"badge bg-info-soft me-2\">Signer</span>\n                  <span className=\"badge bg-danger-soft me-2\">Writable</span>\n                </span>\n              </div>\n            </td>\n            <td className=\"text-end\">\n              {message.accountKeys.length === 0 ? (\n                \"No Fee Payer\"\n              ) : (\n                <AddressWithContext\n                  pubkey={message.accountKeys[0]}\n                  validator={feePayerValidator}\n                />\n              )}\n            </td>\n          </tr>\n        </TableCardBody>\n      </div>\n    </>\n  );\n}\n","import { EpochInfo, PerfSample } from \"@solana/web3.js\";\nimport { ClusterStatsStatus } from \"./solanaClusterStats\";\n\nexport type DashboardInfo = {\n  status: ClusterStatsStatus;\n  avgSlotTime_1h: number;\n  avgSlotTime_1min: number;\n  epochInfo: EpochInfo;\n  blockTime?: number;\n  lastBlockTime?: BlockTimeInfo;\n};\n\nexport type BlockTimeInfo = {\n  blockTime: number;\n  slot: number;\n};\n\nexport enum DashboardInfoActionType {\n  SetPerfSamples,\n  SetEpochInfo,\n  SetLastBlockTime,\n  SetError,\n  Reset,\n}\n\nexport type DashboardInfoActionSetPerfSamples = {\n  type: DashboardInfoActionType.SetPerfSamples;\n  data: PerfSample[];\n};\n\nexport type DashboardInfoActionSetEpochInfo = {\n  type: DashboardInfoActionType.SetEpochInfo;\n  data: EpochInfo;\n};\n\nexport type DashboardInfoActionReset = {\n  type: DashboardInfoActionType.Reset;\n  data: DashboardInfo;\n};\n\nexport type DashboardInfoActionSetError = {\n  type: DashboardInfoActionType.SetError;\n  data: string;\n};\n\nexport type DashboardInfoActionSetLastBlockTime = {\n  type: DashboardInfoActionType.SetLastBlockTime;\n  data: BlockTimeInfo;\n};\n\nexport type DashboardInfoAction =\n  | DashboardInfoActionSetPerfSamples\n  | DashboardInfoActionSetEpochInfo\n  | DashboardInfoActionReset\n  | DashboardInfoActionSetError\n  | DashboardInfoActionSetLastBlockTime;\n\nexport function dashboardInfoReducer(\n  state: DashboardInfo,\n  action: DashboardInfoAction\n) {\n  switch (action.type) {\n    case DashboardInfoActionType.SetLastBlockTime: {\n      const blockTime = state.blockTime || action.data.blockTime;\n      return {\n        ...state,\n        lastBlockTime: action.data,\n        blockTime,\n      };\n    }\n\n    case DashboardInfoActionType.SetPerfSamples: {\n      if (action.data.length < 1) {\n        return state;\n      }\n\n      const samples = action.data\n        .filter((sample) => {\n          return sample.numSlots !== 0;\n        })\n        .map((sample) => {\n          return sample.samplePeriodSecs / sample.numSlots;\n        })\n        .slice(0, 60);\n\n      const samplesInHour = samples.length < 60 ? samples.length : 60;\n      const avgSlotTime_1h =\n        samples.reduce((sum: number, cur: number) => {\n          return sum + cur;\n        }, 0) / samplesInHour;\n\n      const status =\n        state.epochInfo.absoluteSlot !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        avgSlotTime_1h,\n        avgSlotTime_1min: samples[0],\n        status,\n      };\n    }\n\n    case DashboardInfoActionType.SetEpochInfo: {\n      const status =\n        state.avgSlotTime_1h !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      let blockTime = state.blockTime;\n\n      // interpolate blocktime based on last known blocktime and average slot time\n      if (\n        state.lastBlockTime &&\n        state.avgSlotTime_1h !== 0 &&\n        action.data.absoluteSlot >= state.lastBlockTime.slot\n      ) {\n        blockTime =\n          state.lastBlockTime.blockTime +\n          (action.data.absoluteSlot - state.lastBlockTime.slot) *\n            Math.floor(state.avgSlotTime_1h * 1000);\n      }\n\n      return {\n        ...state,\n        epochInfo: action.data,\n        status,\n        blockTime,\n      };\n    }\n\n    case DashboardInfoActionType.SetError:\n      return {\n        ...state,\n        status: ClusterStatsStatus.Error,\n      };\n\n    case DashboardInfoActionType.Reset:\n      return {\n        ...action.data,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { PerfSample } from \"@solana/web3.js\";\nimport { ClusterStatsStatus } from \"./solanaClusterStats\";\n\nexport type PerformanceInfo = {\n  status: ClusterStatsStatus;\n  avgTps: number;\n  historyMaxTps: number;\n  perfHistory: {\n    short: (number | null)[];\n    medium: (number | null)[];\n    long: (number | null)[];\n  };\n  transactionCount: number;\n};\n\nexport enum PerformanceInfoActionType {\n  SetTransactionCount,\n  SetPerfSamples,\n  SetError,\n  Reset,\n}\n\nexport type PerformanceInfoActionSetTransactionCount = {\n  type: PerformanceInfoActionType.SetTransactionCount;\n  data: number;\n};\n\nexport type PerformanceInfoActionSetPerfSamples = {\n  type: PerformanceInfoActionType.SetPerfSamples;\n  data: PerfSample[];\n};\n\nexport type PerformanceInfoActionSetError = {\n  type: PerformanceInfoActionType.SetError;\n  data: string;\n};\n\nexport type PerformanceInfoActionReset = {\n  type: PerformanceInfoActionType.Reset;\n  data: PerformanceInfo;\n};\n\nexport type PerformanceInfoAction =\n  | PerformanceInfoActionSetTransactionCount\n  | PerformanceInfoActionSetPerfSamples\n  | PerformanceInfoActionSetError\n  | PerformanceInfoActionReset;\n\nexport function performanceInfoReducer(\n  state: PerformanceInfo,\n  action: PerformanceInfoAction\n) {\n  switch (action.type) {\n    case PerformanceInfoActionType.SetPerfSamples: {\n      if (action.data.length < 1) {\n        return state;\n      }\n\n      let short = action.data\n        .filter((sample) => {\n          return sample.numTransactions !== 0;\n        })\n        .map((sample) => {\n          return sample.numTransactions / sample.samplePeriodSecs;\n        });\n\n      const avgTps = short[0];\n      const medium = downsampleByFactor(short, 4);\n      const long = downsampleByFactor(medium, 3);\n\n      const perfHistory = {\n        short: round(short.slice(0, 30)).reverse(),\n        medium: round(medium.slice(0, 30)).reverse(),\n        long: round(long.slice(0, 30)).reverse(),\n      };\n\n      const historyMaxTps = Math.max(\n        Math.max(...perfHistory.short),\n        Math.max(...perfHistory.medium),\n        Math.max(...perfHistory.long)\n      );\n\n      const status =\n        state.transactionCount !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        historyMaxTps,\n        avgTps,\n        perfHistory,\n        status,\n      };\n    }\n\n    case PerformanceInfoActionType.SetTransactionCount: {\n      const status =\n        state.avgTps !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        transactionCount: action.data,\n        status,\n      };\n    }\n\n    case PerformanceInfoActionType.SetError:\n      return {\n        ...state,\n        status: ClusterStatsStatus.Error,\n      };\n\n    case PerformanceInfoActionType.Reset:\n      return {\n        ...action.data,\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction downsampleByFactor(series: number[], factor: number) {\n  return series.reduce((result: number[], num: number, i: number) => {\n    const downsampledIndex = Math.floor(i / factor);\n    if (result.length < downsampledIndex + 1) {\n      result.push(0);\n    }\n    const mean = result[downsampledIndex];\n    const differential = (num - mean) / ((i % factor) + 1);\n    result[downsampledIndex] = mean + differential;\n    return result;\n  }, []);\n}\n\nfunction round(series: number[]) {\n  return series.map((n) => Math.round(n));\n}\n","import React from \"react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport {\n  DashboardInfo,\n  DashboardInfoActionType,\n  dashboardInfoReducer,\n} from \"./solanaDashboardInfo\";\nimport {\n  PerformanceInfo,\n  PerformanceInfoActionType,\n  performanceInfoReducer,\n} from \"./solanaPerformanceInfo\";\nimport { reportError } from \"utils/sentry\";\n\nexport const PERF_UPDATE_SEC = 5;\nexport const SAMPLE_HISTORY_HOURS = 6;\nexport const PERFORMANCE_SAMPLE_INTERVAL = 60000;\nexport const TRANSACTION_COUNT_INTERVAL = 5000;\nexport const EPOCH_INFO_INTERVAL = 2000;\nexport const BLOCK_TIME_INTERVAL = 5000;\nexport const LOADING_TIMEOUT = 10000;\n\nexport enum ClusterStatsStatus {\n  Loading,\n  Ready,\n  Error,\n}\n\nconst initialPerformanceInfo: PerformanceInfo = {\n  status: ClusterStatsStatus.Loading,\n  avgTps: 0,\n  historyMaxTps: 0,\n  perfHistory: {\n    short: [],\n    medium: [],\n    long: [],\n  },\n  transactionCount: 0,\n};\n\nconst initialDashboardInfo: DashboardInfo = {\n  status: ClusterStatsStatus.Loading,\n  avgSlotTime_1h: 0,\n  avgSlotTime_1min: 0,\n  epochInfo: {\n    absoluteSlot: 0,\n    blockHeight: 0,\n    epoch: 0,\n    slotIndex: 0,\n    slotsInEpoch: 0,\n  },\n};\n\ntype SetActive = React.Dispatch<React.SetStateAction<boolean>>;\nconst StatsProviderContext = React.createContext<\n  | {\n      setActive: SetActive;\n      setTimedOut: Function;\n      retry: Function;\n      active: boolean;\n    }\n  | undefined\n>(undefined);\n\ntype DashboardState = { info: DashboardInfo };\nconst DashboardContext = React.createContext<DashboardState | undefined>(\n  undefined\n);\n\ntype PerformanceState = { info: PerformanceInfo };\nconst PerformanceContext = React.createContext<PerformanceState | undefined>(\n  undefined\n);\n\ntype Props = { children: React.ReactNode };\n\nfunction getConnection(url: string): Connection | undefined {\n  try {\n    return new Connection(url);\n  } catch (error) {}\n}\n\nexport function SolanaClusterStatsProvider({ children }: Props) {\n  const { cluster, url } = useCluster();\n  const [active, setActive] = React.useState(false);\n  const [dashboardInfo, dispatchDashboardInfo] = React.useReducer(\n    dashboardInfoReducer,\n    initialDashboardInfo\n  );\n  const [performanceInfo, dispatchPerformanceInfo] = React.useReducer(\n    performanceInfoReducer,\n    initialPerformanceInfo\n  );\n\n  React.useEffect(() => {\n    if (!active || !url) return;\n\n    const connection = getConnection(url);\n\n    if (!connection) return;\n\n    let lastSlot: number | null = null;\n\n    const getPerformanceSamples = async () => {\n      try {\n        const samples = await connection.getRecentPerformanceSamples(\n          60 * SAMPLE_HISTORY_HOURS\n        );\n\n        if (samples.length < 1) {\n          // no samples to work with (node has no history).\n          return; // we will allow for a timeout instead of throwing an error\n        }\n\n        dispatchPerformanceInfo({\n          type: PerformanceInfoActionType.SetPerfSamples,\n          data: samples,\n        });\n\n        dispatchDashboardInfo({\n          type: DashboardInfoActionType.SetPerfSamples,\n          data: samples,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        if (error instanceof Error) {\n          dispatchPerformanceInfo({\n            type: PerformanceInfoActionType.SetError,\n            data: error.toString(),\n          });\n          dispatchDashboardInfo({\n            type: DashboardInfoActionType.SetError,\n            data: error.toString(),\n          });\n        }\n        setActive(false);\n      }\n    };\n\n    const getTransactionCount = async () => {\n      try {\n        const transactionCount = await connection.getTransactionCount();\n        dispatchPerformanceInfo({\n          type: PerformanceInfoActionType.SetTransactionCount,\n          data: transactionCount,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        if (error instanceof Error) {\n          dispatchPerformanceInfo({\n            type: PerformanceInfoActionType.SetError,\n            data: error.toString(),\n          });\n        }\n        setActive(false);\n      }\n    };\n\n    const getEpochInfo = async () => {\n      try {\n        const epochInfo = await connection.getEpochInfo();\n        lastSlot = epochInfo.absoluteSlot;\n        dispatchDashboardInfo({\n          type: DashboardInfoActionType.SetEpochInfo,\n          data: epochInfo,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        if (error instanceof Error) {\n          dispatchDashboardInfo({\n            type: DashboardInfoActionType.SetError,\n            data: error.toString(),\n          });\n        }\n        setActive(false);\n      }\n    };\n\n    const getBlockTime = async () => {\n      if (lastSlot) {\n        try {\n          const blockTime = await connection.getBlockTime(lastSlot);\n          if (blockTime !== null) {\n            dispatchDashboardInfo({\n              type: DashboardInfoActionType.SetLastBlockTime,\n              data: {\n                slot: lastSlot,\n                blockTime: blockTime * 1000,\n              },\n            });\n          }\n        } catch (error) {\n          // let this fail gracefully\n        }\n      }\n    };\n\n    const performanceInterval = setInterval(\n      getPerformanceSamples,\n      PERFORMANCE_SAMPLE_INTERVAL\n    );\n    const transactionCountInterval = setInterval(\n      getTransactionCount,\n      TRANSACTION_COUNT_INTERVAL\n    );\n    const epochInfoInterval = setInterval(getEpochInfo, EPOCH_INFO_INTERVAL);\n    const blockTimeInterval = setInterval(getBlockTime, BLOCK_TIME_INTERVAL);\n\n    getPerformanceSamples();\n    getTransactionCount();\n    (async () => {\n      await getEpochInfo();\n      await getBlockTime();\n    })();\n\n    return () => {\n      clearInterval(performanceInterval);\n      clearInterval(transactionCountInterval);\n      clearInterval(epochInfoInterval);\n      clearInterval(blockTimeInterval);\n    };\n  }, [active, cluster, url]);\n\n  // Reset when cluster changes\n  React.useEffect(() => {\n    return () => {\n      resetData();\n    };\n  }, [url]);\n\n  function resetData() {\n    dispatchDashboardInfo({\n      type: DashboardInfoActionType.Reset,\n      data: initialDashboardInfo,\n    });\n    dispatchPerformanceInfo({\n      type: PerformanceInfoActionType.Reset,\n      data: initialPerformanceInfo,\n    });\n  }\n\n  const setTimedOut = React.useCallback(() => {\n    dispatchDashboardInfo({\n      type: DashboardInfoActionType.SetError,\n      data: \"Cluster stats timed out\",\n    });\n    dispatchPerformanceInfo({\n      type: PerformanceInfoActionType.SetError,\n      data: \"Cluster stats timed out\",\n    });\n    console.error(\"Cluster stats timed out\");\n    setActive(false);\n  }, []);\n\n  const retry = React.useCallback(() => {\n    resetData();\n    setActive(true);\n  }, []);\n\n  return (\n    <StatsProviderContext.Provider\n      value={{ setActive, setTimedOut, retry, active }}\n    >\n      <DashboardContext.Provider value={{ info: dashboardInfo }}>\n        <PerformanceContext.Provider value={{ info: performanceInfo }}>\n          {children}\n        </PerformanceContext.Provider>\n      </DashboardContext.Provider>\n    </StatsProviderContext.Provider>\n  );\n}\n\nexport function useStatsProvider() {\n  const context = React.useContext(StatsProviderContext);\n  if (!context) {\n    throw new Error(`useContext must be used within a StatsProvider`);\n  }\n  return context;\n}\n\nexport function useDashboardInfo() {\n  const context = React.useContext(DashboardContext);\n  if (!context) {\n    throw new Error(`useDashboardInfo must be used within a StatsProvider`);\n  }\n  return context.info;\n}\n\nexport function usePerformanceInfo() {\n  const context = React.useContext(PerformanceContext);\n  if (!context) {\n    throw new Error(`usePerformanceInfo must be used within a StatsProvider`);\n  }\n  return context.info;\n}\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport CountUp from \"react-countup\";\nimport {\n  usePerformanceInfo,\n  PERF_UPDATE_SEC,\n  ClusterStatsStatus,\n} from \"providers/stats/solanaClusterStats\";\nimport classNames from \"classnames\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { ChartOptions, ChartTooltipModel } from \"chart.js\";\nimport { PerformanceInfo } from \"providers/stats/solanaPerformanceInfo\";\nimport { StatsNotReady } from \"pages/ClusterStatsPage\";\n\nexport function TpsCard() {\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h4 className=\"card-header-title\">Live Transaction Stats</h4>\n      </div>\n      <TpsCardBody />\n    </div>\n  );\n}\n\nfunction TpsCardBody() {\n  const performanceInfo = usePerformanceInfo();\n\n  if (performanceInfo.status !== ClusterStatsStatus.Ready) {\n    return (\n      <StatsNotReady\n        error={performanceInfo.status === ClusterStatsStatus.Error}\n      />\n    );\n  }\n\n  return <TpsBarChart performanceInfo={performanceInfo} />;\n}\n\ntype Series = \"short\" | \"medium\" | \"long\";\nconst SERIES: Series[] = [\"short\", \"medium\", \"long\"];\nconst SERIES_INFO = {\n  short: {\n    label: (index: number) => index,\n    interval: \"30m\",\n  },\n  medium: {\n    label: (index: number) => index * 4,\n    interval: \"2h\",\n  },\n  long: {\n    label: (index: number) => index * 12,\n    interval: \"6h\",\n  },\n};\n\nconst CUSTOM_TOOLTIP = function (this: any, tooltipModel: ChartTooltipModel) {\n  // Tooltip Element\n  let tooltipEl = document.getElementById(\"chartjs-tooltip\");\n\n  // Create element on first render\n  if (!tooltipEl) {\n    tooltipEl = document.createElement(\"div\");\n    tooltipEl.id = \"chartjs-tooltip\";\n    tooltipEl.innerHTML = `<div class=\"content\"></div>`;\n    document.body.appendChild(tooltipEl);\n  }\n\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltipEl.style.opacity = \"0\";\n    return;\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const { label, value } = tooltipModel.dataPoints[0];\n    const tooltipContent = tooltipEl.querySelector(\"div\");\n    if (tooltipContent) {\n      let innerHtml = `<div class=\"value\">${value} TPS</div>`;\n      innerHtml += `<div class=\"label\">${label}</div>`;\n      tooltipContent.innerHTML = innerHtml;\n    }\n  }\n\n  // Enable tooltip and set position\n  const canvas: Element = this._chart.canvas;\n  const position = canvas.getBoundingClientRect();\n  tooltipEl.style.opacity = \"1\";\n  tooltipEl.style.left =\n    position.left + window.pageXOffset + tooltipModel.caretX + \"px\";\n  tooltipEl.style.top =\n    position.top + window.pageYOffset + tooltipModel.caretY + \"px\";\n};\n\nconst CHART_OPTIONS = (historyMaxTps: number): ChartOptions => {\n  return {\n    tooltips: {\n      intersect: false, // Show tooltip when cursor in between bars\n      enabled: false, // Hide default tooltip\n      custom: CUSTOM_TOOLTIP,\n    },\n    legend: {\n      display: false,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            display: false,\n          },\n          gridLines: {\n            display: false,\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            stepSize: 100,\n            fontSize: 10,\n            fontColor: \"#EEE\",\n            beginAtZero: true,\n            display: true,\n            suggestedMax: historyMaxTps,\n          },\n          gridLines: {\n            display: false,\n          },\n        },\n      ],\n    },\n    animation: {\n      duration: 0, // general animation time\n    },\n    hover: {\n      animationDuration: 0, // duration of animations when hovering an item\n    },\n    responsiveAnimationDuration: 0, // animation duration after a resize\n  };\n};\n\ntype TpsBarChartProps = { performanceInfo: PerformanceInfo };\nfunction TpsBarChart({ performanceInfo }: TpsBarChartProps) {\n  const { perfHistory, avgTps, historyMaxTps } = performanceInfo;\n  const [series, setSeries] = React.useState<Series>(\"short\");\n  const averageTps = Math.round(avgTps).toLocaleString(\"en-US\");\n  const transactionCount = <AnimatedTransactionCount info={performanceInfo} />;\n  const seriesData = perfHistory[series];\n  const chartOptions = React.useMemo(\n    () => CHART_OPTIONS(historyMaxTps),\n    [historyMaxTps]\n  );\n\n  const seriesLength = seriesData.length;\n  const chartData: Chart.ChartData = {\n    labels: seriesData.map((val, i) => {\n      return `${SERIES_INFO[series].label(seriesLength - i)}min ago`;\n    }),\n    datasets: [\n      {\n        backgroundColor: \"#00D192\",\n        hoverBackgroundColor: \"#00D192\",\n        borderWidth: 0,\n        data: seriesData.map((val) => val || 0),\n      },\n    ],\n  };\n\n  return (\n    <>\n      <TableCardBody>\n        <tr>\n          <td className=\"w-100\">Transaction count</td>\n          <td className=\"text-lg-end font-monospace\">{transactionCount} </td>\n        </tr>\n        <tr>\n          <td className=\"w-100\">Transactions per second (TPS)</td>\n          <td className=\"text-lg-end font-monospace\">{averageTps} </td>\n        </tr>\n      </TableCardBody>\n\n      <hr className=\"my-0\" />\n\n      <div className=\"card-body py-3\">\n        <div className=\"align-box-row align-items-start justify-content-between\">\n          <div className=\"d-flex justify-content-between w-100\">\n            <span className=\"mb-0 font-size-sm\">TPS history</span>\n\n            <div className=\"font-size-sm\">\n              {SERIES.map((key) => (\n                <button\n                  key={key}\n                  onClick={() => setSeries(key)}\n                  className={classNames(\"btn btn-sm btn-white ms-2\", {\n                    active: series === key,\n                  })}\n                >\n                  {SERIES_INFO[key].interval}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div\n            id=\"perf-history\"\n            className=\"mt-3 d-flex justify-content-end flex-row w-100\"\n          >\n            <div className=\"w-100\">\n              <Bar data={chartData} options={chartOptions} height={80} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction AnimatedTransactionCount({ info }: { info: PerformanceInfo }) {\n  const txCountRef = React.useRef(0);\n  const countUpRef = React.useRef({ start: 0, period: 0, lastUpdate: 0 });\n  const countUp = countUpRef.current;\n\n  const { transactionCount: txCount, avgTps } = info;\n\n  // Track last tx count to reset count up options\n  if (txCount !== txCountRef.current) {\n    if (countUp.lastUpdate > 0) {\n      // Since we overshoot below, calculate the elapsed value\n      // and start from there.\n      const elapsed = Date.now() - countUp.lastUpdate;\n      const elapsedPeriods = elapsed / (PERF_UPDATE_SEC * 1000);\n      countUp.start = Math.floor(\n        countUp.start + elapsedPeriods * countUp.period\n      );\n\n      // if counter gets ahead of actual count, just hold for a bit\n      // until txCount catches up (this will sometimes happen when a tab is\n      // sent to the background and/or connection drops)\n      countUp.period = Math.max(txCount - countUp.start, 1);\n    } else {\n      // Since this is the first tx count value, estimate the previous\n      // tx count in order to have a starting point for our animation\n      countUp.period = PERF_UPDATE_SEC * avgTps;\n      countUp.start = txCount - countUp.period;\n    }\n    countUp.lastUpdate = Date.now();\n    txCountRef.current = txCount;\n  }\n\n  // Overshoot the target tx count in case the next update is delayed\n  const COUNT_PERIODS = 3;\n  const countUpEnd = countUp.start + COUNT_PERIODS * countUp.period;\n  return (\n    <CountUp\n      start={countUp.start}\n      end={countUpEnd}\n      duration={PERF_UPDATE_SEC * COUNT_PERIODS}\n      delay={0}\n      useEasing={false}\n      preserveValue={true}\n      separator=\",\"\n    />\n  );\n}\n","import React from \"react\";\n\nimport { Supply, Connection } from \"@solana/web3.js\";\nimport { useCluster, ClusterStatus, Cluster } from \"./cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport enum Status {\n  Idle,\n  Disconnected,\n  Connecting,\n}\n\ntype State = Supply | Status | string;\n\ntype Dispatch = React.Dispatch<React.SetStateAction<State>>;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function SupplyProvider({ children }: Props) {\n  const [state, setState] = React.useState<State>(Status.Idle);\n  const { status: clusterStatus, cluster, url } = useCluster();\n\n  React.useEffect(() => {\n    if (state !== Status.Idle) {\n      if (clusterStatus === ClusterStatus.Connecting)\n        setState(Status.Disconnected);\n      if (clusterStatus === ClusterStatus.Connected)\n        fetch(setState, cluster, url);\n    }\n  }, [clusterStatus, cluster, url]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={setState}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetch(dispatch: Dispatch, cluster: Cluster, url: string) {\n  dispatch(Status.Connecting);\n\n  try {\n    const connection = new Connection(url, \"finalized\");\n    const supply = (\n      await connection.getSupply({ excludeNonCirculatingAccountsList: true })\n    ).value;\n\n    // Update state if still connecting\n    dispatch((state) => {\n      if (state !== Status.Connecting) return state;\n      return supply;\n    });\n  } catch (err) {\n    if (cluster !== Cluster.Custom) {\n      reportError(err, { url });\n    }\n    dispatch(\"Failed to fetch supply\");\n  }\n}\n\nexport function useSupply() {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useSupply must be used within a SupplyProvider`);\n  }\n  return state;\n}\n\nexport function useFetchSupply() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchSupply must be used within a SupplyProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(() => {\n    fetch(dispatch, cluster, url);\n  }, [dispatch, cluster, url]);\n}\n","import { Connection, VoteAccountStatus } from \"@solana/web3.js\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport React from \"react\";\nimport { reportError } from \"utils/sentry\";\n\nasync function fetchVoteAccounts(\n  cluster: Cluster,\n  url: string,\n  setVoteAccounts: React.Dispatch<\n    React.SetStateAction<VoteAccountStatus | undefined>\n  >\n) {\n  try {\n    const connection = new Connection(url);\n    const result = await connection.getVoteAccounts();\n    setVoteAccounts(result);\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n  }\n}\n\nexport function useVoteAccounts() {\n  const [voteAccounts, setVoteAccounts] = React.useState<VoteAccountStatus>();\n  const { cluster, url } = useCluster();\n\n  return {\n    fetchVoteAccounts: () => fetchVoteAccounts(cluster, url, setVoteAccounts),\n    voteAccounts,\n  };\n}\n","import { useState } from \"react\";\nimport { displayTimestampUtc, displayTimestamp } from \"utils/date\";\n\ntype State = \"hide\" | \"show\";\n\nfunction Tooltip({ state }: { state: State }) {\n  const tooltip = {\n    maxWidth: \"20rem\",\n  };\n\n  if (state === \"hide\") return null;\n  return (\n    <div className=\"popover bs-popover-bottom show\" style={tooltip}>\n      <div className=\"arrow\" />\n      <div className=\"popover-body\">\n        (Click to toggle between local and UTC)\n      </div>\n    </div>\n  );\n}\n\nexport function TimestampToggle({ unixTimestamp }: { unixTimestamp: number }) {\n  const [isTimestampTypeUtc, toggleTimestampType] = useState(true);\n  const [showTooltip, toggleTooltip] = useState<State>(\"hide\");\n\n  const toggle = () => {\n    toggleTimestampType(!isTimestampTypeUtc);\n  };\n\n  const tooltipContainer = {\n    cursor: \"pointer\",\n  };\n\n  return (\n    <div className=\"popover-container w-100\" style={tooltipContainer}>\n      <span\n        onClick={toggle}\n        onMouseOver={() => toggleTooltip(\"show\")}\n        onMouseOut={() => toggleTooltip(\"hide\")}\n      >\n        {isTimestampTypeUtc === true\n          ? displayTimestampUtc(unixTimestamp)\n          : displayTimestamp(unixTimestamp)}\n      </span>\n      <Tooltip state={showTooltip} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Slot } from \"components/common/Slot\";\nimport {\n  ClusterStatsStatus,\n  useDashboardInfo,\n  usePerformanceInfo,\n  useStatsProvider,\n} from \"providers/stats/solanaClusterStats\";\nimport { abbreviatedNumber, lamportsToSol, slotsToHumanString } from \"utils\";\nimport { ClusterStatus, useCluster } from \"providers/cluster\";\nimport { TpsCard } from \"components/TpsCard\";\nimport { displayTimestampWithoutDate } from \"utils/date\";\nimport { Status, useFetchSupply, useSupply } from \"providers/supply\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { useVoteAccounts } from \"providers/accounts/vote-accounts\";\nimport { CoingeckoStatus, useCoinGecko } from \"utils/coingecko\";\nimport { Epoch } from \"components/common/Epoch\";\nimport { TimestampToggle } from \"components/common/TimestampToggle\";\n\nconst CLUSTER_STATS_TIMEOUT = 5000;\n\nexport function ClusterStatsPage() {\n  return (\n    <div className=\"container mt-4\">\n      <StakingComponent />\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Live Cluster Stats</h4>\n            </div>\n          </div>\n        </div>\n        <StatsCardBody />\n      </div>\n      <TpsCard />\n    </div>\n  );\n}\n\nfunction StakingComponent() {\n  const { status } = useCluster();\n  const supply = useSupply();\n  const fetchSupply = useFetchSupply();\n  const coinInfo = useCoinGecko(\"solana\");\n  const { fetchVoteAccounts, voteAccounts } = useVoteAccounts();\n\n  function fetchData() {\n    fetchSupply();\n    fetchVoteAccounts();\n  }\n\n  React.useEffect(() => {\n    if (status === ClusterStatus.Connected) {\n      fetchData();\n    }\n  }, [status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const delinquentStake = React.useMemo(() => {\n    if (voteAccounts) {\n      return voteAccounts.delinquent.reduce(\n        (prev, current) => prev + current.activatedStake,\n        0\n      );\n    }\n  }, [voteAccounts]);\n\n  const activeStake = React.useMemo(() => {\n    if (voteAccounts && delinquentStake) {\n      return (\n        voteAccounts.current.reduce(\n          (prev, current) => prev + current.activatedStake,\n          0\n        ) + delinquentStake\n      );\n    }\n  }, [voteAccounts, delinquentStake]);\n\n  if (supply === Status.Disconnected) {\n    // we'll return here to prevent flicker\n    return null;\n  }\n\n  if (supply === Status.Idle || supply === Status.Connecting || !coinInfo) {\n    return <LoadingCard message=\"Loading supply and price data\" />;\n  } else if (typeof supply === \"string\") {\n    return <ErrorCard text={supply} retry={fetchData} />;\n  }\n\n  const circulatingPercentage = (\n    (supply.circulating / supply.total) *\n    100\n  ).toFixed(1);\n\n  let delinquentStakePercentage;\n  if (delinquentStake && activeStake) {\n    delinquentStakePercentage = ((delinquentStake / activeStake) * 100).toFixed(\n      1\n    );\n  }\n\n  let solanaInfo;\n  if (coinInfo.status === CoingeckoStatus.Success) {\n    solanaInfo = coinInfo.coinInfo;\n  }\n\n  return (\n    <div className=\"row staking-card\">\n      <div className=\"col-12 col-lg-4 col-xl\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4>Circulating Supply</h4>\n            <h1>\n              <em>{displayLamports(supply.circulating)}</em> /{\" \"}\n              <small>{displayLamports(supply.total)}</small>\n            </h1>\n            <h5>\n              <em>{circulatingPercentage}%</em> is circulating\n            </h5>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-12 col-lg-4 col-xl\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4>Active Stake</h4>\n            {activeStake && (\n              <h1>\n                <em>{displayLamports(activeStake)}</em> /{\" \"}\n                <small>{displayLamports(supply.total)}</small>\n              </h1>\n            )}\n            {delinquentStakePercentage && (\n              <h5>\n                Delinquent stake: <em>{delinquentStakePercentage}%</em>\n              </h5>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"col-12 col-lg-4 col-xl\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            {solanaInfo && (\n              <>\n                <h4>\n                  Price{\" \"}\n                  <span className=\"ms-2 badge bg-primary rank\">\n                    Rank #{solanaInfo.market_cap_rank}\n                  </span>\n                </h4>\n                <h1>\n                  <em>${solanaInfo.price.toFixed(2)}</em>{\" \"}\n                  {solanaInfo.price_change_percentage_24h > 0 && (\n                    <small className=\"change-positive\">\n                      &uarr; {solanaInfo.price_change_percentage_24h.toFixed(2)}\n                      %\n                    </small>\n                  )}\n                  {solanaInfo.price_change_percentage_24h < 0 && (\n                    <small className=\"change-negative\">\n                      &darr; {solanaInfo.price_change_percentage_24h.toFixed(2)}\n                      %\n                    </small>\n                  )}\n                  {solanaInfo.price_change_percentage_24h === 0 && (\n                    <small>0%</small>\n                  )}\n                </h1>\n                <h5>\n                  24h Vol: <em>${abbreviatedNumber(solanaInfo.volume_24)}</em>{\" \"}\n                  MCap: <em>${abbreviatedNumber(solanaInfo.market_cap)}</em>\n                </h5>\n              </>\n            )}\n            {coinInfo.status === CoingeckoStatus.FetchFailed && (\n              <>\n                <h4>Price</h4>\n                <h1>\n                  <em>$--.--</em>\n                </h1>\n                <h5>Error fetching the latest price information</h5>\n              </>\n            )}\n            {solanaInfo && (\n              <p className=\"updated-time text-muted\">\n                Updated at{\" \"}\n                {displayTimestampWithoutDate(solanaInfo.last_updated.getTime())}\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction displayLamports(value: number) {\n  return abbreviatedNumber(lamportsToSol(value));\n}\n\nfunction StatsCardBody() {\n  const dashboardInfo = useDashboardInfo();\n  const performanceInfo = usePerformanceInfo();\n  const { setActive } = useStatsProvider();\n  const { cluster } = useCluster();\n\n  React.useEffect(() => {\n    setActive(true);\n    return () => setActive(false);\n  }, [setActive, cluster]);\n\n  if (\n    performanceInfo.status !== ClusterStatsStatus.Ready ||\n    dashboardInfo.status !== ClusterStatsStatus.Ready\n  ) {\n    const error =\n      performanceInfo.status === ClusterStatsStatus.Error ||\n      dashboardInfo.status === ClusterStatsStatus.Error;\n    return <StatsNotReady error={error} />;\n  }\n\n  const { avgSlotTime_1h, avgSlotTime_1min, epochInfo, blockTime } =\n    dashboardInfo;\n  const hourlySlotTime = Math.round(1000 * avgSlotTime_1h);\n  const averageSlotTime = Math.round(1000 * avgSlotTime_1min);\n  const { slotIndex, slotsInEpoch } = epochInfo;\n  const epochProgress = ((100 * slotIndex) / slotsInEpoch).toFixed(1) + \"%\";\n  const epochTimeRemaining = slotsToHumanString(\n    slotsInEpoch - slotIndex,\n    hourlySlotTime\n  );\n  const { blockHeight, absoluteSlot } = epochInfo;\n\n  return (\n    <TableCardBody>\n      <tr>\n        <td className=\"w-100\">Slot</td>\n        <td className=\"text-lg-end font-monospace\">\n          <Slot slot={absoluteSlot} link />\n        </td>\n      </tr>\n      {blockHeight !== undefined && (\n        <tr>\n          <td className=\"w-100\">Block height</td>\n          <td className=\"text-lg-end font-monospace\">\n            <Slot slot={blockHeight} />\n          </td>\n        </tr>\n      )}\n      {blockTime && (\n        <tr>\n          <td className=\"w-100\">Cluster time</td>\n          <td className=\"text-lg-end font-monospace\">\n            <TimestampToggle unixTimestamp={blockTime}></TimestampToggle>\n          </td>\n        </tr>\n      )}\n      <tr>\n        <td className=\"w-100\">Slot time (1min average)</td>\n        <td className=\"text-lg-end font-monospace\">{averageSlotTime}ms</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Slot time (1hr average)</td>\n        <td className=\"text-lg-end font-monospace\">{hourlySlotTime}ms</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch</td>\n        <td className=\"text-lg-end font-monospace\">\n          <Epoch epoch={epochInfo.epoch} link />\n        </td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch progress</td>\n        <td className=\"text-lg-end font-monospace\">{epochProgress}</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch time remaining (approx.)</td>\n        <td className=\"text-lg-end font-monospace\">~{epochTimeRemaining}</td>\n      </tr>\n    </TableCardBody>\n  );\n}\n\nexport function StatsNotReady({ error }: { error: boolean }) {\n  const { setTimedOut, retry, active } = useStatsProvider();\n  const { cluster } = useCluster();\n\n  React.useEffect(() => {\n    let timedOut = 0;\n    if (!error) {\n      timedOut = setTimeout(setTimedOut, CLUSTER_STATS_TIMEOUT);\n    }\n    return () => {\n      if (timedOut) {\n        clearTimeout(timedOut);\n      }\n    };\n  }, [setTimedOut, cluster, error]);\n\n  if (error || !active) {\n    return (\n      <div className=\"card-body text-center\">\n        There was a problem loading cluster stats.{\" \"}\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => {\n            retry();\n          }}\n        >\n          <span className=\"fe fe-refresh-cw me-2\"></span>\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card-body text-center\">\n      <span className=\"spinner-grow spinner-grow-sm me-2\"></span>\n      Loading\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { AccountBalancePair, Connection } from \"@solana/web3.js\";\nimport { useCluster, ClusterStatus, Cluster } from \"./cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport enum Status {\n  Idle,\n  Disconnected,\n  Connecting,\n}\n\ntype RichLists = {\n  total: AccountBalancePair[];\n  circulating: AccountBalancePair[];\n  nonCirculating: AccountBalancePair[];\n};\n\ntype State = RichLists | Status | string;\n\ntype Dispatch = React.Dispatch<React.SetStateAction<State>>;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function RichListProvider({ children }: Props) {\n  const [state, setState] = React.useState<State>(Status.Idle);\n  const { status: clusterStatus, cluster, url } = useCluster();\n\n  React.useEffect(() => {\n    if (state !== Status.Idle) {\n      switch (clusterStatus) {\n        case ClusterStatus.Connecting: {\n          setState(Status.Disconnected);\n          break;\n        }\n        case ClusterStatus.Connected: {\n          fetch(setState, cluster, url);\n          break;\n        }\n      }\n    }\n  }, [clusterStatus, cluster, url]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={setState}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetch(dispatch: Dispatch, cluster: Cluster, url: string) {\n  dispatch(Status.Connecting);\n\n  try {\n    const connection = new Connection(url, \"finalized\");\n\n    const [total, circulating, nonCirculating] = (\n      await Promise.all([\n        connection.getLargestAccounts(),\n        connection.getLargestAccounts({ filter: \"circulating\" }),\n        connection.getLargestAccounts({ filter: \"nonCirculating\" }),\n      ])\n    ).map((response) => response.value);\n\n    // Update state if still connecting\n    dispatch((state) => {\n      if (state !== Status.Connecting) return state;\n      return { total, circulating, nonCirculating };\n    });\n  } catch (err) {\n    if (cluster !== Cluster.Custom) {\n      reportError(err, { url });\n    }\n    dispatch(\"Failed to fetch top accounts\");\n  }\n}\n\nexport function useRichList() {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useRichList must be used within a RichListProvider`);\n  }\n  return state;\n}\n\nexport function useFetchRichList() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchRichList must be used within a RichListProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(() => {\n    fetch(dispatch, cluster, url);\n  }, [dispatch, cluster, url]);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { AccountBalancePair } from \"@solana/web3.js\";\nimport { useRichList, useFetchRichList, Status } from \"providers/richList\";\nimport { LoadingCard } from \"./common/LoadingCard\";\nimport { ErrorCard } from \"./common/ErrorCard\";\nimport { SolBalance } from \"utils\";\nimport { useQuery } from \"utils/url\";\nimport { useSupply } from \"providers/supply\";\nimport { Address } from \"./common/Address\";\n\ntype Filter = \"circulating\" | \"nonCirculating\" | \"all\" | null;\n\nexport function TopAccountsCard() {\n  const supply = useSupply();\n  const richList = useRichList();\n  const fetchRichList = useFetchRichList();\n  const [showDropdown, setDropdown] = React.useState(false);\n  const filter = useQueryFilter();\n\n  if (typeof supply !== \"object\") return null;\n\n  if (richList === Status.Disconnected) {\n    return <ErrorCard text=\"Not connected to the cluster\" />;\n  }\n\n  if (richList === Status.Connecting) {\n    return <LoadingCard />;\n  }\n\n  if (typeof richList === \"string\") {\n    return <ErrorCard text={richList} retry={fetchRichList} />;\n  }\n\n  let supplyCount: number;\n  let accounts, header;\n\n  if (richList !== Status.Idle) {\n    switch (filter) {\n      case \"nonCirculating\": {\n        accounts = richList.nonCirculating;\n        supplyCount = supply.nonCirculating;\n        header = \"Non-Circulating\";\n        break;\n      }\n      case \"all\": {\n        accounts = richList.total;\n        supplyCount = supply.total;\n        header = \"Total\";\n        break;\n      }\n      case \"circulating\":\n      default: {\n        accounts = richList.circulating;\n        supplyCount = supply.circulating;\n        header = \"Circulating\";\n        break;\n      }\n    }\n  }\n\n  return (\n    <>\n      {showDropdown && (\n        <div className=\"dropdown-exit\" onClick={() => setDropdown(false)} />\n      )}\n\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Largest Accounts</h4>\n            </div>\n\n            <div className=\"col-auto\">\n              <FilterDropdown\n                filter={filter}\n                toggle={() => setDropdown((show) => !show)}\n                show={showDropdown}\n              />\n            </div>\n          </div>\n        </div>\n\n        {richList === Status.Idle && (\n          <div className=\"card-body\">\n            <span\n              className=\"btn btn-white ms-3 d-none d-md-inline\"\n              onClick={fetchRichList}\n            >\n              Load Largest Accounts\n            </span>\n          </div>\n        )}\n\n        {accounts && (\n          <div className=\"table-responsive mb-0\">\n            <table className=\"table table-sm table-nowrap card-table\">\n              <thead>\n                <tr>\n                  <th className=\"text-muted\">Rank</th>\n                  <th className=\"text-muted\">Address</th>\n                  <th className=\"text-muted text-end\">Balance (SOL)</th>\n                  <th className=\"text-muted text-end\">% of {header} Supply</th>\n                </tr>\n              </thead>\n              <tbody className=\"list\">\n                {accounts.map((account, index) =>\n                  renderAccountRow(account, index, supplyCount)\n                )}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (\n  account: AccountBalancePair,\n  index: number,\n  supply: number\n) => {\n  return (\n    <tr key={index}>\n      <td>\n        <span className=\"badge bg-gray-soft badge-pill\">{index + 1}</span>\n      </td>\n      <td>\n        <Address pubkey={account.address} link />\n      </td>\n      <td className=\"text-end\">\n        <SolBalance lamports={account.lamports} maximumFractionDigits={0} />\n      </td>\n      <td className=\"text-end\">{`${((100 * account.lamports) / supply).toFixed(\n        3\n      )}%`}</td>\n    </tr>\n  );\n};\n\nconst useQueryFilter = (): Filter => {\n  const query = useQuery();\n  const filter = query.get(\"filter\");\n  if (\n    filter === \"circulating\" ||\n    filter === \"nonCirculating\" ||\n    filter === \"all\"\n  ) {\n    return filter;\n  } else {\n    return null;\n  }\n};\n\nconst filterTitle = (filter: Filter): string => {\n  switch (filter) {\n    case \"nonCirculating\": {\n      return \"Non-Circulating\";\n    }\n    case \"all\": {\n      return \"All\";\n    }\n    case \"circulating\":\n    default: {\n      return \"Circulating\";\n    }\n  }\n};\n\ntype DropdownProps = {\n  filter: Filter;\n  toggle: () => void;\n  show: boolean;\n};\n\nconst FilterDropdown = ({ filter, toggle, show }: DropdownProps) => {\n  const buildLocation = (location: Location, filter: Filter) => {\n    const params = new URLSearchParams(location.search);\n    if (filter === null) {\n      params.delete(\"filter\");\n    } else {\n      params.set(\"filter\", filter);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const FILTERS: Filter[] = [\"all\", null, \"nonCirculating\"];\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {filterTitle(filter)}\n      </button>\n      <div className={`dropdown-menu-end dropdown-menu${show ? \" show\" : \"\"}`}>\n        {FILTERS.map((filterOption) => {\n          return (\n            <Link\n              key={filterOption || \"null\"}\n              to={(location) => buildLocation(location, filterOption)}\n              className={`dropdown-item${\n                filterOption === filter ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {filterTitle(filterOption)}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSupply, useFetchSupply, Status } from \"providers/supply\";\nimport { LoadingCard } from \"./common/LoadingCard\";\nimport { ErrorCard } from \"./common/ErrorCard\";\nimport { SolBalance } from \"utils\";\nimport { TableCardBody } from \"./common/TableCardBody\";\n\nexport function SupplyCard() {\n  const supply = useSupply();\n  const fetchSupply = useFetchSupply();\n\n  // Fetch supply on load\n  React.useEffect(() => {\n    if (supply === Status.Idle) fetchSupply();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (supply === Status.Disconnected) {\n    return <ErrorCard text=\"Not connected to the cluster\" />;\n  }\n\n  if (supply === Status.Idle || supply === Status.Connecting)\n    return <LoadingCard />;\n\n  if (typeof supply === \"string\") {\n    return <ErrorCard text={supply} retry={fetchSupply} />;\n  }\n\n  return (\n    <div className=\"card\">\n      {renderHeader()}\n\n      <TableCardBody>\n        <tr>\n          <td className=\"w-100\">Total Supply (SOL)</td>\n          <td className=\"text-lg-end\">\n            <SolBalance lamports={supply.total} maximumFractionDigits={0} />\n          </td>\n        </tr>\n\n        <tr>\n          <td className=\"w-100\">Circulating Supply (SOL)</td>\n          <td className=\"text-lg-end\">\n            <SolBalance\n              lamports={supply.circulating}\n              maximumFractionDigits={0}\n            />\n          </td>\n        </tr>\n\n        <tr>\n          <td className=\"w-100\">Non-Circulating Supply (SOL)</td>\n          <td className=\"text-lg-end\">\n            <SolBalance\n              lamports={supply.nonCirculating}\n              maximumFractionDigits={0}\n            />\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nconst renderHeader = () => {\n  return (\n    <div className=\"card-header\">\n      <div className=\"row align-items-center\">\n        <div className=\"col\">\n          <h4 className=\"card-header-title\">Supply Overview</h4>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { TopAccountsCard } from \"components/TopAccountsCard\";\nimport { SupplyCard } from \"components/SupplyCard\";\n\nexport function SupplyPage() {\n  return (\n    <div className=\"container mt-4\">\n      <SupplyCard />\n      <TopAccountsCard />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport {\n  BlockResponse,\n  ConfirmedTransactionMeta,\n  TransactionSignature,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Signature } from \"components/common/Signature\";\nimport { Address } from \"components/common/Address\";\nimport { useQuery } from \"utils/url\";\nimport { useCluster } from \"providers/cluster\";\nimport { displayAddress } from \"utils/tx\";\n\nconst PAGE_SIZE = 25;\n\nconst useQueryFilter = (): string => {\n  const query = useQuery();\n  const filter = query.get(\"filter\");\n  return filter || \"\";\n};\n\ntype TransactionWithInvocations = {\n  index: number;\n  signature?: TransactionSignature;\n  meta: ConfirmedTransactionMeta | null;\n  invocations: Map<string, number>;\n};\n\nexport function BlockHistoryCard({ block }: { block: BlockResponse }) {\n  const [numDisplayed, setNumDisplayed] = React.useState(PAGE_SIZE);\n  const [showDropdown, setDropdown] = React.useState(false);\n  const filter = useQueryFilter();\n\n  const { transactions, invokedPrograms } = React.useMemo(() => {\n    const invokedPrograms = new Map<string, number>();\n\n    const transactions: TransactionWithInvocations[] = block.transactions.map(\n      (tx, index) => {\n        let signature: TransactionSignature | undefined;\n        if (tx.transaction.signatures.length > 0) {\n          signature = tx.transaction.signatures[0];\n        }\n\n        let programIndexes = tx.transaction.message.instructions.map(\n          (ix) => ix.programIdIndex\n        );\n        programIndexes.concat(\n          tx.meta?.innerInstructions?.flatMap((ix) => {\n            return ix.instructions.map((ix) => ix.programIdIndex);\n          }) || []\n        );\n\n        const indexMap = new Map<number, number>();\n        programIndexes.forEach((programIndex) => {\n          const count = indexMap.get(programIndex) || 0;\n          indexMap.set(programIndex, count + 1);\n        });\n\n        const invocations = new Map<string, number>();\n        for (const [i, count] of indexMap.entries()) {\n          const programId = tx.transaction.message.accountKeys[i].toBase58();\n          invocations.set(programId, count);\n          const programTransactionCount = invokedPrograms.get(programId) || 0;\n          invokedPrograms.set(programId, programTransactionCount + 1);\n        }\n\n        return {\n          index,\n          signature,\n          meta: tx.meta,\n          invocations,\n        };\n      }\n    );\n    return { transactions, invokedPrograms };\n  }, [block]);\n\n  const filteredTransactions = React.useMemo(() => {\n    return transactions.filter(({ invocations }) => {\n      if (filter === ALL_TRANSACTIONS) {\n        return true;\n      }\n      return invocations.has(filter);\n    });\n  }, [transactions, filter]);\n\n  if (filteredTransactions.length === 0) {\n    const errorMessage =\n      filter === ALL_TRANSACTIONS\n        ? \"This block has no transactions\"\n        : \"No transactions found with this filter\";\n    return <ErrorCard text={errorMessage} />;\n  }\n\n  let title: string;\n  if (filteredTransactions.length === transactions.length) {\n    title = `Block Transactions (${filteredTransactions.length})`;\n  } else {\n    title = `Block Transactions`;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">{title}</h3>\n        <FilterDropdown\n          filter={filter}\n          toggle={() => setDropdown((show) => !show)}\n          show={showDropdown}\n          invokedPrograms={invokedPrograms}\n          totalTransactionCount={transactions.length}\n        ></FilterDropdown>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">#</th>\n              <th className=\"text-muted\">Result</th>\n              <th className=\"text-muted\">Transaction Signature</th>\n              <th className=\"text-muted\">Invoked Programs</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {filteredTransactions.slice(0, numDisplayed).map((tx, i) => {\n              let statusText;\n              let statusClass;\n              let signature: React.ReactNode;\n              if (tx.meta?.err || !tx.signature) {\n                statusClass = \"warning\";\n                statusText = \"Failed\";\n              } else {\n                statusClass = \"success\";\n                statusText = \"Success\";\n              }\n\n              if (tx.signature) {\n                signature = (\n                  <Signature signature={tx.signature} link truncateChars={48} />\n                );\n              }\n\n              const entries = [...tx.invocations.entries()];\n              entries.sort();\n\n              return (\n                <tr key={i}>\n                  <td>{tx.index + 1}</td>\n                  <td>\n                    <span className={`badge bg-${statusClass}-soft`}>\n                      {statusText}\n                    </span>\n                  </td>\n\n                  <td>{signature}</td>\n                  <td>\n                    {tx.invocations.size === 0\n                      ? \"NA\"\n                      : entries.map(([programId, count], i) => {\n                          return (\n                            <div key={i} className=\"d-flex align-items-center\">\n                              <Address pubkey={new PublicKey(programId)} link />\n                              <span className=\"ms-2 text-muted\">{`(${count})`}</span>\n                            </div>\n                          );\n                        })}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {block.transactions.length > numDisplayed && (\n        <div className=\"card-footer\">\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() =>\n              setNumDisplayed((displayed) => displayed + PAGE_SIZE)\n            }\n          >\n            Load More\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\ntype FilterProps = {\n  filter: string;\n  toggle: () => void;\n  show: boolean;\n  invokedPrograms: Map<string, number>;\n  totalTransactionCount: number;\n};\n\nconst ALL_TRANSACTIONS = \"\";\n\ntype FilterOption = {\n  name: string;\n  programId: string;\n  transactionCount: number;\n};\n\nconst FilterDropdown = ({\n  filter,\n  toggle,\n  show,\n  invokedPrograms,\n  totalTransactionCount,\n}: FilterProps) => {\n  const { cluster } = useCluster();\n  const buildLocation = (location: Location, filter: string) => {\n    const params = new URLSearchParams(location.search);\n    if (filter === ALL_TRANSACTIONS) {\n      params.delete(\"filter\");\n    } else {\n      params.set(\"filter\", filter);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  let currentFilterOption = {\n    name: \"All Transactions\",\n    programId: ALL_TRANSACTIONS,\n    transactionCount: totalTransactionCount,\n  };\n  const filterOptions: FilterOption[] = [currentFilterOption];\n  const placeholderRegistry = new Map();\n\n  [...invokedPrograms.entries()].forEach(([programId, transactionCount]) => {\n    const name = displayAddress(programId, cluster, placeholderRegistry);\n    if (filter === programId) {\n      currentFilterOption = {\n        programId,\n        name: `${name} Transactions (${transactionCount})`,\n        transactionCount,\n      };\n    }\n    filterOptions.push({ name, programId, transactionCount });\n  });\n\n  filterOptions.sort((a, b) => {\n    if (a.transactionCount !== b.transactionCount) {\n      return b.transactionCount - a.transactionCount;\n    } else {\n      return b.name > a.name ? -1 : 1;\n    }\n  });\n\n  return (\n    <div className=\"dropdown me-2\">\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {currentFilterOption.name}\n      </button>\n      <div\n        className={`token-filter dropdown-menu-end dropdown-menu${\n          show ? \" show\" : \"\"\n        }`}\n      >\n        {filterOptions.map(({ name, programId, transactionCount }) => {\n          return (\n            <Link\n              key={programId}\n              to={(location: Location) => buildLocation(location, programId)}\n              className={`dropdown-item${\n                programId === filter ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {`${name} (${transactionCount})`}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { SolBalance } from \"utils\";\nimport { BlockResponse, PublicKey } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\n\nconst PAGE_SIZE = 10;\n\nexport function BlockRewardsCard({ block }: { block: BlockResponse }) {\n  const [rewardsDisplayed, setRewardsDisplayed] = React.useState(PAGE_SIZE);\n\n  if (!block.rewards || block.rewards.length < 1) {\n    return null;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Block Rewards</h3>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Type</th>\n              <th className=\"text-muted\">Amount</th>\n              <th className=\"text-muted\">New Balance</th>\n              <th className=\"text-muted\">Percent Change</th>\n            </tr>\n          </thead>\n          <tbody>\n            {block.rewards.map((reward, index) => {\n              if (index >= rewardsDisplayed - 1) {\n                return null;\n              }\n\n              let percentChange;\n              if (reward.postBalance !== null && reward.postBalance !== 0) {\n                percentChange = (\n                  (Math.abs(reward.lamports) /\n                    (reward.postBalance - reward.lamports)) *\n                  100\n                ).toFixed(9);\n              }\n              return (\n                <tr key={reward.pubkey + reward.rewardType}>\n                  <td>\n                    <Address pubkey={new PublicKey(reward.pubkey)} link />\n                  </td>\n                  <td>{reward.rewardType}</td>\n                  <td>\n                    <SolBalance lamports={reward.lamports} />\n                  </td>\n                  <td>\n                    {reward.postBalance ? (\n                      <SolBalance lamports={reward.postBalance} />\n                    ) : (\n                      \"-\"\n                    )}\n                  </td>\n                  <td>{percentChange ? percentChange + \"%\" : \"-\"}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {block.rewards.length > rewardsDisplayed && (\n        <div className=\"card-footer\">\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() =>\n              setRewardsDisplayed((displayed) => displayed + PAGE_SIZE)\n            }\n          >\n            Load More\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BlockResponse, PublicKey } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\n\nexport function BlockProgramsCard({ block }: { block: BlockResponse }) {\n  const totalTransactions = block.transactions.length;\n  const txSuccesses = new Map<string, number>();\n  const txFrequency = new Map<string, number>();\n  const ixFrequency = new Map<string, number>();\n\n  let totalInstructions = 0;\n  block.transactions.forEach((tx) => {\n    const message = tx.transaction.message;\n    totalInstructions += message.instructions.length;\n    const programUsed = new Set<string>();\n    const trackProgram = (index: number) => {\n      if (index >= message.accountKeys.length) return;\n      const programId = message.accountKeys[index];\n      const programAddress = programId.toBase58();\n      programUsed.add(programAddress);\n      const frequency = ixFrequency.get(programAddress);\n      ixFrequency.set(programAddress, frequency ? frequency + 1 : 1);\n    };\n\n    message.instructions.forEach((ix) => trackProgram(ix.programIdIndex));\n    tx.meta?.innerInstructions?.forEach((inner) => {\n      totalInstructions += inner.instructions.length;\n      inner.instructions.forEach((innerIx) =>\n        trackProgram(innerIx.programIdIndex)\n      );\n    });\n\n    const successful = tx.meta?.err === null;\n    programUsed.forEach((programId) => {\n      const frequency = txFrequency.get(programId);\n      txFrequency.set(programId, frequency ? frequency + 1 : 1);\n      if (successful) {\n        const count = txSuccesses.get(programId);\n        txSuccesses.set(programId, count ? count + 1 : 1);\n      }\n    });\n  });\n\n  const programEntries = [];\n  for (let entry of txFrequency) {\n    programEntries.push(entry);\n  }\n\n  programEntries.sort((a, b) => {\n    if (a[1] < b[1]) return 1;\n    if (a[1] > b[1]) return -1;\n    return 0;\n  });\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header align-items-center\">\n          <h3 className=\"card-header-title\">Block Program Stats</h3>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td className=\"w-100\">Unique Programs Count</td>\n            <td className=\"text-lg-end font-monospace\">\n              {programEntries.length}\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Total Instructions</td>\n            <td className=\"text-lg-end font-monospace\">{totalInstructions}</td>\n          </tr>\n        </TableCardBody>\n      </div>\n      <div className=\"card\">\n        <div className=\"card-header align-items-center\">\n          <h3 className=\"card-header-title\">Block Programs</h3>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"text-muted\">Program</th>\n                <th className=\"text-muted\">Transaction Count</th>\n                <th className=\"text-muted\">% of Total</th>\n                <th className=\"text-muted\">Instruction Count</th>\n                <th className=\"text-muted\">% of Total</th>\n                <th className=\"text-muted\">Success Rate</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programEntries.map(([programId, txFreq]) => {\n                const ixFreq = ixFrequency.get(programId) as number;\n                const successes = txSuccesses.get(programId) || 0;\n                return (\n                  <tr key={programId}>\n                    <td>\n                      <Address pubkey={new PublicKey(programId)} link />\n                    </td>\n                    <td>{txFreq}</td>\n                    <td>{((100 * txFreq) / totalTransactions).toFixed(2)}%</td>\n                    <td>{ixFreq}</td>\n                    <td>{((100 * ixFreq) / totalInstructions).toFixed(2)}%</td>\n                    <td>{((100 * successes) / txFreq).toFixed(0)}%</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { BlockResponse, PublicKey } from \"@solana/web3.js\";\nimport { Address } from \"components/common/Address\";\n\ntype AccountStats = {\n  reads: number;\n  writes: number;\n};\n\nconst PAGE_SIZE = 25;\n\nexport function BlockAccountsCard({ block }: { block: BlockResponse }) {\n  const [numDisplayed, setNumDisplayed] = React.useState(10);\n  const totalTransactions = block.transactions.length;\n\n  const accountStats = React.useMemo(() => {\n    const statsMap = new Map<string, AccountStats>();\n    block.transactions.forEach((tx) => {\n      const message = tx.transaction.message;\n      const txSet = new Map<string, boolean>();\n      message.instructions.forEach((ix) => {\n        ix.accounts.forEach((index) => {\n          const address = message.accountKeys[index].toBase58();\n          txSet.set(address, message.isAccountWritable(index));\n        });\n      });\n\n      txSet.forEach((isWritable, address) => {\n        const stats = statsMap.get(address) || { reads: 0, writes: 0 };\n        if (isWritable) {\n          stats.writes++;\n        } else {\n          stats.reads++;\n        }\n        statsMap.set(address, stats);\n      });\n    });\n\n    const accountEntries = [];\n    for (let entry of statsMap) {\n      accountEntries.push(entry);\n    }\n\n    accountEntries.sort((a, b) => {\n      const aCount = a[1].reads + a[1].writes;\n      const bCount = b[1].reads + b[1].writes;\n      if (aCount < bCount) return 1;\n      if (aCount > bCount) return -1;\n      return 0;\n    });\n\n    return accountEntries;\n  }, [block]);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Block Account Usage</h3>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Account</th>\n              <th className=\"text-muted\">Read-Write Count</th>\n              <th className=\"text-muted\">Read-Only Count</th>\n              <th className=\"text-muted\">Total Count</th>\n              <th className=\"text-muted\">% of Transactions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {accountStats\n              .slice(0, numDisplayed)\n              .map(([address, { writes, reads }]) => {\n                return (\n                  <tr key={address}>\n                    <td>\n                      <Address pubkey={new PublicKey(address)} link />\n                    </td>\n                    <td>{writes}</td>\n                    <td>{reads}</td>\n                    <td>{writes + reads}</td>\n                    <td>\n                      {((100 * (writes + reads)) / totalTransactions).toFixed(\n                        2\n                      )}\n                      %\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      </div>\n\n      {accountStats.length > numDisplayed && (\n        <div className=\"card-footer\">\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() =>\n              setNumDisplayed((displayed) => displayed + PAGE_SIZE)\n            }\n          >\n            Load More\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { useBlock, useFetchBlock, FetchStatus } from \"providers/block\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Slot } from \"components/common/Slot\";\nimport { ClusterStatus, useCluster } from \"providers/cluster\";\nimport { BlockHistoryCard } from \"./BlockHistoryCard\";\nimport { BlockRewardsCard } from \"./BlockRewardsCard\";\nimport { BlockResponse } from \"@solana/web3.js\";\nimport { NavLink } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\nimport { BlockProgramsCard } from \"./BlockProgramsCard\";\nimport { BlockAccountsCard } from \"./BlockAccountsCard\";\nimport { displayTimestamp, displayTimestampUtc } from \"utils/date\";\nimport { Epoch } from \"components/common/Epoch\";\n\nexport function BlockOverviewCard({\n  slot,\n  tab,\n}: {\n  slot: number;\n  tab?: string;\n}) {\n  const confirmedBlock = useBlock(slot);\n  const fetchBlock = useFetchBlock();\n  const { clusterInfo, status } = useCluster();\n  const refresh = () => fetchBlock(slot);\n\n  // Fetch block on load\n  React.useEffect(() => {\n    if (!confirmedBlock && status === ClusterStatus.Connected) refresh();\n  }, [slot, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!confirmedBlock || confirmedBlock.status === FetchStatus.Fetching) {\n    return <LoadingCard message=\"Loading block\" />;\n  } else if (\n    confirmedBlock.data === undefined ||\n    confirmedBlock.status === FetchStatus.FetchFailed\n  ) {\n    return <ErrorCard retry={refresh} text=\"Failed to fetch block\" />;\n  } else if (confirmedBlock.data.block === undefined) {\n    return <ErrorCard retry={refresh} text={`Block ${slot} was not found`} />;\n  }\n\n  const block = confirmedBlock.data.block;\n  const committedTxs = block.transactions.filter((tx) => tx.meta?.err === null);\n  const epoch = clusterInfo?.epochSchedule.getEpoch(slot);\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n            Overview\n          </h3>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td className=\"w-100\">Slot</td>\n            <td className=\"text-lg-end font-monospace\">\n              <Slot slot={slot} />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Blockhash</td>\n            <td className=\"text-lg-end font-monospace\">\n              <span>{block.blockhash}</span>\n            </td>\n          </tr>\n          {block.blockTime ? (\n            <>\n              <tr>\n                <td>Timestamp (Local)</td>\n                <td className=\"text-lg-end\">\n                  <span className=\"font-monospace\">\n                    {displayTimestamp(block.blockTime * 1000, true)}\n                  </span>\n                </td>\n              </tr>\n              <tr>\n                <td>Timestamp (UTC)</td>\n                <td className=\"text-lg-end\">\n                  <span className=\"font-monospace\">\n                    {displayTimestampUtc(block.blockTime * 1000, true)}\n                  </span>\n                </td>\n              </tr>\n            </>\n          ) : (\n            <tr>\n              <td className=\"w-100\">Timestamp</td>\n              <td className=\"text-lg-end\">Unavailable</td>\n            </tr>\n          )}\n          <tr>\n            <td className=\"w-100\">Parent Slot</td>\n            <td className=\"text-lg-end font-monospace\">\n              <Slot slot={block.parentSlot} link />\n            </td>\n          </tr>\n          {epoch !== undefined && (\n            <tr>\n              <td className=\"w-100\">Epoch</td>\n              <td className=\"text-lg-end font-monospace\">\n                <Epoch epoch={epoch} link />\n              </td>\n            </tr>\n          )}\n          <tr>\n            <td className=\"w-100\">Parent Blockhash</td>\n            <td className=\"text-lg-end font-monospace\">\n              <span>{block.previousBlockhash}</span>\n            </td>\n          </tr>\n          {confirmedBlock.data.child && (\n            <tr>\n              <td className=\"w-100\">Child Slot</td>\n              <td className=\"text-lg-end font-monospace\">\n                <Slot slot={confirmedBlock.data.child} link />\n              </td>\n            </tr>\n          )}\n          <tr>\n            <td className=\"w-100\">Processed Transactions</td>\n            <td className=\"text-lg-end font-monospace\">\n              <span>{block.transactions.length}</span>\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Successful Transactions</td>\n            <td className=\"text-lg-end font-monospace\">\n              <span>{committedTxs.length}</span>\n            </td>\n          </tr>\n        </TableCardBody>\n      </div>\n\n      <MoreSection block={block} slot={slot} tab={tab} />\n    </>\n  );\n}\n\nconst TABS: Tab[] = [\n  {\n    slug: \"history\",\n    title: \"Transactions\",\n    path: \"\",\n  },\n  {\n    slug: \"rewards\",\n    title: \"Rewards\",\n    path: \"/rewards\",\n  },\n  {\n    slug: \"programs\",\n    title: \"Programs\",\n    path: \"/programs\",\n  },\n  {\n    slug: \"accounts\",\n    title: \"Accounts\",\n    path: \"/accounts\",\n  },\n];\n\ntype MoreTabs = \"history\" | \"rewards\" | \"programs\" | \"accounts\";\n\ntype Tab = {\n  slug: MoreTabs;\n  title: string;\n  path: string;\n};\n\nfunction MoreSection({\n  slot,\n  block,\n  tab,\n}: {\n  slot: number;\n  block: BlockResponse;\n  tab?: string;\n}) {\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body pt-0\">\n            <ul className=\"nav nav-tabs nav-overflow header-tabs\">\n              {TABS.map(({ title, slug, path }) => (\n                <li key={slug} className=\"nav-item\">\n                  <NavLink\n                    className=\"nav-link\"\n                    to={clusterPath(`/block/${slot}${path}`)}\n                    exact\n                  >\n                    {title}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n      {tab === undefined && <BlockHistoryCard block={block} />}\n      {tab === \"rewards\" && <BlockRewardsCard block={block} />}\n      {tab === \"accounts\" && <BlockAccountsCard block={block} />}\n      {tab === \"programs\" && <BlockProgramsCard block={block} />}\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { BlockOverviewCard } from \"components/block/BlockOverviewCard\";\n\n// IE11 doesn't support Number.MAX_SAFE_INTEGER\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\ntype Props = { slot: string; tab?: string };\n\nexport function BlockDetailsPage({ slot, tab }: Props) {\n  const slotNumber = Number(slot);\n  let output = <ErrorCard text={`Block ${slot} is not valid`} />;\n\n  if (\n    !isNaN(slotNumber) &&\n    slotNumber < MAX_SAFE_INTEGER &&\n    slotNumber % 1 === 0\n  ) {\n    output = <BlockOverviewCard slot={slotNumber} tab={tab} />;\n  }\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h6 className=\"header-pretitle\">Details</h6>\n          <h2 className=\"header-title\">Block</h2>\n        </div>\n      </div>\n      {output}\n    </div>\n  );\n}\n","import React from \"react\";\nimport * as Cache from \"providers/cache\";\nimport { Connection, EpochSchedule } from \"@solana/web3.js\";\nimport { useCluster, Cluster } from \"./cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport enum FetchStatus {\n  Fetching,\n  FetchFailed,\n  Fetched,\n}\n\nexport enum ActionType {\n  Update,\n  Clear,\n}\n\ntype Epoch = {\n  firstBlock: number;\n  firstTimestamp: number | null;\n  lastBlock?: number;\n  lastTimestamp: number | null;\n};\n\ntype State = Cache.State<Epoch>;\ntype Dispatch = Cache.Dispatch<Epoch>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype EpochProviderProps = { children: React.ReactNode };\n\nexport function EpochProvider({ children }: EpochProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Epoch>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useEpoch(key: number): Cache.CacheEntry<Epoch> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useEpoch must be used within a EpochProvider`);\n  }\n\n  return context.entries[key];\n}\n\nexport async function fetchEpoch(\n  dispatch: Dispatch,\n  url: string,\n  cluster: Cluster,\n  epochSchedule: EpochSchedule,\n  currentEpoch: number,\n  epoch: number\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: epoch,\n    url,\n  });\n\n  let status: FetchStatus;\n  let data: Epoch | undefined = undefined;\n\n  try {\n    const connection = new Connection(url, \"confirmed\");\n    const firstSlot = epochSchedule.getFirstSlotInEpoch(epoch);\n    const lastSlot = epochSchedule.getLastSlotInEpoch(epoch);\n    const [firstBlock, lastBlock] = await Promise.all([\n      (async () => {\n        const firstBlocks = await connection.getBlocks(\n          firstSlot,\n          firstSlot + 100\n        );\n        return firstBlocks.shift();\n      })(),\n      (async () => {\n        const lastBlocks = await connection.getBlocks(\n          Math.max(0, lastSlot - 100),\n          lastSlot\n        );\n        return lastBlocks.pop();\n      })(),\n    ]);\n\n    if (firstBlock === undefined) {\n      throw new Error(\n        `failed to find confirmed block at start of epoch ${epoch}`\n      );\n    } else if (epoch < currentEpoch && lastBlock === undefined) {\n      throw new Error(\n        `failed to find confirmed block at end of epoch ${epoch}`\n      );\n    }\n\n    const [firstTimestamp, lastTimestamp] = await Promise.all([\n      connection.getBlockTime(firstBlock),\n      lastBlock ? connection.getBlockTime(lastBlock) : null,\n    ]);\n\n    data = {\n      firstBlock,\n      lastBlock,\n      firstTimestamp,\n      lastTimestamp,\n    };\n    status = FetchStatus.Fetched;\n  } catch (err) {\n    status = FetchStatus.FetchFailed;\n    if (cluster !== Cluster.Custom) {\n      reportError(err, { epoch: epoch.toString() });\n    }\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key: epoch,\n    status,\n    data,\n  });\n}\n\nexport function useFetchEpoch() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchEpoch must be used within a EpochProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (key: number, currentEpoch: number, epochSchedule: EpochSchedule) =>\n      fetchEpoch(dispatch, url, cluster, epochSchedule, currentEpoch, key),\n    [dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\n\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { ClusterStatus, useCluster } from \"providers/cluster\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Epoch } from \"components/common/Epoch\";\nimport { Slot } from \"components/common/Slot\";\nimport { useEpoch, useFetchEpoch } from \"providers/epoch\";\nimport { displayTimestampUtc } from \"utils/date\";\nimport { FetchStatus } from \"providers/cache\";\n\ntype Props = { epoch: string };\nexport function EpochDetailsPage({ epoch }: Props) {\n  let output;\n  if (isNaN(Number(epoch))) {\n    output = <ErrorCard text={`Epoch ${epoch} is not valid`} />;\n  } else {\n    output = <EpochOverviewCard epoch={Number(epoch)} />;\n  }\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h6 className=\"header-pretitle\">Details</h6>\n          <h2 className=\"header-title\">Epoch</h2>\n        </div>\n      </div>\n      {output}\n    </div>\n  );\n}\n\ntype OverviewProps = { epoch: number };\nfunction EpochOverviewCard({ epoch }: OverviewProps) {\n  const { status, clusterInfo } = useCluster();\n\n  const epochState = useEpoch(epoch);\n  const fetchEpoch = useFetchEpoch();\n\n  // Fetch extra epoch info on load\n  React.useEffect(() => {\n    if (!clusterInfo) return;\n    const { epochInfo, epochSchedule } = clusterInfo;\n    const currentEpoch = epochInfo.epoch;\n    if (\n      epoch <= currentEpoch &&\n      !epochState &&\n      status === ClusterStatus.Connected\n    )\n      fetchEpoch(epoch, currentEpoch, epochSchedule);\n  }, [epoch, epochState, clusterInfo, status, fetchEpoch]);\n\n  if (!clusterInfo) {\n    return <LoadingCard message=\"Connecting to cluster\" />;\n  }\n\n  const { epochInfo, epochSchedule } = clusterInfo;\n  const currentEpoch = epochInfo.epoch;\n  if (epoch > currentEpoch) {\n    return <ErrorCard text={`Epoch ${epoch} hasn't started yet`} />;\n  } else if (!epochState?.data) {\n    if (epochState?.status === FetchStatus.FetchFailed) {\n      return <ErrorCard text={`Failed to fetch details for epoch ${epoch}`} />;\n    }\n    return <LoadingCard message=\"Loading epoch\" />;\n  }\n\n  const firstSlot = epochSchedule.getFirstSlotInEpoch(epoch);\n  const lastSlot = epochSchedule.getLastSlotInEpoch(epoch);\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n            Overview\n          </h3>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td className=\"w-100\">Epoch</td>\n            <td className=\"text-lg-end font-monospace\">\n              <Epoch epoch={epoch} />\n            </td>\n          </tr>\n          {epoch > 0 && (\n            <tr>\n              <td className=\"w-100\">Previous Epoch</td>\n              <td className=\"text-lg-end font-monospace\">\n                <Epoch epoch={epoch - 1} link />\n              </td>\n            </tr>\n          )}\n          <tr>\n            <td className=\"w-100\">Next Epoch</td>\n            <td className=\"text-lg-end font-monospace\">\n              {currentEpoch > epoch ? (\n                <Epoch epoch={epoch + 1} link />\n              ) : (\n                <span className=\"text-muted\">Epoch in progress</span>\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">First Slot</td>\n            <td className=\"text-lg-end font-monospace\">\n              <Slot slot={firstSlot} />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Last Slot</td>\n            <td className=\"text-lg-end font-monospace\">\n              <Slot slot={lastSlot} />\n            </td>\n          </tr>\n          {epochState.data.firstTimestamp && (\n            <tr>\n              <td className=\"w-100\">First Block Timestamp</td>\n              <td className=\"text-lg-end\">\n                <span className=\"font-monospace\">\n                  {displayTimestampUtc(\n                    epochState.data.firstTimestamp * 1000,\n                    true\n                  )}\n                </span>\n              </td>\n            </tr>\n          )}\n          <tr>\n            <td className=\"w-100\">First Block</td>\n            <td className=\"text-lg-end font-monospace\">\n              <Slot slot={epochState.data.firstBlock} link />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Last Block</td>\n            <td className=\"text-lg-end font-monospace\">\n              {epochState.data.lastBlock !== undefined ? (\n                <Slot slot={epochState.data.lastBlock} link />\n              ) : (\n                <span className=\"text-muted\">Epoch in progress</span>\n              )}\n            </td>\n          </tr>\n          {epochState.data.lastTimestamp && (\n            <tr>\n              <td className=\"w-100\">Last Block Timestamp</td>\n              <td className=\"text-lg-end\">\n                <span className=\"font-monospace\">\n                  {displayTimestampUtc(\n                    epochState.data.lastTimestamp * 1000,\n                    true\n                  )}\n                </span>\n              </td>\n            </tr>\n          )}\n        </TableCardBody>\n      </div>\n    </>\n  );\n}\n","import { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport { ClusterModal } from \"components/ClusterModal\";\nimport { MessageBanner } from \"components/MessageBanner\";\nimport { Navbar } from \"components/Navbar\";\nimport { ClusterStatusBanner } from \"components/ClusterStatusButton\";\nimport { SearchBar } from \"components/SearchBar\";\n\nimport { AccountDetailsPage } from \"pages/AccountDetailsPage\";\nimport { TransactionInspectorPage } from \"pages/inspector/InspectorPage\";\nimport { ClusterStatsPage } from \"pages/ClusterStatsPage\";\nimport { SupplyPage } from \"pages/SupplyPage\";\nimport { TransactionDetailsPage } from \"pages/TransactionDetailsPage\";\nimport { BlockDetailsPage } from \"pages/BlockDetailsPage\";\nimport { EpochDetailsPage } from \"pages/EpochDetailsPage\";\n\nconst ADDRESS_ALIASES = [\"account\", \"accounts\", \"addresses\"];\nconst TX_ALIASES = [\"txs\", \"txn\", \"txns\", \"transaction\", \"transactions\"];\n\nfunction App() {\n  return (\n    <>\n      <ClusterModal />\n      <div className=\"main-content pb-4\">\n        <Navbar />\n        <MessageBanner />\n        <ClusterStatusBanner />\n        <SearchBar />\n        <Switch>\n          <Route exact path={[\"/supply\", \"/accounts\", \"accounts/top\"]}>\n            <SupplyPage />\n          </Route>\n          <Route\n            exact\n            path={TX_ALIASES.map((tx) => `/${tx}/:signature`)}\n            render={({ match, location }) => {\n              let pathname = `/tx/${match.params.signature}`;\n              return <Redirect to={{ ...location, pathname }} />;\n            }}\n          />\n          <Route\n            exact\n            path={[\"/tx/inspector\", \"/tx/:signature/inspect\"]}\n            render={({ match }) => (\n              // @ts-ignore\n              <TransactionInspectorPage signature={match.params.signature} />\n            )}\n          />\n          <Route\n            exact\n            path={\"/tx/:signature\"}\n            render={({ match }) => (\n              <TransactionDetailsPage signature={match.params.signature} />\n            )}\n          />\n          <Route\n            exact\n            path={\"/epoch/:id\"}\n            render={({ match }) => <EpochDetailsPage epoch={match.params.id} />}\n          />\n          <Route\n            exact\n            path={[\"/block/:id\", \"/block/:id/:tab\"]}\n            render={({ match }) => (\n              // @ts-ignore\n              <BlockDetailsPage slot={match.params.id} tab={match.params.tab} />\n            )}\n          />\n          <Route\n            exact\n            path={[\n              ...ADDRESS_ALIASES.map((path) => `/${path}/:address`),\n              ...ADDRESS_ALIASES.map((path) => `/${path}/:address/:tab`),\n            ]}\n            render={({ match, location }) => {\n              let pathname = `/address/${match.params.address}`;\n              if (match.params.tab) {\n                pathname += `/${match.params.tab}`;\n              }\n              return <Redirect to={{ ...location, pathname }} />;\n            }}\n          />\n          <Route\n            exact\n            path={[\"/address/:address\", \"/address/:address/:tab\"]}\n            render={({ match }) => (\n              <AccountDetailsPage\n                address={match.params.address}\n                // @ts-ignore\n                tab={match.params.tab}\n              />\n            )}\n          />\n          <Route exact path=\"/\">\n            <ClusterStatsPage />\n          </Route>\n          <Route\n            render={({ location }) => (\n              <Redirect to={{ ...location, pathname: \"/\" }} />\n            )}\n          />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { SolanaClusterStatsProvider } from \"./solanaClusterStats\";\n\ntype Props = { children: React.ReactNode };\nexport function StatsProvider({ children }: Props) {\n  return <SolanaClusterStatsProvider>{children}</SolanaClusterStatsProvider>;\n}\n","import React from \"react\";\nimport { LargestAccountsProvider } from \"./largest\";\nimport { TokenRegistryProvider } from \"./token-registry\";\n\ntype ProviderProps = { children: React.ReactNode };\nexport function MintsProvider({ children }: ProviderProps) {\n  return (\n    <TokenRegistryProvider>\n      <LargestAccountsProvider>{children}</LargestAccountsProvider>\n    </TokenRegistryProvider>\n  );\n}\n","export const LOCALHOST = \"http://127.0.0.1:8899/\";\n","import {\n  Blockhash,\n  BlockSignatures,\n  Connection,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport { strict as assert } from \"assert\";\nimport bs58 from \"bs58\";\nimport { LOCALHOST } from \"./consts\";\nimport { TransactionSignatureWithBlock } from \"./types\";\n\nconst voteRx = /Program Vote111111111111111111111111111111111111111/;\n\nclass BlockAgent {\n  readonly connection: Connection;\n  constructor(url: string) {\n    this.connection = new Connection(url, \"confirmed\");\n  }\n\n  async getBlockIds() {\n    const txCount = await this.connection.getTransactionCount();\n    const firstBlockId = await this.connection.getFirstAvailableBlock();\n    const blockIds = await this.connection.getBlocks(\n      firstBlockId,\n      firstBlockId + txCount,\n      \"confirmed\"\n    );\n    return {\n      firstBlockId,\n      blockIds,\n    };\n  }\n\n  async oldestValidBlockSignatures() {\n    const { firstBlockId, blockIds } = await this.getBlockIds();\n    let blockSignatures:\n      | { block: number; signatures: BlockSignatures }\n      | undefined = undefined;\n    for (const id of blockIds.reverse()) {\n      try {\n        const signatures = await this.connection.getBlockSignatures(id);\n        blockSignatures = { block: id, signatures };\n      } catch (err: any) {}\n      if (blockSignatures != null) break;\n    }\n\n    assert(blockSignatures != null, \"could not find any block signatures\");\n    return { firstBlockId, blockIds, blockSignatures };\n  }\n\n  async latestTransactionSignatures(amount = 10): Promise<\n    {\n      block: number;\n      signature: TransactionSignature;\n      blockHash: Blockhash;\n      previousBlockHash: Blockhash;\n    }[]\n  > {\n    const { blockIds } = await this.getBlockIds();\n    let allSigs = [];\n    for (let slot of blockIds) {\n      let blockSignatures;\n      try {\n        blockSignatures = await this.connection.getBlockSignatures(\n          slot,\n          \"confirmed\"\n        );\n      } catch (err) {\n        continue;\n      }\n      slot = blockSignatures.parentSlot;\n\n      for (const signature of blockSignatures.signatures.filter(\n        (x) => bs58.decode(x).length === 64\n      )) {\n        const tx = await this.connection.getTransaction(signature);\n        if (\n          tx?.meta?.logMessages == null ||\n          voteRx.test(tx.meta.logMessages[0])\n        ) {\n          continue;\n        }\n        allSigs.push({\n          block: slot,\n          signature,\n          blockHash: blockSignatures.blockhash,\n          previousBlockHash: blockSignatures.previousBlockhash,\n        });\n        if (allSigs.length >= amount) break;\n      }\n      if (allSigs.length >= amount) break;\n    }\n    return allSigs.reverse();\n  }\n}\n\nexport function createBlockAgent(url: string) {\n  return new BlockAgent(url);\n}\n\nexport async function getLatestTransactionSignatures(\n  url: string = LOCALHOST,\n  amount = 5\n): Promise<TransactionSignatureWithBlock[]> {\n  return createBlockAgent(url).latestTransactionSignatures(amount);\n}\n","import ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./scss/theme-dark.scss\";\nimport App from \"./App\";\nimport { ClusterProvider } from \"./providers/cluster\";\nimport { RichListProvider } from \"./providers/richList\";\nimport { SupplyProvider } from \"./providers/supply\";\nimport { TransactionsProvider } from \"./providers/transactions\";\nimport { AccountsProvider } from \"./providers/accounts\";\nimport { BlockProvider } from \"./providers/block\";\nimport { EpochProvider } from \"./providers/epoch\";\nimport { StatsProvider } from \"providers/stats\";\nimport { MintsProvider } from \"providers/mints\";\nimport {\n  AmmanClient,\n  CustomAddressLabelsProvider,\n  TransactionsMonitorProvider,\n} from \"./amman\";\nimport { getLatestTransactionSignatures } from \"./amman/queries\";\nimport { LOCALHOST } from \"./amman/consts\";\nimport { Connection } from \"@solana/web3.js\";\nimport { AMMAN_RELAY_PORT } from \"@metaplex-foundation/amman\";\n\nasync function verifyLocalCluster() {\n  const connection = new Connection(LOCALHOST);\n  try {\n    const clusterNodes = await connection.getClusterNodes();\n    console.log({ clusterNodes });\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction initAmmanClient() {\n  const url = `http://localhost:${AMMAN_RELAY_PORT}`;\n  AmmanClient.setInstance(url);\n  return AmmanClient.instance;\n}\n\nasync function main() {\n  const ammanClient = initAmmanClient();\n  if (!(await verifyLocalCluster())) {\n    ReactDOM.render(\n      <div>\n        <h2>Failed to connect to local test validator at {LOCALHOST}</h2>\n        <div>\n          Please start one, ideally via{\" \"}\n          <a href=\"https://github.com/metaplex-foundation/amman\">amman</a>.\n        </div>\n      </div>,\n      document.getElementById(\"root\")\n    );\n  } else {\n    const currentTransactionSignatures = await getLatestTransactionSignatures();\n\n    ReactDOM.render(\n      <Router>\n        <ClusterProvider>\n          <StatsProvider>\n            <SupplyProvider>\n              <RichListProvider>\n                <AccountsProvider>\n                  <BlockProvider>\n                    <EpochProvider>\n                      <MintsProvider>\n                        <TransactionsProvider>\n                          <TransactionsMonitorProvider\n                            signatures={currentTransactionSignatures}\n                          >\n                            <CustomAddressLabelsProvider\n                              ammanClient={ammanClient}\n                            >\n                              <App />\n                            </CustomAddressLabelsProvider>\n                          </TransactionsMonitorProvider>\n                        </TransactionsProvider>\n                      </MintsProvider>\n                    </EpochProvider>\n                  </BlockProvider>\n                </AccountsProvider>\n              </RichListProvider>\n            </SupplyProvider>\n          </StatsProvider>\n        </ClusterProvider>\n      </Router>,\n      document.getElementById(\"root\")\n    );\n  }\n}\n\nmain().catch((err: any) => {\n  console.error(err);\n});\n"],"sourceRoot":""}